#!/bin/bash
# Usage (from project root):
#   ./wctl/install.sh dev   # configure wctl for docker-compose.dev.yml
#   ./wctl/install.sh prod  # configure wctl for docker-compose.prod.yml
#
# Re-run the script any time you need to switch the wctl target environment.

set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_DIR="$(cd "${SCRIPT_DIR}/.." && pwd)"
WCTL_DIR="${SCRIPT_DIR}"
WCTL_SCRIPT="${WCTL_DIR}/wctl.sh"
SYMLINK_PATH="${WCTL_SYMLINK_PATH:-/usr/local/bin/wctl}"

if [[ ! -d "${WCTL_DIR}" ]]; then
  echo "Expected wctl directory at ${WCTL_DIR}" >&2
  exit 1
fi

if ! command -v python3 >/dev/null 2>&1; then
  echo "python3 is required to run this installer." >&2
  exit 1
fi

resolve_realpath() {
  python3 - "$1" <<'PY'
import os
import sys
print(os.path.realpath(sys.argv[1]))
PY
}

ENVIRONMENT="${1:-dev}"
case "${ENVIRONMENT}" in
  dev)
    COMPOSE_RELATIVE_PATH="docker/docker-compose.dev.yml"
    ;;
  prod)
    COMPOSE_RELATIVE_PATH="docker/docker-compose.prod.yml"
    ;;
  *)
    cat <<'USAGE' >&2
Usage:
  ./wctl/install.sh dev    # configure wctl for docker-compose.dev.yml
  ./wctl/install.sh prod   # configure wctl for docker-compose.prod.yml
USAGE
    exit 1
    ;;
esac

cat > "${WCTL_SCRIPT}" <<EOF
#!/bin/bash

set -euo pipefail

# Autogenerated by ./install.sh for the "${ENVIRONMENT}" environment.

if ! command -v python3 >/dev/null 2>&1; then
  echo "python3 is required to run wctl." >&2
  exit 1
fi

resolve_realpath() {
  python3 - "\$1" <<'PY'
import os
import sys
print(os.path.realpath(sys.argv[1]))
PY
}

SCRIPT_PATH="\$(resolve_realpath "\${BASH_SOURCE[0]}")"
SCRIPT_DIR="\$(cd "\$(dirname "\${SCRIPT_PATH}")" && pwd)"
PROJECT_DIR="\$(cd "\${SCRIPT_DIR}/.." && pwd)"
SOURCE_ENV="\${PROJECT_DIR}/docker/.env"
COMPOSE_FILE_RELATIVE="${COMPOSE_RELATIVE_PATH}"
COMPOSE_FILE="\${PROJECT_DIR}/\${COMPOSE_FILE_RELATIVE}"

cd "\${PROJECT_DIR}" || exit 1

if [[ ! -f "\${SOURCE_ENV}" ]]; then
  echo "Expected env file at \${SOURCE_ENV} (see readme quick-start)." >&2
  exit 1
fi

TEMP_ENV=\$(mktemp -t wctl-env-XXXXXXXX)
cleanup() {
  rm -f "\${TEMP_ENV}"
}
trap cleanup EXIT

python3 - "\${SOURCE_ENV}" "\${TEMP_ENV}" <<'PY'
import sys
from pathlib import Path

src = Path(sys.argv[1])
dst = Path(sys.argv[2])
lines = []
for raw in src.read_text().splitlines():
    if not raw or raw.lstrip().startswith("#"):
        lines.append(raw)
        continue
    if "=" not in raw:
        lines.append(raw)
        continue
    key, value = raw.split("=", 1)
    value = value.replace("\$", "\$\$")
    lines.append(f"{key}={value}")
dst.write_text("\\n".join(lines) + "\\n")
PY

export WEPPPY_ENV_FILE="\${TEMP_ENV}"

STATIC_BUILDER="\${PROJECT_DIR}/wepppy/weppcloud/static-src/build-static-assets.sh"

if [[ \$# -gt 0 ]]; then
  case "\$1" in
    build-static-assets)
      shift
      if [[ ! -x "\${STATIC_BUILDER}" ]]; then
        echo "Static asset build script not found at \${STATIC_BUILDER}" >&2
        exit 1
      fi
      STATIC_ARGS=()
      if [[ "\${COMPOSE_FILE_RELATIVE}" == "docker/docker-compose.prod.yml" ]]; then
        STATIC_ARGS+=(--prod)
      fi
      "\${STATIC_BUILDER}" "\${STATIC_ARGS[@]}" "\$@"
      exit 0
      ;;
  esac
fi

docker compose --env-file "\${TEMP_ENV}" -f "\${COMPOSE_FILE}" "\$@"
EOF

chmod +x "${WCTL_SCRIPT}"

echo "wctl configured for ${ENVIRONMENT} environment (${COMPOSE_RELATIVE_PATH})."

TARGET_REALPATH="$(resolve_realpath "${WCTL_SCRIPT}")"
SYMLINK_UPDATED=false

if [[ -n "${SYMLINK_PATH}" ]]; then
  if [[ -L "${SYMLINK_PATH}" ]]; then
    EXISTING_REALPATH="$(resolve_realpath "${SYMLINK_PATH}")"
    if [[ "${EXISTING_REALPATH}" == "${TARGET_REALPATH}" ]]; then
      echo "Symlink already up to date at ${SYMLINK_PATH}."
      SYMLINK_UPDATED=true
    fi
  fi

  if [[ "${SYMLINK_UPDATED}" == false ]]; then
    if [[ -e "${SYMLINK_PATH}" && ! -L "${SYMLINK_PATH}" ]]; then
      echo "Cannot create symlink at ${SYMLINK_PATH}: path exists and is not a symlink. Remove it or set WCTL_SYMLINK_PATH to a custom location." >&2
    else
      if ln -sfn "${WCTL_SCRIPT}" "${SYMLINK_PATH}"; then
        echo "Symlink created at ${SYMLINK_PATH} -> ${WCTL_SCRIPT}."
      else
        echo "Failed to create symlink at ${SYMLINK_PATH}. Try running with elevated permissions or set WCTL_SYMLINK_PATH to a writable location." >&2
      fi
    fi
  fi
fi
