from _typeshed import Incomplete
from typing import Any, ClassVar, Dict, List, Tuple
from wepppy.nodb.base import NoDbBase

__all__ = ['Map', 'RonNoDbLockedException', 'Ron', 'RonViewModel']

class Map:
    extent: Incomplete
    center: Incomplete
    zoom: Incomplete
    cellsize: Incomplete
    utm: Incomplete
    def __init__(self, extent: List[float], center: List[float], zoom: int, cellsize: float = 30.0) -> None: ...
    @property
    def utm_zone(self) -> int: ...
    @property
    def zone_letter(self) -> str: ...
    @property
    def srid(self) -> int: ...
    @property
    def northern(self) -> bool: ...
    @property
    def ul_x(self) -> float: ...
    @property
    def ul_y(self) -> float: ...
    @property
    def lr_x(self) -> float: ...
    @property
    def lr_y(self) -> float: ...
    @property
    def utm_extent(self) -> Tuple[float, float, float, float]: ...
    @property
    def num_cols(self) -> int: ...
    @property
    def num_rows(self) -> int: ...
    @property
    def shape(self) -> Tuple[int, int]: ...
    @property
    def bounds_str(self) -> str: ...
    def utm_to_px(self, easting: float, northing: float) -> Tuple[int, int]: ...
    def lnglat_to_px(self, lng: float, lat: float) -> Tuple[int, int]: ...
    def px_to_utm(self, x: int, y: int) -> Tuple[float, float]: ...
    def lnglat_to_utm(self, lng: float, lat: float) -> Tuple[float, float]: ...
    def px_to_lnglat(self, x: int, y: int) -> Tuple[float, float]: ...
    def raster_intersection(self, extent: List[float], raster_fn: str, discard: Any | None = None) -> List: ...

class RonNoDbLockedException(Exception): ...

class Ron(NoDbBase):
    __name__: ClassVar[str]
    __exclude__: ClassVar[Tuple[str, ...]]
    filename: ClassVar[str]
    def __init__(self, wd: str, cfg_fn: str = '0.cfg', run_group: str | None = None, group_name: str | None = None) -> None: ...
    def clean_export_dir(self) -> None: ...
    def init_sbs_map(self, sbs_map: str, baer: Any) -> None: ...
    @property
    def configname(self) -> str: ...
    @property
    def max_map_dimension_px(self) -> int: ...
    @property
    def enable_landuse_change(self) -> bool: ...
    def remove_mod(self, mod_name: str) -> None: ...
    @property
    def center0(self) -> List[float]: ...
    @property
    def zoom0(self) -> int: ...
    @property
    def cellsize(self) -> float: ...
    @property
    def boundary(self) -> str | None: ...
    @property
    def boundary_color(self) -> str: ...
    @property
    def boundary_name(self) -> str: ...
    @property
    def map(self) -> Map | None: ...
    def set_map(self, extent: List[float], center: List[float], zoom: int) -> None: ...
    @property
    def w3w(self) -> str: ...
    @property
    def location_hash(self) -> str: ...
    @property
    def extent(self) -> List[float] | None: ...
    @property
    def name(self) -> str: ...
    @name.setter
    def name(self, value: str) -> None: ...
    @property
    def scenario(self) -> str: ...
    @scenario.setter
    def scenario(self, value: str) -> None: ...
    @property
    def has_ash_results(self) -> bool: ...
    @property
    def dem_db(self) -> str: ...
    @dem_db.setter
    def dem_db(self, value: str) -> None: ...
    @property
    def dem_map(self) -> str | None: ...
    @dem_map.setter
    def dem_map(self, value: str) -> None: ...
    def fetch_dem(self) -> None: ...
    @property
    def has_dem(self) -> bool: ...
    def subs_summary(self, abbreviated: bool = False) -> Dict: ...
    def sub_summary(self, topaz_id: str | None = None, wepp_id: str | None = None) -> Dict: ...
    def chns_summary(self, abbreviated: bool = False) -> List[Dict]: ...
    def chn_summary(self, topaz_id: str | None = None, wepp_id: str | None = None) -> Dict: ...

class RonViewModel:
    runid: Incomplete
    name: Incomplete
    scenario: Incomplete
    config_stem: Incomplete
    readonly: Incomplete
    public: Incomplete
    pup_relpath: Incomplete
    def __init__(self, ron: Ron) -> None: ...
    @classmethod
    def getInstanceFromRunID(cls, runid: str) -> RonViewModel: ...
