from __future__ import annotations

from _typeshed import Incomplete
from typing import ClassVar, Dict, Tuple
from wepppy.topo.topaz import MinimumChannelLengthTooShortError, WatershedBoundaryTouchesEdgeError
from wepppy.nodb.base import NoDbBase

__all__ = ['Outlet', 'TopazNoDbLockedException', 'Topaz']


class Outlet:
    requested_loc: Incomplete
    actual_loc: Incomplete
    distance_from_requested: Incomplete
    pixel_coords: Incomplete
    def __init__(self, requested_loc: Tuple[float, float], actual_loc: Tuple[float, float], distance_from_requested: float, pixel_coords: Tuple[int, int]) -> None: ...
    def as_dict(self) -> Dict[str, float | Tuple[int, int]]: ...


class TopazNoDbLockedException(Exception): ...


class Topaz(NoDbBase):
    __name__: ClassVar[str]
    filename: ClassVar[str]
    csa: Incomplete
    mcl: Incomplete
    wsarea: Incomplete
    area_gt30: Incomplete
    ruggedness: Incomplete
    minz: Incomplete
    maxz: Incomplete
    def __init__(self, wd: str, cfg_fn: str, run_group: str | None = None, group_name: str | None = None) -> None: ...
    @property
    def subwta_arc(self) -> str: ...
    @property
    def bound_arc(self) -> str: ...
    @property
    def chnjnt_arc(self) -> str: ...
    @property
    def netful_arc(self) -> str: ...
    @property
    def uparea_out(self) -> str: ...
    @property
    def discha_out(self) -> str: ...
    @property
    def eldcha_out(self) -> str: ...
    @property
    def fvslop_arc(self) -> str: ...
    @property
    def relief_arc(self) -> str: ...
    @property
    def topaz_pass(self) -> int: ...
    @property
    def has_channels(self) -> bool: ...
    num_cols: Incomplete
    num_rows: Incomplete
    cellsize: Incomplete
    def build_channels(self, csa: float = 4, mcl: float = 60) -> None: ...
    @property
    def outlet(self) -> Outlet | None: ...
    @property
    def has_outlet(self) -> bool: ...
    def set_outlet(self, lng: float, lat: float, pixelcoords: bool = False, da: float = 0.0) -> None: ...
    @property
    def has_subcatchments(self) -> bool: ...
    def build_subcatchments(self) -> None: ...
