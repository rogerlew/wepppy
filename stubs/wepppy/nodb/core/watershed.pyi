from __future__ import annotations

from _typeshed import Incomplete
from enum import IntEnum
from typing import Any, ClassVar, Dict, Generator, List, Tuple, Union
from wepppy.all_your_base import NCPU as NCPU
from wepppy.nodb.base import NoDbBase
from wepppy.topo.peridot.flowpath import PeridotChannel, PeridotHillslope
from wepppy.topo.watershed_abstraction import WatershedAbstraction, WeppTopTranslator
from wepppy.topo.watershed_abstraction.support import ChannelSummary, HillSummary
from wepppy.topo.watershed_collection import WatershedFeature
from wepppy.topo.wbt import WhiteboxToolsTopazEmulator

__all__ = [
    'NCPU',
    'DelineationBackend',
    'WatershedNotAbstractedError',
    'WatershedNoDbLockedException',
    'process_channel',
    'process_subcatchment',
    'TRANSIENT_FIELDS',
    'Watershed',
    'Outlet',
]


class DelineationBackend(IntEnum):
    TOPAZ = 1
    TauDEM = 2
    WBT = 3


class WatershedNotAbstractedError(Exception):
    __name__: ClassVar[str]
    def __init__(self) -> None: ...


class WatershedNoDbLockedException(Exception): ...


def process_channel(args: Tuple[WatershedAbstraction, int]) -> Tuple[int, ChannelSummary, Any]: ...

def process_subcatchment(args: Tuple[WatershedAbstraction, int, bool, float, int]) -> Tuple[int, HillSummary, Dict[str, Any]]: ...


TRANSIENT_FIELDS: List[str]


class Outlet:
    requested_loc: Incomplete
    actual_loc: Incomplete
    distance_from_requested: Incomplete
    pixel_coords: Incomplete
    def __init__(self, requested_loc: Tuple[float, float], actual_loc: Tuple[float, float], distance_from_requested: float, pixel_coords: Tuple[int, int]) -> None: ...
    def as_dict(self) -> Dict[str, float]: ...


class Watershed(NoDbBase):
    __name__: ClassVar[str]
    filename: ClassVar[str]
    def __init__(self, wd: str, cfg_fn: str, run_group: str | None = None, group_name: str | None = None) -> None: ...
    @property
    def set_extent_mode(self) -> int: ...
    @set_extent_mode.setter
    def set_extent_mode(self, value: int) -> None: ...
    @property
    def map_bounds_text(self) -> str: ...
    @map_bounds_text.setter
    def map_bounds_text(self, value: str) -> None: ...
    @property
    def delineation_backend(self) -> DelineationBackend: ...
    @property
    def delineation_backend_is_topaz(self) -> bool: ...
    @property
    def wbt_fill_or_breach(self) -> str: ...
    @wbt_fill_or_breach.setter
    def wbt_fill_or_breach(self, value: str) -> None: ...
    @property
    def wbt_blc_dist(self) -> int: ...
    @wbt_blc_dist.setter
    def wbt_blc_dist(self, value: int) -> None: ...
    @property
    def max_points(self) -> int: ...
    @property
    def abstraction_backend(self) -> str: ...
    @property
    def abstraction_backend_is_peridot(self) -> bool: ...
    @property
    def clip_hillslopes(self) -> bool: ...
    @clip_hillslopes.setter
    def clip_hillslopes(self, value: bool) -> None: ...
    @property
    def clip_hillslope_length(self) -> float: ...
    @clip_hillslope_length.setter
    def clip_hillslope_length(self, value: float) -> None: ...
    @property
    def bieger2015_widths(self) -> bool: ...
    @bieger2015_widths.setter
    def bieger2015_widths(self, value: bool) -> None: ...
    @property
    def walk_flowpaths(self) -> bool: ...
    @walk_flowpaths.setter
    def walk_flowpaths(self, value: bool) -> None: ...
    @property
    def delineation_backend_is_taudem(self) -> bool: ...
    @property
    def delineation_backend_is_wbt(self) -> bool: ...
    @property
    def is_abstracted(self) -> bool: ...
    @property
    def wepp_chn_type(self) -> str: ...
    @property
    def subwta(self) -> str: ...
    @property
    def discha(self) -> str | None: ...
    @property
    def subwta_shp(self) -> str | None: ...
    @property
    def subwta_utm_shp(self) -> str | None: ...
    @property
    def bound(self) -> str | None: ...
    @property
    def bound_shp(self) -> str | None: ...
    @property
    def bound_utm_shp(self) -> str: ...
    @property
    def netful(self) -> str | None: ...
    @property
    def netful_shp(self) -> str | None: ...
    @property
    def netful_utm_shp(self) -> str | None: ...
    @property
    def channels_shp(self) -> str | None: ...
    @property
    def channels_utm_shp(self) -> str | None: ...
    @property
    def sub_n(self) -> int: ...
    @property
    def greater300_n(self) -> int: ...
    @property
    def area_gt30(self) -> float | None: ...
    @property
    def ruggedness(self) -> float | None: ...
    @property
    def impoundment_n(self) -> int: ...
    @property
    def chn_n(self) -> int: ...
    @property
    def wsarea(self) -> float: ...
    @property
    def structure(self) -> Any: ...
    @property
    def csa(self) -> float | None: ...
    @property
    def mcl(self) -> float | None: ...
    @property
    def outlet(self) -> Outlet | None: ...
    @outlet.setter
    def outlet(self, value: Outlet | None) -> None: ...
    @property
    def has_outlet(self) -> bool: ...
    @property
    def has_channels(self) -> bool: ...
    @property
    def has_subcatchments(self) -> bool: ...
    @property
    def outlet_top_id(self) -> str | None: ...
    @property
    def relief(self) -> float | None: ...
    def translator_factory(self) -> WeppTopTranslator: ...
    def build_channels(self, csa: float | None = None, mcl: float | None = None) -> None: ...
    @property
    def target_watershed_path(self) -> str: ...
    def find_outlet(self, watershed_feature: WatershedFeature) -> None: ...
    @property
    def wbt(self) -> WhiteboxToolsTopazEmulator | None: ...
    @wbt.setter
    def wbt(self, value: WhiteboxToolsTopazEmulator | None) -> None: ...
    def set_outlet(self, lng: float | None = None, lat: float | None = None, da: float = 0.0) -> None: ...
    def remove_outlet(self) -> None: ...
    def build_subcatchments(self, pkcsa: str | None = None) -> None: ...
    def identify_edge_hillslopes(self) -> None: ...
    @property
    def edge_hillslopes(self) -> List[int]: ...
    @property
    def pkcsa(self) -> str | None: ...
    @property
    def network(self) -> Any: ...
    def abstract_watershed(self) -> None: ...
    @property
    def sub_area(self) -> float: ...
    @property
    def chn_area(self) -> float: ...
    @property
    def mofe_nsegments(self) -> Dict[str, int] | None: ...
    @property
    def mofe_target_length(self) -> float: ...
    @mofe_target_length.setter
    def mofe_target_length(self, value: float) -> None: ...
    @property
    def mofe_buffer(self) -> bool: ...
    @mofe_buffer.setter
    def mofe_buffer(self, value: bool) -> None: ...
    @property
    def mofe_max_ofes(self) -> int: ...
    @mofe_max_ofes.setter
    def mofe_max_ofes(self, value: int) -> None: ...
    @property
    def mofe_buffer_length(self) -> float: ...
    @mofe_buffer_length.setter
    def mofe_buffer_length(self, value: float) -> None: ...
    @property
    def mofe_map(self) -> str: ...
    @property
    def report(self) -> Dict[str, int | float]: ...
    @property
    def centroid(self) -> Tuple[float, float] | None: ...
    def sub_summary(self, topaz_id: str | int) -> PeridotHillslope | Dict[str, Any] | None: ...
    @property
    def fps_summary(self) -> Dict[str, List[str]] | None: ...
    def _(self, wepp_id: int) -> HillSummary | ChannelSummary: ...
    @property
    def subs_summary(self) -> Dict[str, PeridotHillslope | Dict[str, Any]]: ...
    def chn_summary(self, topaz_id: str | int) -> PeridotChannel | Dict[str, Any] | None: ...
    @property
    def chns_summary(self) -> Dict[str, PeridotChannel | Dict[str, Any]]: ...
    def hillslope_length(self, topaz_id: str | int) -> float: ...
    def channel_length(self, topaz_id: str | int) -> float: ...
    def hillslope_centroid_lnglat(self, topaz_id: str | int) -> Tuple[float, float]: ...
    def hillslope_slp_fn(self, topaz_id: str | int) -> str: ...
    def centroid_hillslope_iter(self) -> Generator[Tuple[Union[str, int], Tuple[float, float]], None, None]: ...
    def hillslope_area(self, topaz_id: str | int) -> float: ...
    def hillslope_slope(self, topaz_id: str | int) -> float: ...
    def channel_area(self, topaz_id: str | int) -> float: ...
