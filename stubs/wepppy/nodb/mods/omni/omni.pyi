from __future__ import annotations

import logging
from enum import IntEnum
from typing import Any, ClassVar, Dict, Iterable, List, Optional, Set, Tuple

import pandas as pd

from wepppy.nodb.base import NoDbBase

__all__: list[str] = [
    "OMNI_REL_DIR",
    "LOGGER",
    "OmniScenario",
    "OmniNoDbLockedException",
    "Omni",
]

OMNI_REL_DIR: str
LOGGER: logging.Logger

ScenarioDef = Dict[str, Any]
ContrastMapping = Dict[int | str, str]
ScenarioDependency = Dict[str, Dict[str, Any]]
ContrastDependency = Dict[str, Dict[str, Optional[str]]]


class OmniScenario(IntEnum):
    UniformLow = ...
    UniformModerate = ...
    UniformHigh = ...
    Thinning = ...
    Mulch = ...
    SBSmap = ...
    Undisturbed = ...
    PrescribedFire = ...

    @staticmethod
    def parse(value: int | str | OmniScenario) -> OmniScenario: ...


class OmniNoDbLockedException(Exception):
    ...


def _clear_nodb_cache_and_locks(runid: str, pup_relpath: Optional[str] = ...) -> None: ...

def _run_contrast(
    contrast_id: str,
    contrast_name: str,
    contrasts: ContrastMapping,
    wd: str,
    runid: str,
    wepp_bin: str = ...,
) -> str: ...

def _omni_clone(scenario_def: ScenarioDef, wd: str, runid: str) -> str: ...

def _omni_clone_sibling(new_wd: str, omni_clone_sibling_name: str, runid: str, parent_wd: str) -> None: ...

def _scenario_name_from_scenario_definition(scenario_def: ScenarioDef) -> str: ...

def _hash_file_sha1(path: Optional[str]) -> Optional[str]: ...


class Omni(NoDbBase):
    filename: ClassVar[str]
    __name__: ClassVar[str]
    __exclude__: ClassVar[Tuple[str, ...]]

    def __new__(cls, *args: object, **kwargs: object) -> Omni: ...

    def __init__(
        self,
        wd: str,
        cfg_fn: str = ...,
        run_group: Optional[str] = ...,
        group_name: Optional[str] = ...,
    ) -> None: ...

    @property
    def scenarios(self) -> List[ScenarioDef]: ...

    @scenarios.setter
    def scenarios(self, value: List[ScenarioDef]) -> None: ...

    @property
    def scenario_dependency_tree(self) -> ScenarioDependency: ...

    @scenario_dependency_tree.setter
    def scenario_dependency_tree(self, value: ScenarioDependency) -> None: ...

    @property
    def scenario_run_state(self) -> List[Dict[str, Any]]: ...

    @scenario_run_state.setter
    def scenario_run_state(self, value: List[Dict[str, Any]]) -> None: ...

    def parse_scenarios(self, parsed_inputs: Iterable[Tuple[OmniScenario, ScenarioDef]]) -> None: ...

    def parse_inputs(self, kwds: Dict[str, Any]) -> None: ...

    @property
    def contrasts(self) -> Optional[List[ContrastMapping]]: ...

    @contrasts.setter
    def contrasts(self, value: Optional[List[ContrastMapping]]) -> None: ...

    @property
    def contrast_names(self) -> Optional[List[str]]: ...

    @contrast_names.setter
    def contrast_names(self, value: Optional[List[str]]) -> None: ...

    @property
    def contrast_dependency_tree(self) -> ContrastDependency: ...

    @contrast_dependency_tree.setter
    def contrast_dependency_tree(self, value: ContrastDependency) -> None: ...

    @property
    def omni_dir(self) -> str: ...

    def get_objective_parameter_from_gpkg(self, objective_parameter: str, scenario: Optional[str] = ...) -> Tuple[List[Any], float]: ...

    def clear_contrasts(self) -> None: ...

    def build_contrasts(
        self,
        control_scenario_def: ScenarioDef,
        contrast_scenario_def: ScenarioDef,
        obj_param: str = ...,
        contrast_cumulative_obj_param_threshold_fraction: float = ...,
        contrast_hillslope_limit: Optional[int] = ...,
        hill_min_slope: Optional[float] = ...,
        hill_max_slope: Optional[float] = ...,
        select_burn_severities: Optional[List[int]] = ...,
        select_topaz_ids: Optional[List[int]] = ...,
    ) -> None: ...

    @property
    def base_scenario(self) -> OmniScenario: ...

    def _build_contrasts(self) -> None: ...

    def run_omni_contrasts(self) -> None: ...

    def run_omni_contrast(self, contrast_id: int) -> str: ...

    def contrasts_report(self) -> pd.DataFrame: ...

    def _normalize_scenario_key(self, name: Optional[Any]) -> str: ...

    def _loss_pw0_path_for_scenario(self, scenario_name: Optional[Any]) -> str: ...

    def _scenario_signature(self, scenario_def: ScenarioDef) -> str: ...

    def _scenario_dependency_target(self, scenario: OmniScenario, scenario_def: ScenarioDef) -> Optional[str]: ...

    def _contrast_dependencies(self, contrast_name: str) -> ContrastDependency: ...

    def _contrast_signature(self, contrast_name: str, contrast_payload: ContrastMapping) -> str: ...

    def _post_omni_run(self, omni_wd: str, scenario_name: str) -> None: ...

    @property
    def ran_scenarios(self) -> List[str]: ...

    @property
    def use_rq_job_pool_concurrency(self) -> bool: ...

    @use_rq_job_pool_concurrency.setter
    def use_rq_job_pool_concurrency(self, value: bool) -> None: ...

    @property
    def rq_job_pool_max_worker_per_scenario_task(self) -> int: ...

    def run_omni_scenarios(self) -> None: ...

    def run_omni_scenario(self, scenario_def: ScenarioDef) -> Tuple[str, str]: ...

    @property
    def has_ran_scenarios(self) -> bool: ...

    def scenarios_report(self) -> pd.DataFrame: ...

    def compile_hillslope_summaries(self) -> pd.DataFrame: ...

    def compile_channel_summaries(self) -> pd.DataFrame: ...
