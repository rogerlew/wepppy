x-wepppy-service: &wepppy-service
  build:
    context: ..
    dockerfile: docker/Dockerfile.dev
  image: wepppy-dev
  init: true
  user: "${UID:-33}:${GID:-993}"
  working_dir: /workdir/wepppy
  environment: &wepppy-env
    PYTHONUNBUFFERED: "1"
    REDIS_URL: redis://redis:6379/0
    REDIS_HOST: redis
    MPLCONFIGDIR: /tmp/matplotlib
    DATABASE_URL: ${DATABASE_URL}
    SITE_PREFIX: /weppcloud
    WEPP_AUTH_JWT_SECRET: ${WEPP_AUTH_JWT_SECRET}
    OPENTOPOGRAPHY_API_KEY: ${OPENTOPOGRAPHY_API_KEY}
    DTALE_SERVICE_URL: ${DTALE_SERVICE_URL:-http://dtale:9010}
    DTALE_INTERNAL_TOKEN: ${DTALE_INTERNAL_TOKEN:-dtale-dev}
  env_file:
    - ${WEPPPY_ENV_FILE:-docker/.env}
  volumes:
    - ../:/workdir/wepppy
    - ../../wepppy2:/workdir/wepppy2
    - ../../rosetta:/workdir/rosetta
    - ../../peridot:/workdir/peridot
    - ../../weppcloud-wbt:/workdir/weppcloud-wbt
    - ../../wepppyo3:/workdir/wepppyo3
    - ${WC1_DIR}:/wc1
    - ${GEODATA_DIR}:/geodata
    - /var/run/docker.sock:/var/run/docker.sock

services:
  weppcloud:
    <<: *wepppy-service
    container_name: weppcloud
    shm_size: "1g"
    ulimits:
      nofile:
        soft: 1000000
        hard: 1000000
    entrypoint: ./docker/weppcloud-entrypoint.sh
    command:
      - gunicorn
      - --workers
      - "4"
      - --threads
      - "2"
      - --timeout
      - "1800"
      - --bind
      - 0.0.0.0:8000
      - --log-level
      - info
      - --reload
      - wepppy.weppcloud.app:app
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started

  status:
    build:
      context: ..
      dockerfile: services/status2/Dockerfile
    image: status2-dev
    container_name: weppcloud-status
    environment:
      STATUS_REDIS_URL: redis://redis:6379/2
      STATUS_LISTEN_ADDR: 0.0.0.0:9002
      STATUS_LOG_LEVEL: info
      STATUS_METRICS_ENABLED: "true"
    ports:
      - "9002:9002"
    depends_on:
      redis:
        condition: service_healthy

  preflight:
    build:
      context: ..
      dockerfile: services/preflight2/Dockerfile
    image: preflight2-dev
    container_name: weppcloud-preflight
    environment:
      PREFLIGHT_REDIS_URL: redis://redis:6379/0
      PREFLIGHT_LISTEN_ADDR: 0.0.0.0:9001
      PREFLIGHT_LOG_LEVEL: info
      PREFLIGHT_METRICS_ENABLED: "true"
    ports:
      - "9001:9001"
    depends_on:
      redis:
        condition: service_healthy

  browse:
    <<: *wepppy-service
    container_name: wepppy-browse
    ulimits:
      nofile:
        soft: 1000000
        hard: 1000000
    command:
      - gunicorn
      - --workers
      - "3"
      - --bind
      - 0.0.0.0:9009
      - --log-level
      - info
      - -k
      - uvicorn.workers.UvicornWorker
      - wepppy.microservices.browse:app
    ports:
      - "9009:9009"

  dtale:
    <<: *wepppy-service
    container_name: wepppy-dtale
    command:
      - gunicorn
      - --workers
      - "1"
      - --bind
      - 0.0.0.0:9010
      - --log-level
      - info
      - wepppy.webservices.dtale:app
    environment:
      <<: *wepppy-env
      DTALE_BASE_URL: http://dtale:9010
    ports:
      - "9010:9010"
    depends_on:
      redis:
        condition: service_started

  elevationquery:
    <<: *wepppy-service
    container_name: wepppy-elevationquery
    command:
      - gunicorn
      - --workers
      - "2"
      - -k
      - uvicorn.workers.UvicornWorker
      - --bind
      - 0.0.0.0:8002
      - --log-level
      - info
      - wepppy.microservices.elevationquery:app
    ports:
      - "8002:8002"

  metquery:
    <<: *wepppy-service
    container_name: wepppy-metquery
    command:
      - gunicorn
      - --workers
      - "2"
      - --bind
      - 0.0.0.0:8004
      - --log-level
      - info
      - wepppy.webservices.metquery:app
    ports:
      - "8004:8004"

  wmesque:
    <<: *wepppy-service
    container_name: wepppy-wmesque
    command:
      - gunicorn
      - --workers
      - "2"
      - --bind
      - 0.0.0.0:8003
      - --log-level
      - info
      - wepppy.webservices.wmesque:app
    ports:
      - "8003:8003"

  wmesque2:
    <<: *wepppy-service
    container_name: wepppy-wmesque2
    command:
      - gunicorn
      - --workers
      - "4"
      - --bind
      - 0.0.0.0:8030
      - --log-level
      - info
      - -k
      - uvicorn.workers.UvicornWorker
      - wepppy.webservices.wmesque2:app
    ports:
      - "8030:8030"

  query-engine:
    <<: *wepppy-service
    container_name: wepppy-query-engine
    environment:
      <<: *wepppy-env
      EXTERNAL_HOST: ${EXTERNAL_HOST}
      EXTERNAL_HOST_DESCRIPTION: ${EXTERNAL_HOST_DESCRIPTION}
      WEPP_MCP_JWT_SECRET: ${WEPP_AUTH_JWT_SECRET}
    command:
      - uvicorn
      - wepppy.query_engine.app.server:create_app
      - --factory
      - --host
      - 0.0.0.0
      - --port
      - "8041"
      - --reload
    ports:
      - "8041:8041"

  weppcloudr:
    build:
      context: ..
      dockerfile: weppcloudR/Dockerfile
    image: weppcloudr-dev
    container_name: weppcloudr
    environment:
      PORT: "8050"
      TEMPLATE_ROOT: /srv/weppcloudr/templates/scripts/users/chinmay
      DEVAL_TEMPLATE: /srv/weppcloudr/templates/scripts/users/chinmay/new_report.Rmd
    volumes:
      - ../weppcloudR:/srv/weppcloudr
      - ../WEPPcloudR:/srv/original-weppcloudr
      - ${GEODATA_DIR}:/geodata
      - ${WC1_DIR}:/wc1
      - weppcloudr-renv-cache:/opt/weppcloudr/renv/cache
    ports:
      - "8050:8050"

  rq-worker:
    <<: *wepppy-service
    container_name: wepppy-rq-worker
    shm_size: "8g"
    ulimits:
      nofile:
        soft: 1000000
        hard: 1000000
    command:
      - rq
      - worker-pool
      - -n
      - "4"
      - -u
      - redis://redis:6379/9
      - --logging-level
      - INFO
      - --worker-class
      - wepppy.rq.WepppyRqWorker
      - default
    environment:
      LOGLEVEL: DEBUG
      RQ_LOGGING_LEVEL: DEBUG
      REDIS_HOST: redis
      MPLCONFIGDIR: /tmp/matplotlib
    depends_on:
      redis:
        condition: service_started

  webpush:
    <<: *wepppy-service
    container_name: wepppy-webpush
    command:
      - bash
      - -lc
      - |
        echo "webpush service placeholder â€“ update command once implementation is available.";
        tail -f /dev/null
    profiles: ["webpush"]

  f-esri:
    build:
      context: ..
      dockerfile: docker/Dockerfile.f-esri
    image: wepppy-f-esri
    container_name: wepppy-f-esri
    init: true
    user: "${UID:-33}:${GID:-993}"
    working_dir: /workdir/wepppy
    command: ["tail", "-f", "/dev/null"]
    volumes:
      - ../:/workdir/wepppy
      - ../../wepppy2:/workdir/wepppy2
      - ../../rosetta:/workdir/rosetta
      - ../../peridot:/workdir/peridot
      - ../../weppcloud-wbt:/workdir/weppcloud-wbt
      - ../../wepppyo3:/workdir/wepppyo3
      - ${WC1_DIR}:/wc1
      - ${GEODATA_DIR}:/geodata

  redis:
    image: redis:7.4.6
    container_name: wepppy-redis
    command: ["redis-server", "--notify-keyspace-events", "Kh"]
    ports:
      - "6379:6379"
    volumes:
      - ../.docker-data/redis:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-h", "127.0.0.1", "-p", "6379", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

  postgres:
    image: postgres:16
    container_name: wepppy-postgres
    environment:
      POSTGRES_DB: wepppy
      POSTGRES_USER: wepppy
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - ../.docker-data/postgres:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5

  postgres-backup:
    image: postgres:16
    container_name: wepppy-postgres-backup
    restart: unless-stopped
    environment:
      PGHOST: postgres
      PGUSER: wepppy
      PGDATABASE: wepppy
      PGPASSWORD: ${POSTGRES_PASSWORD}
      BACKUP_DIR: /backups
      BACKUP_KEEP_DAYS: 7
      BACKUP_INTERVAL_SECONDS: 86400
    volumes:
      - ../.docker-data/postgres-backups:/backups
    depends_on:
      postgres:
        condition: service_healthy
    command:
      - bash
      - -lc
      - |
        set -euo pipefail
        mkdir -p "$${BACKUP_DIR:-/backups}"
        while true; do
          ts=$$(date +"%Y%m%d-%H%M%S")
          target="$${BACKUP_DIR:-/backups}/wepppy-$${ts}.dump"
          echo "[ $$(date --iso-8601=seconds) ] writing $$target"
          pg_dump -h "$${PGHOST}" -U "$${PGUSER}" -d "$${PGDATABASE}" -Fc -f "$$target"
          echo "[ $$(date --iso-8601=seconds) ] purge older than $${BACKUP_KEEP_DAYS:-7} days"
          find "$${BACKUP_DIR:-/backups}" -type f -mtime +$${BACKUP_KEEP_DAYS:-7} -delete
          sleep $${BACKUP_INTERVAL_SECONDS:-86400}
        done

  rq-dashboard:
    build:
      context: ../..
      dockerfile: wepppy/docker/Dockerfile.rq-dashboard
    container_name: wepppy-rq-dashboard
    environment:
      RQ_DASHBOARD_REDIS_URL: redis://redis:6379/9
      RQ_DASHBOARD_URL_PREFIX: /rq-dashboard
      PIP_DISABLE_PIP_VERSION_CHECK: "1"
    volumes:
      - ../../rq-dashboard:/rq-dashboard
    working_dir: /rq-dashboard
    expose:
      - "9181"
    command:
      - gunicorn
      - --bind
      - 0.0.0.0:9181
      - --workers
      - "2"
      - --threads
      - "2"
      - --timeout
      - "30"
      - --log-level
      - info
      - rq_dashboard.app:create_app()
    depends_on:
      redis:
        condition: service_started

  caddy:
    image: caddy:2
    container_name: wepppy-caddy
    ports:
      - "8080:8080"
    volumes:
      - ${CADDY_FILE}:/etc/caddy/Caddyfile:ro
      - ../wepppy/weppcloud/static:/srv/weppcloud/static:ro
    depends_on:
      - weppcloud
      - status
      - preflight
      - browse
      - dtale
      - weppcloudr
      - rq-dashboard

networks:
  default:
    name: wepppy-net
    driver: bridge
    ipam:
      config:
        - subnet: 10.0.0.0/16
          gateway: 10.0.0.1

volumes:
  weppcloudr-renv-cache:
