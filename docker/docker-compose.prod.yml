x-wepppy-image: &wepppy-image
  image: ${WEPPCLOUD_IMAGE:-wepppy:latest}
  build:
    context: ..
    dockerfile: docker/Dockerfile
    args:
      APP_USER: www-data
      APP_GROUP: docker
      APP_UID: "33"
      APP_GID: "993"

x-wepppy-env: &wepppy-env
  PYTHONUNBUFFERED: "1"
  MPLCONFIGDIR: /tmp/matplotlib
  REDIS_URL: ${REDIS_URL:-redis://redis:6379/0}
  REDIS_HOST: ${REDIS_HOST:-redis}
  DATABASE_URL: ${DATABASE_URL}
  SITE_PREFIX: ${SITE_PREFIX:-/weppcloud}
  WEPP_AUTH_JWT_SECRET: ${WEPP_AUTH_JWT_SECRET:-change-me}
  WEPP_MCP_HOST: ${WEPP_MCP_HOST:-}
  WEPP_MCP_HOST_DESCRIPTION: ${WEPP_MCP_HOST_DESCRIPTION:-}
  WC1_DIR: ${WC1_DIR:-/srv/wc1}
  GEODATA_DIR: ${GEODATA_DIR:-/srv/geodata}
  OPENTOPOGRAPHY_API_KEY: ${OPENTOPOGRAPHY_API_KEY}

x-wepppy-service: &wepppy-service
  <<: *wepppy-image
  init: true
  restart: unless-stopped
  working_dir: /workdir/wepppy
  env_file:
    - ${WEPPPY_ENV_FILE:-.env}
  environment:
    <<: *wepppy-env
  volumes:
    - wc1-data:${WC1_DIR:-/srv/wc1}
    - geodata-data:${GEODATA_DIR:-/srv/geodata}
  depends_on:
    redis:
      condition: service_started
    postgres:
      condition: service_healthy
  networks:
    - backend

services:
  weppcloud:
    <<: *wepppy-service
    entrypoint: ./docker/weppcloud-entrypoint.sh
    environment:
      <<: *wepppy-env
      CONTROLLERS_JS_EXTRA_OUTPUTS: /srv/weppcloud/static/js/controllers.js
      STATIC_ASSET_SYNC_DIR: /srv/weppcloud/static
    volumes:
      - wc1-data:${WC1_DIR:-/srv/wc1}
      - geodata-data:${GEODATA_DIR:-/srv/geodata}
      - ../wepppy/weppcloud/static:/srv/weppcloud/static
    command:
      - gunicorn
      - --workers
      - "4"
      - --threads
      - "2"
      - --timeout
      - "1800"
      - --bind
      - 0.0.0.0:8000
      - --log-level
      - info
      - wepppy.weppcloud.app:app
    ports:
      - "${WEPPCLOUD_PORT:-8000}:8000"
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8000/health || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 5

  browse:
    <<: *wepppy-service
    environment:
      <<: *wepppy-env
      REDIS_URL: ${BROWSE_REDIS_URL:-redis://redis:6379/0}
    command:
      - gunicorn
      - --workers
      - "3"
      - --bind
      - 0.0.0.0:9009
      - --log-level
      - info
      - -k
      - uvicorn.workers.UvicornWorker
      - wepppy.microservices.browse:app
    ports:
      - "${BROWSE_PORT:-9009}:9009"

  elevationquery:
    <<: *wepppy-service
    command:
      - gunicorn
      - --workers
      - "2"
      - --bind
      - 0.0.0.0:8002
      - --log-level
      - info
      - wepppy.webservices.elevationquery:app
    ports:
      - "${ELEVATIONQUERY_PORT:-8002}:8002"

  metquery:
    <<: *wepppy-service
    command:
      - gunicorn
      - --workers
      - "2"
      - --bind
      - 0.0.0.0:8004
      - --log-level
      - info
      - wepppy.webservices.metquery:app
    ports:
      - "${METQUERY_PORT:-8004}:8004"

  wmesque:
    <<: *wepppy-service
    command:
      - gunicorn
      - --workers
      - "2"
      - --bind
      - 0.0.0.0:8003
      - --log-level
      - info
      - wepppy.webservices.wmesque:app
    ports:
      - "${WMESQUE_PORT:-8003}:8003"

  wmesque2:
    <<: *wepppy-service
    command:
      - gunicorn
      - --workers
      - "4"
      - --bind
      - 0.0.0.0:8030
      - --log-level
      - info
      - -k
      - uvicorn.workers.UvicornWorker
      - wepppy.webservices.wmesque2:app
    ports:
      - "${WMESQUE2_PORT:-8030}:8030"

  query-engine:
    <<: *wepppy-service
    environment:
      <<: *wepppy-env
      WEPP_MCP_HOST: ${WEPP_MCP_HOST}
      WEPP_MCP_HOST_DESCRIPTION: ${WEPP_MCP_HOST_DESCRIPTION}
      WEPP_MCP_JWT_SECRET: ${WEPP_AUTH_JWT_SECRET}
    command:
      - uvicorn
      - wepppy.query_engine.app.server:create_app
      - --factory
      - --host
      - 0.0.0.0
      - --port
      - "8041"
    expose:
      - "8041"

  weppcloudr:
    image: ${WEPPCLOUDR_IMAGE:-weppcloudr:latest}
    build:
      context: ..
      dockerfile: weppcloudR/Dockerfile
    restart: unless-stopped
    environment:
      PORT: ${WEPPCLOUDR_PORT:-8050}
      TEMPLATE_ROOT: /srv/weppcloudr/templates/scripts/users/chinmay
      DEVAL_TEMPLATE: /srv/weppcloudr/templates/scripts/users/chinmay/new_report.Rmd
    volumes:
      - geodata-data:/geodata
      - wc1-data:/wc1
      - weppcloudr-renv-cache:/opt/weppcloudr/renv/cache
    ports:
      - "${WEPPCLOUDR_PORT:-8050}:${WEPPCLOUDR_PORT:-8050}"
    networks:
      - backend

  webpush:
    <<: *wepppy-service
    command:
      - bash
      - -lc
      - |
        echo "webpush service placeholder â€“ update command once implementation is available.";
        tail -f /dev/null
    profiles: ["webpush"]

  rq-worker:
    <<: *wepppy-service
    environment:
      <<: *wepppy-env
      LOGLEVEL: INFO
      RQ_LOGGING_LEVEL: INFO
      REDIS_URL: redis://redis:6379/9
    command:
      - rq
      - worker-pool
      - -n
      - "4"
      - -u
      - redis://redis:6379/9
      - --logging-level
      - INFO
      - --worker-class
      - wepppy.rq.WepppyRqWorker
      - default

  status:
    image: ${WEPPCLOUD_STATUS_IMAGE:-wepppy-status:latest}
    build:
      context: ..
      dockerfile: services/status2/Dockerfile
    restart: unless-stopped
    env_file:
      - ${WEPPPY_ENV_FILE:-.env}
    environment:
      STATUS_REDIS_URL: redis://redis:6379/2
      STATUS_LISTEN_ADDR: 0.0.0.0:9002
      STATUS_LOG_LEVEL: info
      STATUS_METRICS_ENABLED: "true"
    ports:
      - "${STATUS_PORT:-9002}:9002"
    depends_on:
      redis:
        condition: service_started
    networks:
      - backend

  preflight:
    image: ${WEPPCLOUD_PREFLIGHT_IMAGE:-wepppy-preflight:latest}
    build:
      context: ..
      dockerfile: services/preflight2/Dockerfile
    restart: unless-stopped
    env_file:
      - ${WEPPPY_ENV_FILE:-.env}
    environment:
      PREFLIGHT_REDIS_URL: redis://redis:6379/0
      PREFLIGHT_LISTEN_ADDR: 0.0.0.0:9001
      PREFLIGHT_LOG_LEVEL: info
      PREFLIGHT_METRICS_ENABLED: "true"
    ports:
      - "${PREFLIGHT_PORT:-9001}:9001"
    depends_on:
      redis:
        condition: service_started
    networks:
      - backend

  caddy:
    image: caddy:2
    restart: unless-stopped
    ports:
      - "${CADDY_PORT:-8080}:8080"
    volumes:
      - ${CADDY_FILE:-./docker/caddy/Caddyfile}:/etc/caddy/Caddyfile:ro
      - ../wepppy/weppcloud/static:/srv/weppcloud/static:ro
    depends_on:
      weppcloud:
        condition: service_started
      status:
        condition: service_started
      preflight:
        condition: service_started
      browse:
        condition: service_started
      weppcloudr:
        condition: service_started
    networks:
      - backend

  f-esri:
    image: ${F_ESRI_IMAGE:-wepppy-f-esri:latest}
    build:
      context: ..
      dockerfile: docker/Dockerfile.f-esri
    restart: unless-stopped
    init: true
    command: ["tail", "-f", "/dev/null"]
    networks:
      - backend

  redis:
    image: redis:7.4.6
    restart: unless-stopped
    command: ["redis-server", "--notify-keyspace-events", "Kh"]
    volumes:
      - redis-data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - backend

  postgres:
    image: postgres:16
    restart: unless-stopped
    environment:
      POSTGRES_DB: wepppy
      POSTGRES_USER: wepppy
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-c0ff33}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend

  postgres-backup:
    image: postgres:16
    restart: unless-stopped
    environment:
      PGHOST: postgres
      PGUSER: wepppy
      PGDATABASE: wepppy
      PGPASSWORD: ${POSTGRES_PASSWORD:-c0ff33}
      BACKUP_DIR: /backups
      BACKUP_KEEP_DAYS: 7
      BACKUP_INTERVAL_SECONDS: 86400
    volumes:
      - postgres-backups:/backups
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - backend
    command:
      - bash
      - -lc
      - |
        set -euo pipefail
        mkdir -p "$${BACKUP_DIR:-/backups}"
        while true; do
          ts=$$(date +"%Y%m%d-%H%M%S")
          target="$${BACKUP_DIR:-/backups}/wepppy-$${ts}.dump"
          echo "[ $$(date --iso-8601=seconds) ] writing $$target"
          pg_dump -h "$${PGHOST}" -U "$${PGUSER}" -d "$${PGDATABASE}" -Fc -f "$$target"
          echo "[ $$(date --iso-8601=seconds) ] purge older than $${BACKUP_KEEP_DAYS:-7} days"
          find "$${BACKUP_DIR:-/backups}" -type f -mtime +$${BACKUP_KEEP_DAYS:-7} -delete
          sleep $${BACKUP_INTERVAL_SECONDS:-86400}
        done

networks:
  backend:
    driver: bridge

volumes:
  wc1-data:
  geodata-data:
  redis-data:
  postgres-data:
  weppcloudr-renv-cache:
  postgres-backups:
