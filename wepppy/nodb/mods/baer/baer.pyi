from __future__ import annotations

from collections import Counter
from typing import Any, ClassVar, Dict, List, Optional, Sequence, Tuple

from wepppy.nodb.base import NoDbBase, TriggerEvents
from wepppy.wepp.soils.utils import SoilReplacements

from .sbs_map import SoilBurnSeverityMap

__all__: List[str] = ["BaerNoDbLockedException", "sbs_soil_replacements", "Baer"]
sbs_soil_replacements: Dict[str, SoilReplacements]


class BaerNoDbLockedException(Exception):
    ...


class Baer(NoDbBase):
    filename: ClassVar[str]
    __name__: ClassVar[str]
    sbs_coverage: Optional[Dict[str, float]]

    def __new__(cls, *args: Any, **kwargs: Any) -> Baer: ...

    def __init__(
        self,
        wd: str,
        cfg_fn: str,
        run_group: Optional[str] = ...,
        group_name: Optional[str] = ...,
    ) -> None: ...

    @property
    def legacy_mode(self) -> bool: ...

    @property
    def baer_dir(self) -> str: ...

    @property
    def baer_soils_dir(self) -> str: ...

    @property
    def baer_fn(self) -> Optional[str]: ...

    @property
    def disturbed_fn(self) -> Optional[str]: ...

    @property
    def has_map(self) -> bool: ...

    @property
    def is256(self) -> bool: ...

    @property
    def sbs_mode(self) -> int: ...

    @sbs_mode.setter
    def sbs_mode(self, value: int) -> None: ...

    @property
    def uniform_severity(self) -> Optional[int]: ...

    @uniform_severity.setter
    def uniform_severity(self, value: Optional[int]) -> None: ...

    @property
    def color_tbl_path(self) -> str: ...

    @property
    def bounds(self) -> Optional[List[List[float]]]: ...

    @property
    def classes(self) -> Optional[List[int]]: ...

    @property
    def breaks(self) -> Optional[List[int]]: ...

    @property
    def nodata_vals(self) -> str: ...

    def classify(self, value: int) -> str: ...

    @property
    def baer_path(self) -> Optional[str]: ...

    @property
    def baer_wgs(self) -> str: ...

    @property
    def baer_rgb(self) -> str: ...

    @property
    def baer_rgb_png(self) -> str: ...

    @property
    def baer_cropped(self) -> str: ...

    @property
    def legend(self) -> List[Tuple[int, str, str]]: ...

    def write_color_table(self) -> None: ...

    def build_color_map(self) -> None: ...

    @property
    def sbs_wgs_n(self) -> int: ...

    @property
    def sbs_wgs_area_ha(self) -> float: ...

    @property
    def sbs_class_counts(self) -> Counter[str]: ...

    @property
    def sbs_class_pcts(self) -> Dict[str, float]: ...

    @property
    def sbs_class_areas(self) -> Dict[str, float]: ...

    @property
    def class_map(self) -> List[Tuple[int, str, int]]: ...

    def modify_burn_class(self, breaks: Sequence[int], nodata_vals: Optional[str]) -> None: ...

    def remove_sbs(self) -> None: ...

    def validate(self, fn: str, *, mode: Optional[int] = ..., uniform_severity: Optional[int] = ...) -> None: ...

    def on(self, evt: TriggerEvents) -> None: ...

    @property
    def ct(self) -> Optional[str]: ...

    def remap_landuse(self) -> None: ...

    def _assign_eu_soils(self) -> None: ...

    def _assign_au_soils(self) -> None: ...

    def modify_soils(self) -> None: ...

    def _calc_sbs_coverage(self, sbs: Optional[SoilBurnSeverityMap]) -> None: ...
