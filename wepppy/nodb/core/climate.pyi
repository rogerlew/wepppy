from __future__ import annotations

import numpy as np
import numpy.typing as npt
from _typeshed import Incomplete
from enum import IntEnum
from typing import Any, ClassVar, Dict, List, Tuple, TYPE_CHECKING
from wepppy.climates.cligen import Cligen
from wepppy.nodb.base import NoDbBase

__all__ = [
    'lng_lat_to_pixel_center',
    'daymet_pixel_center',
    'gridmet_pixel_center',
    'prism4k_pixel_center',
    'nexrad_pixel_center',
    'download_file',
    'breakpoint_file_fix',
    'CLIMATE_MAX_YEARS',
    'ClimateSummary',
    'NoClimateStationSelectedError',
    'ClimateModeIsUndefinedError',
    'ClimateNoDbLockedException',
    'ClimateStationMode',
    'ClimateMode',
    'ClimateSpatialMode',
    'ClimatePrecipScalingMode',
    'get_prism_p_annual_monthlies',
    'build_observed_prism',
    'get_daymet_p_annual_monthlies',
    'build_observed_daymet',
    'build_observed_daymet_interpolated',
    'build_observed_snotel',
    'get_gridmet_p_annual_monthlies',
    'build_observed_gridmet',
    'build_observed_gridmet_interpolated',
    'build_future',
    'get_monthlies',
    'cli_revision',
    'Climate',
]

def lng_lat_to_pixel_center(lng: float, lat: float, proj4: str, transform: Tuple[float, float, float, float, float, float], width: int, height: int) -> Tuple[float | None, float | None]: ...
def daymet_pixel_center(lng: float, lat: float) -> Tuple[float | None, float | None]: ...
def gridmet_pixel_center(lng: float, lat: float) -> Tuple[float | None, float | None]: ...
def prism4k_pixel_center(lng: float, lat: float) -> Tuple[float | None, float | None]: ...
def nexrad_pixel_center(lng: float, lat: float) -> Tuple[float, float]: ...
def download_file(url: str, dst: str) -> None: ...
def breakpoint_file_fix(fn: str) -> None: ...

CLIMATE_MAX_YEARS: int

class ClimateSummary:
    par_fn: Incomplete
    description: Incomplete
    climatestation: Incomplete
    def __init__(self) -> None: ...

class NoClimateStationSelectedError(Exception):
    __name__: ClassVar[str]
    def __init__(self) -> None: ...

class ClimateModeIsUndefinedError(Exception):
    __name__: ClassVar[str]
    def __init__(self) -> None: ...

class ClimateNoDbLockedException(Exception): ...

class ClimateStationMode(IntEnum):
    Undefined = -1
    Closest = 0
    Heuristic = 1
    EUHeuristic = 2
    AUHeuristic = 3
    UserDefined = 4
    MesonetIA = 5


class ClimateMode(IntEnum):
    Undefined = -1
    Vanilla = 0
    Observed = 2
    ObservedPRISM = 9
    Future = 3
    SingleStorm = 4
    PRISM = 5
    ObservedDb = 6
    FutureDb = 7
    EOBS = 8
    AGDC = 10
    GridMetPRISM = 11
    UserDefined = 12
    DepNexrad = 13
    SingleStormBatch = 14
    UserDefinedSingleStorm = 15
    @staticmethod
    def parse(x: str | None) -> ClimateMode: ...

class ClimateSpatialMode(IntEnum):
    Undefined = -1
    Single = 0
    Multiple = 1
    MultipleInterpolated = 2
    @staticmethod
    def parse(x: str | None) -> ClimateSpatialMode: ...

class ClimatePrecipScalingMode(IntEnum):
    NoScaling = 0
    Scalar = 1
    Monthlies = 2
    AnnualMonthlies = 3
    Spatial = 4
    @staticmethod
    def parse(x: str) -> ClimatePrecipScalingMode: ...

def get_prism_p_annual_monthlies(lng: float, lat: float, start_year: int, end_year: int) -> List[float]: ...
def build_observed_prism(cligen: Cligen, lng: float, lat: float, start_year: int, end_year: int, cli_dir: str, prn_fn: str, cli_fn: str, gridmet_wind: bool = True) -> None: ...
def get_daymet_p_annual_monthlies(lng: float, lat: float, start_year: int, end_year: int) -> List[float]: ...
def build_observed_daymet(cligen: Cligen, lng: float, lat: float, start_year: int, end_year: int, cli_dir: str, prn_fn: str, cli_fn: str, gridmet_wind: bool = True) -> None: ...
def build_observed_daymet_interpolated(cligen: Cligen, topaz_id: str, lng: float, lat: float, start_year: int, end_year: int, cli_dir: str, cli_fn: str, prn_fn: str, wind_vs: Any | None = None, wind_dir: Any | None = None) -> str: ...
def build_observed_snotel(cligen: Cligen, lng: float, lat: float, snotel_id: str, start_year: int, end_year: int, cli_dir: str, prn_fn: str, cli_fn: str, gridmet_supplement: bool = True) -> None: ...
def get_gridmet_p_annual_monthlies(lng: float, lat: float, start_year: int, end_year: int) -> List[float]: ...
def build_observed_gridmet(cligen: Cligen, lng: float, lat: float, start_year: int, end_year: int, cli_dir: str, prn_fn: str, cli_fn: str) -> None: ...
def build_observed_gridmet_interpolated(cligen: Cligen, topaz_id: str, lng: float, lat: float, start_year: int, end_year: int, cli_dir: str, cli_fn: str, prn_fn: str) -> str: ...
def build_future(cligen: Cligen, lng: float, lat: float, start_year: int, end_year: int, cli_dir: str, prn_fn: str, cli_fn: str) -> None: ...
def get_monthlies(fn: str, lng: float, lat: float) -> List[float]: ...
def cli_revision(cli_fn: str, is_breakpoint: bool, ws_ppts: npt.NDArray[np.float_], ws_tmaxs: npt.NDArray[np.float_], ws_tmins: npt.NDArray[np.float_], ppt_fn: str, tmin_fn: str, tmax_fn: str, hill_lng: float, hill_lat: float, new_cli_path: str) -> str: ...

class Climate(NoDbBase):
    __name__: ClassVar[str]
    filename: ClassVar[str]
    monthlies: Incomplete
    par_fn: Incomplete
    cli_fn: Incomplete
    sub_par_fns: Incomplete
    sub_cli_fns: Incomplete
    def __init__(self, wd: str, cfg_fn: str, run_group: str | None = None, group_name: str | None = None) -> None: ...
    @property
    def daymet_last_available_year(self) -> int: ...
    @property
    def use_gridmet_wind_when_applicable(self) -> bool: ...
    @use_gridmet_wind_when_applicable.setter
    def use_gridmet_wind_when_applicable(self, value: bool) -> None: ...
    @property
    def precip_scale_reference(self) -> str | None: ...
    @precip_scale_reference.setter
    def precip_scale_reference(self, value: str | None) -> None: ...
    @property
    def precip_monthly_scale_factors(self) -> List[float]: ...
    @precip_monthly_scale_factors.setter
    def precip_monthly_scale_factors(self, value: List[float] | None) -> None: ...
    @property
    def precip_scale_factor(self) -> float | None: ...
    @precip_scale_factor.setter
    def precip_scale_factor(self, value: float | None) -> None: ...
    @property
    def precip_scale_factor_map(self) -> str | None: ...
    @property
    def gridmet_precip_scale_factor(self) -> float | None: ...
    @property
    def gridmet_precip_scale_factor_map(self) -> str | None: ...
    @property
    def daymet_precip_scale_factor(self) -> float | None: ...
    @property
    def daymet_precip_scale_factor_map(self) -> str | None: ...
    @property
    def cligen_db(self) -> str: ...
    @property
    def cli_path(self) -> str: ...
    @property
    def is_breakpoint(self) -> bool: ...
    @property
    def observed_clis(self) -> List[str] | None: ...
    @property
    def future_clis(self) -> List[str] | None: ...
    @property
    def years(self) -> int: ...
    @property
    def observed_start_year(self) -> str | int: ...
    @property
    def observed_end_year(self) -> str | int: ...
    @property
    def future_start_year(self) -> str | int: ...
    @property
    def future_end_year(self) -> str | int: ...
    @property
    def ss_storm_date(self) -> str: ...
    @property
    def ss_design_storm_amount_inches(self) -> float: ...
    @property
    def ss_duration_of_storm_in_hours(self) -> float: ...
    @property
    def ss_time_to_peak_intensity_pct(self) -> float: ...
    @property
    def ss_max_intensity_inches_per_hour(self) -> float: ...
    @property
    def ss_batch_storms(self) -> List[Dict[str, Any]] | None: ...
    @property
    def ss_batch(self) -> str: ...
    @ss_batch.setter
    def ss_batch(self, value: str) -> None: ...
    @property
    def climate_daily_temp_ds(self) -> str: ...
    @climate_daily_temp_ds.setter
    def climate_daily_temp_ds(self, value: str) -> None: ...
    @property
    def daymet_version(self) -> str: ...
    @daymet_version.setter
    def daymet_version(self, value: str) -> None: ...
    @property
    def has_climatestation_mode(self) -> bool: ...
    if TYPE_CHECKING:
        climatestation_mode: ClimateStationMode
    else:
        @property
        def climatestation_mode(self) -> ClimateStationMode: ...
        @climatestation_mode.setter
        def climatestation_mode(self, value: ClimateStationMode | int) -> None: ...
    @property
    def onLoad_refreshStationSelection(self) -> str: ...
    @property
    def year0(self) -> int | None: ...
    @property
    def has_observed(self) -> bool | None: ...
    @property
    def climatestation(self) -> str | None: ...
    @climatestation.setter
    def climatestation(self, value: str | None) -> None: ...
    @property
    def climatestation_meta(self) -> Any: ...
    @property
    def climatestation_par_contents(self) -> str: ...
    @property
    def climate_mode(self) -> ClimateMode: ...
    @climate_mode.setter
    def climate_mode(self, value: ClimateMode | int | str) -> None: ...
    @property
    def is_single_storm(self) -> bool: ...
    @property
    def precip_scaling_mode(self) -> ClimatePrecipScalingMode: ...
    @precip_scaling_mode.setter
    def precip_scaling_mode(self, value: ClimatePrecipScalingMode | int | str) -> None: ...
    @property
    def precip_scaling_reference(self) -> str | None: ...
    @precip_scaling_reference.setter
    def precip_scaling_reference(self, value: str | None) -> None: ...
    @property
    def climate_spatialmode(self) -> ClimateSpatialMode: ...
    @climate_spatialmode.setter
    def climate_spatialmode(self, value: ClimateSpatialMode | int | str) -> None: ...
    def find_closest_stations(self, num_stations: int = 10) -> List[Dict[str, Any]] | None: ...
    @property
    def closest_stations(self) -> List[Dict[str, Any]] | None: ...
    def find_heuristic_stations(self, num_stations: int = 10) -> List[Dict[str, Any]] | None: ...
    def find_eu_heuristic_stations(self, num_stations: int = 10) -> List[Dict[str, Any]] | None: ...
    def find_au_heuristic_stations(self, num_stations: int | None = None) -> List[Dict[str, Any]] | None: ...
    @property
    def heuristic_stations(self) -> List[Dict[str, Any]] | None: ...
    @property
    def orig_cli_fn(self) -> str | None: ...
    @orig_cli_fn.setter
    def orig_cli_fn(self, value: str | None) -> None: ...
    @property
    def input_years(self) -> int: ...
    @input_years.setter
    def input_years(self, value: int) -> None: ...
    @property
    def has_station(self) -> bool: ...
    @property
    def has_climate(self) -> bool: ...
    def parse_inputs(self, kwds: Dict[str, Any]) -> None: ...
    def set_observed_pars(self, **kwds: Any) -> None: ...
    def set_future_pars(self, **kwds: Any) -> None: ...
    def set_single_storm_pars(self, **kwds: Any) -> None: ...
    def build(self, verbose: bool = False, attrs: Dict[str, Any] | None = None) -> None: ...
    def set_user_defined_cli(self, cli_fn: str, verbose: bool = False) -> None: ...
    def sub_summary(self, topaz_id: str) -> Dict[str, str] | None: ...
    def chn_summary(self, topaz_id: str) -> Dict[str, str] | None: ...
    def _(self, wepp_id: int) -> Dict[str, str]: ...
