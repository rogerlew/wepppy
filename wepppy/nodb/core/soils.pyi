from _typeshed import Incomplete
from collections.abc import Generator
from enum import IntEnum
from typing import Any, Dict, List
from wepppy.nodb.base import NoDbBase

__all__ = ['SoilsNoDbLockedException', 'SoilsMode', 'Soils']

class SoilsNoDbLockedException(Exception): ...

class SoilsMode(IntEnum):
    Undefined: int
    Gridded: int
    Single: int
    SingleDb: int
    RRED_Unburned: int
    RRED_Burned: int
    SpatialAPI: int

class Soils(NoDbBase):
    filename: str
    domsoil_d: Incomplete
    ssurgo_domsoil_d: Incomplete
    soils: Incomplete
    def __init__(self, wd: str, cfg_fn: str, run_group: str | None = None, group_name: str | None = None) -> None: ...
    @property
    def clip_soils(self) -> bool: ...
    @clip_soils.setter
    def clip_soils(self, value: bool) -> None: ...
    @property
    def clip_soils_depth(self) -> float: ...
    @clip_soils_depth.setter
    def clip_soils_depth(self, value: float) -> None: ...
    @property
    def initial_sat(self) -> float: ...
    @initial_sat.setter
    def initial_sat(self, value: float) -> None: ...
    @property
    def ksflag(self) -> bool: ...
    @ksflag.setter
    def ksflag(self, value: bool) -> None: ...
    @property
    def mode(self) -> SoilsMode: ...
    @mode.setter
    def mode(self, value: Any) -> None: ...
    @property
    def soils_map(self) -> str | None: ...
    @property
    def single_selection(self) -> int: ...
    @single_selection.setter
    def single_selection(self, mukey: int) -> None: ...
    @property
    def single_dbselection(self) -> str | None: ...
    @single_dbselection.setter
    def single_dbselection(self, sol: str) -> None: ...
    @property
    def has_soils(self) -> bool: ...
    @property
    def legend(self) -> List[str]: ...
    def clean(self) -> None: ...
    @property
    def ssurgo_db(self) -> str | None: ...
    @ssurgo_db.setter
    def ssurgo_db(self, value: str) -> None: ...
    def build_chile(self, initial_sat: float | None = None, ksflag: bool | None = None) -> None: ...
    def build_isric(self, initial_sat: float | None = None, ksflag: bool | None = None, max_workers: int = 16) -> None: ...
    def build_statsgo(self, initial_sat: float | None = None, ksflag: bool | None = None) -> None: ...
    def build(self, initial_sat: float | None = None, ksflag: bool | None = None, max_workers: int | None = None) -> None: ...
    @property
    def bd_d(self) -> Dict: ...
    @property
    def clay_d(self): ...
    @property
    def sand_d(self): ...
    @property
    def ll_d(self): ...
    @property
    def clay_pct(self): ...
    @property
    def liquid_limit(self): ...
    @property
    def report(self) -> str: ...
    def sub_summary(self, topaz_id: str, abbreviated: bool = False) -> Dict | None: ...
    def chn_summary(self, topaz_id: str, abbreviated: bool = False) -> Dict | None: ...
    @property
    def subs_summary(self) -> Dict: ...
    def dump_soils_parquet(self) -> None: ...
    @property
    def hill_table(self) -> List[Dict]: ...
    def sub_iter(self) -> Generator[Incomplete, None, None]: ...
    @property
    def chns_summary(self): ...
    def chn_iter(self) -> Generator[Incomplete, None, None]: ...
    def _(self, wepp_id): ...
