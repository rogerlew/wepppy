from _typeshed import Incomplete
from collections.abc import Generator
from enum import IntEnum
from typing import Any, Dict, List
from wepppy.nodb.base import NoDbBase

__all__ = ['LanduseNoDbLockedException', 'LanduseMode', 'read_cover_defaults', 'Landuse']

class LanduseNoDbLockedException(Exception): ...

class LanduseMode(IntEnum):
    Undefined: int
    Gridded: int
    Single: int
    RRED_Unburned: int
    RRED_Burned: int
    UserDefined: int
    SpatialAPI: int

def read_cover_defaults(fn: str) -> Dict[str, Dict]: ...

class Landuse(NoDbBase):
    filename: str
    domlc_d: Incomplete
    managements: Incomplete
    cover_defaults_d: Incomplete
    domlc_mofe_d: Incomplete
    def __init__(self, wd: str, cfg_fn: str, run_group: str | None = None, group_name: str | None = None) -> None: ...
    @property
    def mapping(self) -> str | None: ...
    @mapping.setter
    def mapping(self, value: str): ...
    def get_mapping_dict(self) -> dict[str, dict]: ...
    @property
    def mode(self) -> LanduseMode: ...
    @mode.setter
    def mode(self, value: Any) -> None: ...
    @property
    def single_selection(self) -> int: ...
    @single_selection.setter
    def single_selection(self, landuse_single_selection: int) -> None: ...
    @property
    def single_man(self) -> Any | None: ...
    @property
    def mofe_buffer_selection(self) -> int: ...
    @mofe_buffer_selection.setter
    def mofe_buffer_selection(self, k: int) -> None: ...
    @property
    def buffer_man(self) -> Any | None: ...
    @property
    def has_landuse(self) -> bool: ...
    def clean(self) -> None: ...
    @property
    def fractionals(self) -> List | None: ...
    @fractionals.setter
    def fractionals(self, value: List) -> None: ...
    @property
    def nlcd_db(self) -> str | None: ...
    @nlcd_db.setter
    def nlcd_db(self, value: str) -> None: ...
    def build(self) -> None: ...
    def identify_disturbed_class(self, topaz_id: str, mofe_id: str | None = None) -> str | None: ...
    def identify_burn_class(self, topaz_id: str, mofe_id: str | None = None) -> str | None: ...
    def set_cover_defaults(self) -> None: ...
    def modify_coverage(self, dom: str, cover: str, value: float) -> None: ...
    def modify_mapping(self, dom: str, newdom: str) -> None: ...
    @property
    def landuseoptions(self) -> Dict: ...
    def build_managements(self, _map: str | None = None) -> None: ...
    @property
    def report(self) -> str: ...
    def modify(self, topaz_ids: List[str], landuse: str) -> None: ...
    @property
    def legend(self) -> List[str]: ...
    def sub_summary(self, topaz_id: str): ...
    def chn_summary(self, topaz_id: str) -> Dict | None: ...
    @property
    def hillslope_cancovs(self) -> List | None: ...
    @hillslope_cancovs.setter
    def hillslope_cancovs(self, value) -> None: ...
    @property
    def hillslope_mofe_cancovs(self) -> List | None: ...
    @property
    def subs_summary(self) -> Dict: ...
    def dump_landuse_parquet(self) -> None: ...
    @property
    def hill_table(self) -> List[Dict]: ...
    def sub_iter(self) -> Generator[Incomplete, None, None]: ...
    @property
    def chns_summary(self) -> Dict: ...
    def chn_iter(self) -> Generator[Incomplete, None, None]: ...
    def _(self, wepp_id): ...
