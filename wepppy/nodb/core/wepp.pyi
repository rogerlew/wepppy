from __future__ import annotations

from _typeshed import Incomplete
from enum import IntEnum
from typing import Any, ClassVar, Dict, List, Set, Tuple, TYPE_CHECKING
from wepppy.nodb.base import NoDbBase
from wepppy.wepp.reports import ChannelWatbalReport, FrqFloodReport, HillslopeWatbalReport, ReturnPeriods, SedimentCharacteristics

__all__ = ['ChannelRoutingMethod', 'SnowOpts', 'BaseflowOpts', 'PhosphorusOpts', 'TCROpts', 'WeppNoDbLockedException', 'Wepp']

class ChannelRoutingMethod(IntEnum):
    Creams = 2
    MuskingumCunge = 4

class SnowOpts:
    rst: float
    newsnw: float
    ssd: float
    def __init__(self, rst: float | None = None, newsnw: float | None = None, ssd: float | None = None) -> None: ...
    def parse_inputs(self, kwds: Dict[str, Any]) -> None: ...
    @property
    def contents(self) -> str: ...

class BaseflowOpts:
    gwstorage: float
    bfcoeff: float
    dscoeff: float
    bfthreshold: float
    def __init__(self, gwstorage: float | None = None, bfcoeff: float | None = None, dscoeff: float | None = None, bfthreshold: float | None = None) -> None: ...
    def parse_inputs(self, kwds: Dict[str, Any]) -> None: ...
    @property
    def contents(self) -> str: ...

class PhosphorusOpts:
    surf_runoff: float | None
    lateral_flow: float | None
    baseflow: float | None
    sediment: float | None
    def __init__(self, surf_runoff: float | None = None, lateral_flow: float | None = None, baseflow: float | None = None, sediment: float | None = None) -> None: ...
    def parse_inputs(self, kwds: Dict[str, Any]) -> None: ...
    @property
    def isvalid(self) -> bool: ...
    @property
    def contents(self) -> str: ...
    def asdict(self) -> Dict[str, float | None]: ...

class TCROpts:
    taumin: float | None
    taumax: float | None
    kch: float | None
    nch: float | None
    def __init__(self, taumin: float | None = None, taumax: float | None = None, kch: float | None = None, nch: float | None = None) -> None: ...
    def parse_inputs(self, kwds: Dict[str, Any]) -> None: ...
    @property
    def contents(self) -> str: ...

class WeppNoDbLockedException(Exception): ...

class Wepp(NoDbBase):
    __name__: ClassVar[str]
    filename: ClassVar[str]
    phosphorus_opts: Incomplete
    p_surf_runoff_map: Incomplete
    p_lateral_flow_map: Incomplete
    p_baseflow_map: Incomplete
    p_sediment_map: Incomplete
    snow_opts: Incomplete
    tcr_opts: Incomplete
    channel_critical_shear_map: Incomplete
    baseflow_opts: Incomplete
    baseflow_gwstorage_map: Incomplete
    baseflow_bfcoeff_map: Incomplete
    baseflow_dscoeff_map: Incomplete
    baseflow_bfthreshold_map: Incomplete
    run_flowpaths: bool
    loss_grid_d_path: Incomplete
    def __init__(self, wd: str, cfg_fn: str, run_group: str | None = None, group_name: str | None = None) -> None: ...
    if TYPE_CHECKING:
        dss_export_mode: int
    else:
        @property
        def dss_export_mode(self) -> int: ...
        @dss_export_mode.setter
        def dss_export_mode(self, value: int) -> None: ...
    @property
    def dss_excluded_channel_orders(self) -> list: ...
    @dss_excluded_channel_orders.setter
    def dss_excluded_channel_orders(self, value: List[int]) -> None: ...
    @property
    def dss_export_channel_ids(self) -> List[int]: ...
    @dss_export_channel_ids.setter
    def dss_export_channel_ids(self, value: List[int]) -> None: ...
    @property
    def has_dss_zip(self) -> bool: ...
    @property
    def multi_ofe(self) -> bool: ...
    @multi_ofe.setter
    def multi_ofe(self, value: bool) -> None: ...
    @property
    def wepp_bin(self) -> str | None: ...
    @wepp_bin.setter
    def wepp_bin(self, value: str) -> None: ...
    @property
    def prep_details_on_run_completion(self) -> bool: ...
    @property
    def arc_export_on_run_completion(self) -> bool: ...
    @property
    def legacy_arc_export_on_run_completion(self) -> bool: ...
    @property
    def dss_export_on_run_completion(self) -> bool: ...
    @property
    def run_tcr(self) -> bool: ...
    @property
    def run_wepp_ui(self) -> bool: ...
    @property
    def run_pmet(self) -> bool: ...
    @property
    def run_frost(self) -> bool: ...
    @property
    def run_baseflow(self) -> bool: ...
    @property
    def run_snow(self) -> bool: ...
    @property
    def channel_erodibility(self) -> float | None: ...
    @property
    def channel_critical_shear(self) -> float | None: ...
    @property
    def channel_manning_roughness_coefficient_bare(self) -> float | None: ...
    @property
    def channel_manning_roughness_coefficient_veg(self) -> float | None: ...
    @property
    def channel_2006_avke(self) -> float | None: ...
    @property
    def is_omni_contrasts_run(self) -> bool: ...
    def set_baseflow_opts(self, gwstorage: float | None = None, bfcoeff: float | None = None, dscoeff: float | None = None, bfthreshold: float | None = None) -> None: ...
    def set_phosphorus_opts(self, surf_runoff: float | None = None, lateral_flow: float | None = None, baseflow: float | None = None, sediment: float | None = None) -> None: ...
    def parse_inputs(self, kwds: Dict[str, Any]) -> None: ...
    @property
    def has_run(self) -> bool: ...
    @property
    def has_phosphorus(self) -> bool: ...
    def prep_hillslopes(self, frost: bool | None = None, baseflow: bool | None = None, wepp_ui: bool | None = None, pmet: bool | None = None, snow: bool | None = None, man_relpath: str = '', cli_relpath: str = '', slp_relpath: str = '', sol_relpath: str = '', max_workers: int | None = None) -> None: ...
    @property
    def sol_versions(self) -> Set[str]: ...
    if TYPE_CHECKING:
        pmet_kcb: float | None
    else:
        @property
        def pmet_kcb(self) -> float | None: ...
        @pmet_kcb.setter
        def pmet_kcb(self, value: float) -> None: ...
    @property
    def pmet_kcb_map(self) -> str | None: ...
    if TYPE_CHECKING:
        pmet_rawp: float | None
    else:
        @property
        def pmet_rawp(self) -> float | None: ...
        @pmet_rawp.setter
        def pmet_rawp(self, value: float) -> None: ...
    def clean(self) -> None: ...
    def prep_and_run_flowpaths(self, clean_after_run: bool = True) -> None: ...
    def run_hillslopes(self, man_relpath: str = '', cli_relpath: str = '', slp_relpath: str = '', sol_relpath: str = '', max_workers: int | None = None) -> None: ...
    def prep_watershed(self, erodibility: float | None = None, critical_shear: float | None = None, tcr: bool | None = None, avke: float | None = None, channel_manning_roughness_coefficient_bare: float | None = None, channel_manning_roughness_coefficient_veg: float | None = None) -> None: ...
    @property
    def dtchr_override(self): ...
    @dtchr_override.setter
    def dtchr_override(self, value: int): ...
    @property
    def chn_topaz_ids_of_interest(self): ...
    @chn_topaz_ids_of_interest.setter
    def chn_topaz_ids_of_interest(self, value: list[int]): ...
    def make_watershed_run(self, wepp_id_paths: Incomplete | None = None) -> None: ...
    def run_watershed(self) -> None: ...
    def post_discord_wepp_run_complete(self) -> None: ...
    def report_loss(self) -> Any: ...
    def report_return_periods(self, rec_intervals: Tuple[int, ...] = (50, 25, 20, 10, 5, 2), exclude_yr_indxs: List[int] | None = None, method: str = 'cta', gringorten_correction: bool = True, meoization: bool = True, exclude_months: List[int] | None = None, chn_topaz_id_of_interest: int | None = None) -> ReturnPeriods: ...
    def export_return_periods_tsv_summary(self, rec_intervals: Tuple[int, ...] = (50, 25, 20, 10, 5, 2), exclude_yr_indxs: List[int] | None = None, method: str = 'cta', gringorten_correction: bool = True, meoization: bool = True, extraneous: bool = False) -> None: ...
    def report_frq_flood(self) -> FrqFloodReport: ...
    def report_sediment_delivery(self) -> SedimentCharacteristics: ...
    def report_hill_watbal(self) -> HillslopeWatbalReport: ...
    def report_chn_watbal(self) -> ChannelWatbalReport: ...
    def set_run_flowpaths(self, state: bool) -> None: ...
    def set_run_wepp_ui(self, state: bool) -> None: ...
    def set_run_pmet(self, state: bool) -> None: ...
    def set_run_frost(self, state: bool) -> None: ...
    def set_run_snow(self, state: bool) -> None: ...
    def set_run_tcr(self, state: bool) -> None: ...
    def set_run_baseflow(self, state: bool) -> None: ...
    @property
    def loss_report(self) -> Any | None: ...
    def query_sub_val(self, measure: str) -> Dict[str, Dict[str, Any]] | None: ...
    def query_chn_val(self, measure: str) -> Dict[str, Dict[str, Any]] | None: ...
    def make_loss_grid(self) -> None: ...
    if TYPE_CHECKING:
        kslast: float | None
    else:
        @property
        def kslast(self) -> float | None: ...
        @kslast.setter
        def kslast(self, value: float | None) -> None: ...
    @property
    def kslast_map(self) -> str | None: ...
