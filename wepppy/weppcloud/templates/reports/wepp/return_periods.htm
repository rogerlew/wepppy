{% extends "reports/_base_report.htm" %}
{% block report_title %}Return periods{% endblock %}
{% block report_content %}
{% macro slugify_key(value) -%}
  {{ value|lower
          |replace('+', ' plus ')
          |replace('/', ' ')
          |replace('.', '')
          |replace('(', '')
          |replace(')', '')
          |replace(',', '')
          |replace('&', ' and ')
          |replace(' ', '-') }}
{%- endmacro %}

{% macro display_label(metric) -%}
  {%- set mapping = {
      'Precipitation Depth': 'Precipitation',
      'Runoff': 'Runoff',
      'Peak Discharge': 'Peak Discharge',
      '10-min Peak Rainfall Intensity': '10-min Peak Rainfall Intensity',
      '15-min Peak Rainfall Intensity': '15-min Peak Rainfall Intensity',
      '30-min Peak Rainfall Intensity': '30-min Peak Rainfall Intensity',
      'Storm Duration': 'Storm Duration',
      'Sediment Yield': 'Sediment Yield',
      'Hill Sed Del': 'Hill Sed Del',
      'Hill Streamflow': 'Hill Streamflow',
      'Soluble Reactive P': 'Soluble Reactive P',
      'Particulate P': 'Particulate P',
      'Total P': 'Total P'
    } -%}
  {{ mapping.get(metric, metric) }}
{%- endmacro %}

{% macro format_date(entry) -%}
  {%- set month = entry.mo | int -%}
  {%- set day = entry.da | int -%}
  {%- set year = entry.year | int + report.y0 - 1 -%}
  {{ "%02d/%02d/%04d"|format(month, day, year) }}
{%- endmacro %}

{% macro render_units(units) -%}
  {% if units %}
    {% if units == 'ratio' %}
      ratio
    {% else %}
      {{ unitizer_units(units) | safe }}
    {% endif %}
  {% else %}
    &nbsp;
  {% endif %}
{%- endmacro %}

{% macro render_value(value, units) -%}
  {% if value in (None, '') %}
    &mdash;
  {% elif units %}
    {{ unitizer(value, units) | safe }}
  {% else %}
    {{ value }}
  {% endif %}
{%- endmacro %}

{% macro render_extraneous_value(metric, value, units) -%}
  {% set dash_metrics = [
    'Precipitation Depth',
    '10-min Peak Rainfall Intensity',
    '15-min Peak Rainfall Intensity',
    '30-min Peak Rainfall Intensity',
    'Storm Duration',
    'Hill Sed Del',
    'Hill Streamflow'
  ] %}
  {% if value in (None, '') %}
    &mdash;
  {% elif metric in dash_metrics and (value | float) == 0.0 %}
    &mdash;
  {% else %}
    {{ render_value(value, units) }}
  {% endif %}
{%- endmacro %}

{% set extraneous_value = 'true' if extraneous else 'false' %}
{% set extraneous_toggle_value = 'false' if extraneous else 'true' %}
{% set exclude_years_param = exclude_yr_indxs|join(',') if exclude_yr_indxs else None %}
{% set exclude_months_param = exclude_months|join(',') if exclude_months else None %}

{% macro build_csv_url(slug) -%}
  {{ url_for_run('wepp.report_wepp_return_periods',
                 runid=runid,
                 config=config,
                 format='csv',
                 table=slug,
                 extraneous=extraneous_value,
                 gringorten_correction='true' if gringorten_correction else 'false',
                 method=method,
                 exclude_yr_indxs=exclude_years_param,
                 exclude_months=exclude_months_param,
                 chn_topaz_id_of_interest=chn_topaz_id_of_interest if chn_topaz_id_of_interest is not none else None) }}
{%- endmacro %}

{% macro simple_table(key) -%}
  {% set slug = slugify_key(key) %}
  {% set label = display_label(key) %}
  {% set units = report.units_d.get(key) %}
  {% set table_id = slug ~ '_tbl' %}
  {% set intervals = report.intervals | sort_numeric(reverse=True) %}
  <section class="wc-panel wc-stack">
    <header class="wc-stack">
      <h2 class="wc-heading__subtitle">{{ label }}</h2>
    </header>
    <div class="wc-table-wrapper">
      <table class="wc-table wc-table--dense sortable" id="{{ table_id }}">
        <thead>
          <tr>
            <th scope="col">Recurrence interval</th>
            <th scope="col">Date</th>
            <th scope="col">{{ label }}</th>
          </tr>
        </thead>
        <tbody>
          <tr data-sort-position="top">
            <td>years</td>
            <td>mm/dd/yyyy</td>
            <td>{{ render_units(units) }}</td>
          </tr>
          {% for rec_interval in intervals %}
            {% if rec_interval in report.return_periods[key] %}
              {% set entry = report.return_periods[key][rec_interval] %}
              <tr>
                <td>{{ rec_interval }}</td>
                <td>{{ format_date(entry) }}</td>
                <td>{{ render_value(entry.get(key), units) }}</td>
              </tr>
            {% endif %}
          {% endfor %}
        </tbody>
      </table>
    </div>
    <div class="wc-table-actions">
      <button type="button" class="pure-button pure-button-link"
              data-report-csv="{{ table_id }}"
              data-report-url="{{ build_csv_url(slug) }}"
              data-report-table="{{ slug }}">
        Download CSV
      </button>
    </div>
  </section>
{%- endmacro %}

{% macro extraneous_table(key) -%}
  {% set slug = slugify_key(key) %}
  {% set label = display_label(key) %}
  {% set table_id = slug ~ '_tbl' %}
  {% set dataset_items = report.return_periods[key].items() | list %}
  {% if dataset_items %}
    {% set sample_entry = dataset_items[0][1] %}
  {% else %}
    {% set sample_entry = {} %}
  {% endif %}
  {% set metric_order = [
    'Precipitation Depth',
    'Runoff',
    'Peak Discharge',
    '10-min Peak Rainfall Intensity',
    '15-min Peak Rainfall Intensity',
    '30-min Peak Rainfall Intensity',
    'Storm Duration',
    'Sediment Yield',
    'Hill Sed Del',
    'Hill Streamflow',
    'Soluble Reactive P',
    'Particulate P',
    'Total P'
  ] %}
  {% set ns = namespace(metrics=[]) %}
  {% for metric in metric_order %}
    {% if sample_entry.get(metric) is not none %}
      {% set _ = ns.metrics.append(metric) %}
    {% endif %}
  {% endfor %}
  {% set metrics = ns.metrics %}
  {% set show_rank = sample_entry.get('weibull_rank') is not none %}
  {% set show_weibull_t = sample_entry.get('weibull_T') is not none %}
  {% set intervals = report.intervals | sort_numeric(reverse=True) %}
  <section class="wc-panel wc-stack">
    <header class="wc-stack">
      <h2 class="wc-heading__subtitle">{{ label }}</h2>
    </header>
    <div class="wc-table-wrapper">
      <table class="wc-table wc-table--dense sortable" id="{{ table_id }}">
        <thead>
          <tr>
            <th scope="col">Recurrence interval</th>
            <th scope="col">Date</th>
            {% for metric in metrics %}
              {% set highlight = 'wc-return-period__measure' if metric == key else '' %}
              <th scope="col" class="{{ highlight }}">{{ display_label(metric) }}</th>
            {% endfor %}
            {% if show_rank %}
              <th scope="col">Rank</th>
            {% endif %}
            {% if show_weibull_t %}
              <th scope="col">Weibull T</th>
            {% endif %}
          </tr>
        </thead>
        <tbody>
          <tr data-sort-position="top">
            <td>years</td>
            <td>mm/dd/yyyy</td>
            {% for metric in metrics %}
              {% set highlight = 'wc-return-period__measure' if metric == key else '' %}
              <td class="{{ highlight }}">{{ render_units(report.units_d.get(metric)) }}</td>
            {% endfor %}
            {% if show_rank %}
              <td>&nbsp;</td>
            {% endif %}
            {% if show_weibull_t %}
              <td>&nbsp;</td>
            {% endif %}
          </tr>
          {% for rec_interval in intervals %}
            {% if rec_interval in report.return_periods[key] %}
              {% set entry = report.return_periods[key][rec_interval] %}
              <tr>
                <td>{{ rec_interval }}</td>
                <td>{{ format_date(entry) }}</td>
                {% for metric in metrics %}
                  {% set highlight = 'wc-return-period__measure' if metric == key else '' %}
                  <td class="{{ highlight }}">
                    {{ render_extraneous_value(metric, entry.get(metric), report.units_d.get(metric)) }}
                  </td>
                {% endfor %}
                {% if show_rank %}
                  <td>{{ entry.get('weibull_rank') or '&mdash;' }}</td>
                {% endif %}
                {% if show_weibull_t %}
                  <td>{{ entry.get('weibull_T') if entry.get('weibull_T') is not none else '&mdash;' }}</td>
                {% endif %}
              </tr>
            {% endif %}
          {% endfor %}
        </tbody>
      </table>
    </div>
    <div class="wc-table-actions">
      <button type="button" class="pure-button pure-button-link"
              data-report-csv="{{ table_id }}"
              data-report-url="{{ build_csv_url(slug) }}"
              data-report-table="{{ slug }}">
        Download CSV
      </button>
    </div>
  </section>
{%- endmacro %}

{% set method_label = 'Gringorten' if gringorten_correction else 'Weibull' %}

<header class="wc-stack">
  <h1 class="wc-heading__title">Return periods</h1>
  <p class="wc-text-muted">
    Frequency analysis of watershed metrics using {{ method_label }} plotting positions.
    Configure the simulation years, channel of interest, and optional exclusions below.
  </p>
</header>

<section class="wc-panel wc-stack">
  <header class="wc-stack">
    <h2 class="wc-heading__subtitle">Configuration</h2>
  </header>
  <div class="wc-stack">
    <label>
      <span class="wc-text-muted">Year selection</span>
      <select id="yearSelection">
        <option value="./?extraneous={{ extraneous_value }}"{% if report.exclude_yr_indxs is none %} selected{% endif %}>
          All years included
        </option>
        <option value="./?extraneous={{ extraneous_value }}&exclude_yr_indxs=0"{% if report.exclude_yr_indxs == [0] %} selected{% endif %}>
          Exclude first year
        </option>
        <option value="./?extraneous={{ extraneous_value }}&exclude_yr_indxs=0,1"{% if report.exclude_yr_indxs == [0, 1] %} selected{% endif %}>
          Exclude first two years
        </option>
        <option value="./?extraneous={{ extraneous_value }}&exclude_yr_indxs=0,1,2,3,4"{% if report.exclude_yr_indxs == [0, 1, 2, 3, 4] %} selected{% endif %}>
          Exclude first five years
        </option>
        {% if report.exclude_yr_indxs and report.exclude_yr_indxs not in ([], [0], [0,1], [0,1,2,3,4]) %}
        <option value="./?exclude_yr_indxs={{ report.exclude_yr_indxs|join(',') }}" selected>
          Custom: {{ report.exclude_yr_indxs|join(', ') }}
        </option>
        {% endif %}
      </select>
    </label>

    {% if chn_topaz_id_options|length > 1 %}
    <label>
      <span class="wc-text-muted">Channel of interest</span>
      <select id="chnTopazSelect">
        {% for topaz_id in chn_topaz_id_options | sort %}
          <option value="{{ topaz_id }}"{% if chn_topaz_id_of_interest == topaz_id %} selected{% endif %}>
            {% if topaz_id == 24 %}
              Outlet (24)
            {% else %}
              Channel {{ topaz_id }}
            {% endif %}
          </option>
        {% endfor %}
      </select>
    </label>
    {% endif %}

    <button type="button" class="pure-button pure-button-secondary" id="advancedOptionsToggle" data-open="false">
      Show advanced options
    </button>
  </div>

  <div class="wc-stack" id="advancedOptionsSection" hidden>
    <form id="excludeMonthsForm" class="wc-stack">
      <label class="wc-inline">
        <input type="checkbox" id="gringortenCheckbox"{% if gringorten_correction %} checked{% endif %}>
        <span>Apply Gringorten correction</span>
      </label>
      <p class="wc-text-muted">
        Uses plotting position <code>T = (N + 0.12) / (m − 0.44)</code> to bias-correct ranks and improve tail behavior.
      </p>

      <fieldset class="wc-stack">
        <legend class="wc-text-muted">Exclude months from analysis</legend>
        <div class="wc-inline" style="flex-wrap: wrap;">
          {% set months = [
            (1,'Jan'),(2,'Feb'),(3,'Mar'),(4,'Apr'),
            (5,'May'),(6,'Jun'),(7,'Jul'),(8,'Aug'),
            (9,'Sep'),(10,'Oct'),(11,'Nov'),(12,'Dec')
          ] %}
          {% for num,abbr in months %}
            <label class="wc-inline" style="gap: var(--wc-space-2xs);">
              <input type="checkbox" id="m{{ num }}" value="{{ num }}">
              <span>{{ abbr }}</span>
            </label>
          {% endfor %}
        </div>
      </fieldset>

      <div class="wc-inline" style="flex-wrap: wrap;">
        <button type="submit" class="pure-button pure-button-secondary">Run report</button>
        <button type="button" class="pure-button pure-button-link" id="clearMonths">Clear all</button>
        <button type="button" class="pure-button pure-button-link" id="selectAllMonths">Select all</button>
      </div>
    </form>
  </div>
</section>

<section class="wc-panel wc-stack">
  <header class="wc-stack">
    <h2 class="wc-heading__subtitle">{{ method_label }} plotting position</h2>
  </header>
  {% if gringorten_correction %}
    <p class="wc-text-muted">
      Return periods are estimated using the <strong>Gringorten</strong> plotting position on the annual maxima series:
      <code>T = (N + 0.12) / (m − 0.44)</code>, where <em>T</em> is the return period, <em>N</em> is the number of
      simulated daily values, and <em>m</em> is the event rank.
    </p>
  {% else %}
    <p class="wc-text-muted">
      Return periods are estimated using the <strong>Weibull</strong> plotting position on the annual maxima series:
      <code>T = (N + 1) / m</code>, where <em>T</em> is the return period, <em>N</em> is the number of simulated daily
      values, and <em>m</em> is the event rank.
    </p>
  {% endif %}
  <dl class="wc-inline" style="flex-wrap: wrap;">
    <div>
      <dt class="wc-text-muted">Years in simulation</dt>
      <dd>{{ report.years }}</dd>
    </div>
    <div>
      <dt class="wc-text-muted">Events in simulation</dt>
      <dd>{{ report.num_events }}</dd>
    </div>
  </dl>
  <p class="wc-text-muted">
    Post-disturbance runs (e.g., prescribed fire, wildfire, thinning) represent recurrences for the first year
    following the disturbance. A 20-year peak discharge of 5&nbsp;m³/s denotes a 5&nbsp;% probability that peak
    discharge meets or exceeds 5&nbsp;m³/s in any given year.
  </p>
</section>

{% if extraneous %}
  <div class="wc-status" data-state="attention">
    <strong>Note:</strong>
    Columns highlighted with <span class="wc-return-period__measure">this shading</span> show the recurrence results for
    the selected measure. Adjacent columns provide the corresponding values for each event.
  </div>
{% endif %}

<div class="wc-inline">
  <button type="button" class="pure-button pure-button-secondary" id="toggleExtraneous"
          data-target-state="{{ extraneous_toggle_value }}">
    {% if extraneous %}Hide{% else %}Show{% endif %} extraneous parameters
  </button>
</div>

{% for key in measure_order %}
  {% if key in report.return_periods %}
    {% if extraneous %}
      {{ extraneous_table(key) }}
    {% else %}
      {{ simple_table(key) }}
    {% endif %}
  {% endif %}
{% endfor %}

<section class="wc-panel wc-stack">
  <header class="wc-stack">
    <h2 class="wc-heading__subtitle">Additional resources</h2>
  </header>
  <p class="wc-text-muted">
    Culvert diameter sizing spreadsheet courtesy of William J. Elliot.
    <a href="{{ url_for('static', filename='resources/1403_Culvert_Dia_Math.xlsx') }}">Download spreadsheet (.xlsx)</a>
  </p>
</section>

<script>
  function parseExcludeMonthsFromURL() {
    const sp = new URLSearchParams(window.location.search);
    const raw = sp.get('exclude_months');
    if (!raw) return [];
    return raw.split(',').map(s => parseInt(s.trim(), 10))
      .filter(n => Number.isInteger(n) && n >= 1 && n <= 12)
      .sort((a, b) => a - b);
  }

  function parseGringortenFromURL() {
    const sp = new URLSearchParams(window.location.search);
    return (sp.get('gringorten_correction') || 'false').toLowerCase() === 'true';
  }

  function setAdvancedVisibility(showIt) {
    const section = document.getElementById('advancedOptionsSection');
    const toggle = document.getElementById('advancedOptionsToggle');
    if (!section || !toggle) return;
    if (showIt) {
      section.removeAttribute('hidden');
      toggle.dataset.open = 'true';
      toggle.textContent = 'Hide advanced options';
    } else {
      section.setAttribute('hidden', 'hidden');
      toggle.dataset.open = 'false';
      toggle.textContent = 'Show advanced options';
    }
  }

  function submitAdvancedOpts(e) {
    e.preventDefault();
    const checkedMonths = Array.from(
      document.querySelectorAll('#excludeMonthsForm input[type="checkbox"][id^="m"]:checked')
    ).map(cb => parseInt(cb.value, 10)).sort((a, b) => a - b);
    const gring = !!document.getElementById('gringortenCheckbox')?.checked;
    const yearSel = document.getElementById('yearSelection');
    const base = new URL(yearSel ? yearSel.value : window.location.pathname, window.location.href);
    const current = new URL(window.location.href);
    const params = new URLSearchParams(base.search);
    current.searchParams.forEach((v, k) => { if (!params.has(k)) params.set(k, v); });
    if (checkedMonths.length) params.set('exclude_months', checkedMonths.join(','));
    else params.delete('exclude_months');
    params.set('gringorten_correction', gring ? 'true' : 'false');
    window.location.href = current.pathname + '?' + params.toString();
    return false;
  }

  document.addEventListener('DOMContentLoaded', function () {
    const months = parseExcludeMonthsFromURL();
    const gring = parseGringortenFromURL();

    months.forEach(m => {
      const el = document.getElementById('m' + m);
      if (el) el.checked = true;
    });

    const grChk = document.getElementById('gringortenCheckbox');
    if (grChk) grChk.checked = gring;

    setAdvancedVisibility(months.length > 0 || gring);

    const form = document.getElementById('excludeMonthsForm');
    if (form) {
      const boxes = () => Array.from(form.querySelectorAll('input[type="checkbox"][id^="m"]'));
      const clearBtn = document.getElementById('clearMonths');
      const allBtn = document.getElementById('selectAllMonths');
      if (clearBtn) clearBtn.addEventListener('click', () => boxes().forEach(cb => cb.checked = false));
      if (allBtn) allBtn.addEventListener('click', () => boxes().forEach(cb => cb.checked = true));
      form.addEventListener('submit', submitAdvancedOpts);
    }

    const toggleAdvanced = document.getElementById('advancedOptionsToggle');
    if (toggleAdvanced) {
      toggleAdvanced.addEventListener('click', () => {
        const isOpen = toggleAdvanced.dataset.open === 'true';
        setAdvancedVisibility(!isOpen);
      });
    }

    const sel = document.getElementById('yearSelection');
    if (sel) {
      sel.addEventListener('change', function () {
        const target = new URL(this.value, window.location.href);
        const cur = new URL(window.location.href);
        ['gringorten_correction', 'exclude_months', 'extraneous', 'chn_topaz_id_of_interest', 'method']
          .forEach(k => {
            if (cur.searchParams.has(k)) target.searchParams.set(k, cur.searchParams.get(k));
            else target.searchParams.delete(k);
          });
        window.location.href = target.pathname + '?' + target.searchParams.toString();
      });
    }

    const chnSel = document.getElementById('chnTopazSelect');
    if (chnSel) {
      chnSel.addEventListener('change', function () {
        const url = new URL(window.location.href);
        const v = (this.value || '').trim();
        if (v) url.searchParams.set('chn_topaz_id_of_interest', v);
        else url.searchParams.delete('chn_topaz_id_of_interest');
        window.location.href = url.pathname + '?' + url.searchParams.toString();
      });
    }

    const toggleExtraneous = document.getElementById('toggleExtraneous');
    if (toggleExtraneous) {
      toggleExtraneous.addEventListener('click', function (e) {
        e.preventDefault();
        const desired = this.getAttribute('data-target-state') || 'false';
        const url = new URL(window.location.href);
        url.searchParams.set('extraneous', desired);
        window.location.href = url.pathname + '?' + url.searchParams.toString();
      });
    }
  });
</script>
{% endblock %}
