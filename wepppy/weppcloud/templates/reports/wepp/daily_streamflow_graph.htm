<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta name="description" content="">
    <meta name="author" content="">
    <title>{% block report_title %}{% endblock %}{% if ron.name != '' %} - {{ ron.name }}{% endif %}</title>
    <!-- Style Sheets -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css"
        integrity="sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2" crossorigin="anonymous">
    <link rel="stylesheet" type="text/css" href="{{ url_for('static', filename='css/style.css') }}">
    <link rel="shortcut icon" href="{{ url_for('static', filename='favicon/favicon2.ico') }}" type="image/x-icon">
    <link rel="icon" href="{{ url_for('static', filename='favicon/favicon2.ico') }}" type="image/x-icon">
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"
        integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0=" crossorigin="anonymous"></script>
    <style>
        body {
            font: 16px sans-serif;
        }

        .axis path,
        .axis line {
            fill: none;
            stroke: #000;
            shape-rendering: crispEdges;
        }

        .brush .selection {
            stroke: #fff;
            fill-opacity: .15;
            shape-rendering: crispEdges;
        }

        .brush .handle {
            fill: var(--handle-fill, #999);
            stroke: var(--handle-stroke, #515050);
            stroke-width: var(--handle-stroke-width, 1);
            opacity: var(--handle-opacity, 0.8);
            rx: 2px;
            ry: 2px;
            transition: fill 0.2s ease;
        }

        .brush .handle:hover {
            fill: var(--handle-fill-hover, #777);
        }

        .brush .handle--w,
        .brush .handle--e {
            cursor: ew-resize;
            width: var(--handle-size, 4px);
        }

        .brush .handle--n,
        .brush .handle--s {
            cursor: ns-resize;
            height: var(--handle-size, 4px);
        }

        .x.axis path {
            display: none;
        }

        .line {
            fill: none;
            stroke: steelblue;
            stroke-width: 1.5px;
            clip-path: url(#clip);
        }
    </style>
</head>

<body>
    {% include 'header.htm'%}
    <div role="main" class="container-full">
        <h2>Daily Runoff/Lateral Flow/Baseflow for {{ ron.runid }}</h2>

        <script src="https://cdn.jsdelivr.net/npm/d3@7"></script>
        <div id="area1"></div>
        <!--
                File: daily_streamflow_graph.htm
                Purpose:
                    Renders an interactive time-series visualization of daily streamflow components
                    (Runoff, Lateral Flow, Baseflow) along with precipitation bars. Provides a
                    focus+context brush for zooming and panning over time.

                Dependencies:
                    - D3.js v6+ for scales, axes, line generators, brushing, and CSV loading.

                Data Input:
                    - CSV at ../../../resources/wepp/daily_streamflow.csv
                    - Query parameters: exclude_yr_indxs, stacked
                    - CSV fields: date (YYYYMMDD), Precipitation, Runoff, Lateral Flow, Baseflow

                Main Components:
                    1. Margins & Dimensions
                         • margin, margin2: spacing for focus and context panels
                         • width, height, height2: computed from window.innerWidth/innerHeight

                    2. Scales & Axes
                         • x, xC: time scales for focus and context
                         • y, yC: linear scales for streamflow (focus/context)
                         • yP, yPC: linear scales for precipitation (focus/context)
                         • xAxis, xAxisC: bottom axes
                         • yAxis: left axis for streamflow
                         • yAxisRight: right axis for precipitation
                         • yAxisC: left axis ticks for context

                    3. SVG Structure
                         • <defs><clipPath> for clipping focus bars
                         • <g class="focus">: detailed view
                         • <g class="context">: overview + brush selector

                    4. Line & Bar Generators
                         • line, lineC: path generators for streamflow series
                         • drawBars(): daily precipitation bars in focus with tooltip
                         • drawBarsC(): precipitation bars in context

                    5. Brush Interaction
                         • d3.brushX() on context panel
                         • brushed(event): updates x.domain(), redraws lines/bars in focus

                    6. Tooltip
                         • Styled fixed-position div showing date & precipitation on hover

                Workflow:
                    a. Load CSV, parse dates, cast numeric values.
                    b. Compute domains for all scales.
                    c. Render focus panel: axes, lines, precipitation bars, labels.
                    d. Render context panel: axes, lines, bars, brush.
                    e. Initialize brush to full extent; handle brush events for zooming.

                Customization:
                    - Adjust margins or color scheme via D3 scale config.
                    - Change data filters via exclude_yr_indxs template variable.
            -->
        <script src="https://cdn.jsdelivr.net/npm/d3@7"></script>
        <div id="area1"></div>
        <script>
            /* ---------- Layout / sizing ---------- */
            const margin = { top: 10, right: 100, bottom: (window.innerHeight - 80) * 0.2, left: 40 },
                margin2 = { top: (window.innerHeight - 80) * 0.80, right: 100, bottom: 70, left: 40 },
                width = window.innerWidth * 0.95 - margin.left - margin.right,
                height = window.innerHeight * 0.95 - 80 - margin.top - margin.bottom,
                height2 = window.innerHeight * 0.95 - 80 - margin2.top - margin2.bottom;

            /* ---------- Parsers / formatters ---------- */
            const parseDate = d3.timeParse("%Y%m%d");
            const fmtDate = d3.timeFormat("%Y-%m-%d");

            /* ---------- Scales (focus + context) ---------- */
            const x = d3.scaleTime().range([0, width]);
            const xC = d3.scaleTime().range([0, width]);

            const y = d3.scaleLinear().range([height, 0]);    // streamflow (focus)
            const yC = d3.scaleLinear().range([height2, 0]);   // streamflow (context)

            const color = d3.scaleOrdinal(d3.schemeCategory10);

            /* ---------- Axes ---------- */
            const xAxis = d3.axisBottom(x);
            const xAxisC = d3.axisBottom(xC);
            const yAxis = d3.axisLeft(y);
            const yAxisC = d3.axisLeft(yC).ticks(2);

            /* ---------- Brush (on context) ---------- */
            const brush = d3.brushX()
                .extent([[0, 0], [width, height2]])
                .on("brush end", brushed);

            /* ---------- Line generators (focus/context) ---------- */
            const line = d3.line()
                .defined(d => d.datavalue !== -9999)
                .x(d => x(d.date))
                .y(d => y(d.datavalue));

            const lineC = d3.line()
                .defined(d => d.datavalue !== -9999)
                .x(d => x(d.date))
                .y(d => yC(d.datavalue));

            /* ---------- Root SVG + groups ---------- */
            const svg = d3.select("#area1").append("svg")
                .attr("width", width + margin.left + margin.right)
                .attr("height", height + margin.top + margin.bottom);

            svg.append("defs").append("clipPath")
                .attr("id", "clip")
                .append("rect")
                .attr("width", width)
                .attr("height", height);

            const focus = svg.append("g")
                .attr("class", "focus")
                .attr("transform", `translate(${margin.left},${margin.top})`);

            const context = svg.append("g")
                .attr("class", "context")
                .attr("transform", `translate(${margin2.left},${margin2.top})`);

            /* ---------- Tooltip (for precip bars) ---------- */
            const tooltip = d3.select("body")
                .append("div")
                .attr("class", "d3-tooltip")
                .style("position", "fixed")
                .style("pointer-events", "none")
                .style("padding", "4px 8px")
                .style("background", "rgba(0,0,0,0.8)")
                .style("color", "#fff")
                .style("font", "12px sans-serif")
                .style("border-radius", "3px")
                .style("opacity", 0);

            /* ---------- Globals used outside CSV scope ---------- */
            let barsG, meteo, rainMelt, drawBars, barWidth;

            /* ---------- Load & render data ---------- */
            d3.csv(
                `../../../resources/wepp/daily_streamflow.csv?exclude_yr_indxs={{ exclude_yr_indxs }}&stacked=true`,
                d => { d.date = parseDate(d.date); return d; }
            ).then(data => {

                /* ---------- In the CSV .then(...) ---------- */
                const precipKey = "Precipitation";
                const rainMeltKey = "Rain + Melt";

                // one record per day, both values
                meteo = data.map(d => ({
                    date: d.date,
                    p: +d[precipKey],
                    rm: +d[rainMeltKey]
                }));

                // scale uses the larger series (rm)
                const pMax = d3.max(meteo, d => d.rm);

                /* ----- Scales for precipitation (focus/context) ----- */
                const yP = d3.scaleLinear().range([height, 0]);     // for axis calc
                const yPC = d3.scaleLinear().range([height2, 0]);    // context bars
                const yPbar = d3.scaleLinear().domain([0, pMax]).range([0, height]); // bars grow downward
                const yPAxis = yPbar;                                                 // use same inverted range for axis
                const yAxisRight = d3.axisRight(yPAxis).ticks(3);

                /* ----- Filter which streamflow columns to plot ----- */
                const allCols = Object.keys(data[0]).filter(k => k !== "date");
                const wanted = allCols.filter(k => /^(Runoff|Lateral Flow|Baseflow)$/i.test(k));

                color.domain(wanted);

                const sites = wanted.map(name => ({
                    name,
                    values: data.map(d => ({ date: d.date, datavalue: +d[name] }))
                }));

                /* ----- Set domains ----- */
                x.domain(d3.extent(data, d => d.date));
                xC.domain(x.domain());

                const yMin = d3.min(sites, c => d3.min(c.values, v => v.datavalue >= 0 ? v.datavalue : 0));
                const yMax = d3.max(sites, c => d3.max(c.values, v => v.datavalue));
                y.domain([yMin, yMax]);
                yC.domain(y.domain());

                yP.domain([0, pMax]);
                yPC.domain(yP.domain());

                /* ----- Axes (focus) ----- */
                focus.append("g")
                    .attr("class", "x axis")
                    .attr("transform", `translate(0,${height})`)
                    .call(xAxis);

                focus.append("g")
                    .attr("class", "y axis")
                    .call(yAxis)
                    .append("text")
                    .attr("transform", "rotate(-90)")
                    .attr("y", 6)
                    .attr("dy", ".71em")
                    .style("text-anchor", "end")
                    .text("Streamflow (mm)");

                // right-side precip axis
                focus.append("g")
                    .attr("class", "y axis precip-axis")
                    .attr("transform", `translate(${width},0)`)
                    .call(yAxisRight)
                    .append("text")
                    .attr("transform", "rotate(-90)")
                    .attr("y", -12)
                    .attr("dy", ".71em")
                    .style("text-anchor", "end")
                    .text("Precip (mm)");

                /* ----- Streamflow lines (focus) ----- */
                const site = focus.selectAll(".site")
                    .data(sites)
                    .enter().append("g")
                    .attr("class", "site");

                site.append("path")
                    .attr("class", "line")
                    .attr("d", d => line(d.values))
                    .style("stroke", d => color(d.name));

                // right-anchored text labels for each line (focus)
                let c = 0;
                site.append("text")
                    .datum(d => ({ name: d.name, value: d.values[d.values.length - 1] }))
                    .attr("transform", d => {
                        c += 1;
                        return `translate(${x(d.value.date)},${y(d.value.datavalue) - c * 20})`;
                    })
                    .attr("x", 3)
                    .attr("dy", ".35em")
                    .style("stroke", d => color(d.name))
                    .text(d => d.name);

                /* ----- Precip bars (focus) ----- */
                barsG = focus.append("g")
                    .attr("class", "precip")
                    .attr("clip-path", "url(#clip)");

                barWidth = function () {
                    // width based on first two dates; adjust on zoom
                    const px = data.length > 1 ? x(data[1].date) - x(data[0].date) : 2;
                    return Math.max(1, px * 0.8);
                };

                drawBars = function () {
                    const w = barWidth();

                    const bars = barsG.selectAll("rect")
                        .data(meteo, d => d.date);

                    bars.join(
                        enter => enter.append("rect")
                            .attr("x", d => x(d.date) - w / 2)
                            .attr("y", 0)
                            .attr("width", w)
                            .attr("height", d => yPbar(d.rm))                       // height from rain+melt
                            .attr("fill", d => d.rm > d.p ? "#ff69b4" : "#1f77b4")   // pink if rm > precip
                            .attr("opacity", 0.35)
                            .on("mouseenter", function (event, d) {
                                d3.select(this).attr("opacity", 0.8);
                                tooltip.style("opacity", 1)
                                    .html(`${fmtDate(d.date)}<br>`
                                        + `Precip: ${d.p.toFixed(2)} mm<br>`
                                        + `Rain+Melt: ${d.rm.toFixed(2)} mm`);
                            })
                            .on("mousemove", function (event) {
                                tooltip.style("left", (event.clientX + 12) + "px")
                                    .style("top", (event.clientY - 28) + "px");
                            })
                            .on("mouseleave", function () {
                                d3.select(this).attr("opacity", 0.35);
                                tooltip.style("opacity", 0);
                            }),
                        update => update
                            .attr("x", d => x(d.date) - w / 2)
                            .attr("width", w)
                            .attr("height", d => yPbar(d.rm))
                            .attr("fill", d => d.rm > d.p ? "#ff69b4" : "#1f77b4"),
                        exit => exit.remove()
                    );
                };

                drawBars();

                /* ----- Context panel (axes, lines, bars, brush) ----- */
                context.append("g")
                    .attr("class", "x axis")
                    .attr("transform", `translate(0,${height2})`)
                    .call(xAxisC);

                context.append("g")
                    .attr("class", "y axis")
                    .call(yAxisC);

                const siteC = context.selectAll(".site")
                    .data(sites)
                    .enter().append("g")
                    .attr("class", "site");

                siteC.append("path")
                    .attr("class", "line")
                    .attr("d", d => lineC(d.values))
                    .style("stroke", d => color(d.name));

                // context precip bars (no tooltip)
                const barsGC = context.append("g").attr("class", "precipC");

                function drawBarsC() {
                    const w = barWidth();
                    barsGC.selectAll("rect")
                        .data(meteo)
                        .join("rect")
                        .attr("x", d => xC(d.date) - w / 2)
                        .attr("y", 0)
                        .attr("width", w)
                        .attr("height", d => height2 - yPC(d.rm))
                        .attr("fill", d => d.rm > d.p ? "#ff69b4" : "#1f77b4")
                        .attr("opacity", 0.25);
                }
                drawBarsC();


                // brush group (+ initial full-range selection)
                context.append("g")
                    .attr("class", "x brush")
                    .call(brush)
                    .call(brush.move, x.range())
                    .selectAll(".handle")
                    .attr("display", null);

                // x-axis label under context
                context.append("text")
                    .attr("class", "y axis")
                    .attr("transform", `translate(${width / 2},${height2 + margin2.bottom})`)
                    .style("text-anchor", "middle")
                    .text("Date");
            });

            /* ---------- Brush handler (updates focus view) ---------- */
            function brushed(event) {
                const sel = event.selection;
                x.domain(sel ? sel.map(xC.invert) : xC.domain());

                focus.selectAll('.line').attr("d", d => line(d.values));
                focus.select(".x.axis").call(xAxis);

                redrawBars();
            }


            /* ---------- Helper: update bar positions/widths on zoom ---------- */
            function redrawBars() {
                const w = barWidth();
                barsG.selectAll("rect")
                    .attr("x", d => x(d.date) - w / 2)
                    .attr("width", w);
            }
            // add rain + snowmelt as pink
            // stack baseflow (dark blue), lateral flow (green), runoff (red or orange)
            // show tooltip values for basefloow, lateral flow, and runoff
        </script>
        {% include 'controls/unitizer_modal.htm'%}
        {% include 'controls/poweruser_panel.htm'%}
    </div>

    <!-- Placed at the end of the document so the pages load faster -->
    <script type="text/javascript" src="{{ url_for('static', filename='js/tinyqueue.js') }}"></script>
    <script type="text/javascript" src="{{ url_for('static', filename='js/polylabel.js') }}"></script>
    <script type="text/javascript" src="{{ url_for('static', filename='js/underscore.js') }}"></script>
    <script type="text/javascript" src="{{ url_for('static', filename='js/copytext.js') }}?20180904"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-ho+j7jyWK8fNQe+A12Hb8AhRq26LrZ/JpcUGGOn+Y7RsweNrtN/tE3MoK7ZeZDyx"
        crossorigin="anonymous"></script>
    <script type="text/javascript" src="{{ url_for('static', filename='js/mousetrap.js') }}"></script>
</body>

</html>