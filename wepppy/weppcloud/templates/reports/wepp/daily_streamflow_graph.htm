<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta name="description" content="">
    <meta name="author" content="">
    <title>{% block report_title %}{% endblock %}{% if ron.name != '' %} - {{ ron.name }}{% endif %}</title>
    <!-- Style Sheets -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css"
        integrity="sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2" crossorigin="anonymous">
    <link rel="stylesheet" type="text/css" href="{{ url_for('static', filename='css/style.css') }}">
    <link rel="shortcut icon" href="{{ url_for('static', filename='favicon/favicon2.ico') }}" type="image/x-icon">
    <link rel="icon" href="{{ url_for('static', filename='favicon/favicon2.ico') }}" type="image/x-icon">
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"
        integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0=" crossorigin="anonymous"></script>
    <style>
        body {
            font: 16px sans-serif;
        }

        .axis path,
        .axis line {
            fill: none;
            stroke: #000;
            shape-rendering: crispEdges;
        }

        .brush .selection {
            stroke: #fff;
            fill-opacity: .15;
            shape-rendering: crispEdges;
        }

        .brush .handle {
            fill: var(--handle-fill, #999);
            stroke: var(--handle-stroke, #515050);
            stroke-width: var(--handle-stroke-width, 1);
            opacity: var(--handle-opacity, 0.8);
            rx: 2px;
            ry: 2px;
            transition: fill 0.2s ease;
        }

        .brush .handle:hover {
            fill: var(--handle-fill-hover, #777);
        }

        .brush .handle--w,
        .brush .handle--e {
            cursor: ew-resize;
            width: var(--handle-size, 4px);
        }

        .brush .handle--n,
        .brush .handle--s {
            cursor: ns-resize;
            height: var(--handle-size, 4px);
        }

        .x.axis path {
            display: none;
        }

        .line {
            fill: none;
            stroke: steelblue;
            stroke-width: 1.5px;
            clip-path: url(#clip);
        }

        .hover-line {
            pointer-events: none;
            stroke-dasharray: 3 3;
        }

        #legend svg {
            overflow: visible;
        }
    </style>
</head>

<body>
    {% include 'header.htm'%}
    <div role="main" class="container-full">
        <h2>Daily Runoff/Lateral Flow/Baseflow for {{ ron.runid }}</h2>

        <script src="https://cdn.jsdelivr.net/npm/d3@7"></script>
        <label style="margin-left:8px;">
            <input type="checkbox" id="toggleBars" checked>
            Show Rain+Melt / Precip bars
        </label>
        <div id="area1"></div>
        <div id="legend"></div>

        <!--
                File: daily_streamflow_graph.htm
                Purpose:
                    Renders an interactive time-series visualization of daily streamflow components
                    (Runoff, Lateral Flow, Baseflow) along with precipitation bars. Provides a
                    focus+context brush for zooming and panning over time.

                Dependencies:
                    - D3.js v6+ for scales, axes, line generators, brushing, and CSV loading.

                Data Input:
                    - CSV at ../../../resources/wepp/daily_streamflow.csv
                    - Query parameters: exclude_yr_indxs, stacked
                    - CSV fields: date (YYYYMMDD), Precipitation, Runoff, Lateral Flow, Baseflow

                Main Components:
                    1. Margins & Dimensions
                         • margin, margin2: spacing for focus and context panels
                         • width, height, height2: computed from window.innerWidth/innerHeight

                    2. Scales & Axes
                         • x, xC: time scales for focus and context
                         • y, yC: linear scales for streamflow (focus/context)
                         • yP, yPC: linear scales for precipitation (focus/context)
                         • xAxis, xAxisC: bottom axes
                         • yAxis: left axis for streamflow
                         • yAxisRight: right axis for precipitation
                         • yAxisC: left axis ticks for context

                    3. SVG Structure
                         • <defs><clipPath> for clipping focus bars
                         • <g class="focus">: detailed view
                         • <g class="context">: overview + brush selector

                    4. Line & Bar Generators
                         • line, lineC: path generators for streamflow series
                         • drawBars(): daily precipitation bars in focus with tooltip
                         • drawBarsC(): precipitation bars in context

                    5. Brush Interaction
                         • d3.brushX() on context panel
                         • brushed(event): updates x.domain(), redraws lines/bars in focus

                    6. Tooltip
                         • Styled fixed-position div showing date & precipitation on hover

                Workflow:
                    a. Load CSV, parse dates, cast numeric values.
                    b. Compute domains for all scales.
                    c. Render focus panel: axes, lines, precipitation bars, labels.
                    d. Render context panel: axes, lines, bars, brush.
                    e. Initialize brush to full extent; handle brush events for zooming.

                Customization:
                    - Adjust margins or color scheme via D3 scale config.
                    - Change data filters via exclude_yr_indxs template variable.
            -->
        <script src="https://cdn.jsdelivr.net/npm/d3@7"></script>
        <script>
            /* ===== Layout / sizes ===== */
            const margin = { top: 10, right: 100, bottom: (window.innerHeight - 80) * 0.2, left: 40 },
                margin2 = { top: (window.innerHeight - 80) * 0.80, right: 100, bottom: 70, left: 40 },
                width = window.innerWidth * 0.95 - margin.left - margin.right,
                height = window.innerHeight * 0.95 - 80 - margin.top - margin.bottom,
                height2 = window.innerHeight * 0.95 - 80 - margin2.top - margin2.bottom;

            /* ===== Parsers / formatters ===== */
            const parseDate = d3.timeParse("%Y%m%d");
            const fmtDate = d3.timeFormat("%Y-%m-%d");

            /* ===== Scales ===== */
            const x = d3.scaleTime().range([0, width]);
            const xC = d3.scaleTime().range([0, width]);
            const y = d3.scaleLinear().range([height, 0]);    // stacked flows (focus)
            const yC = d3.scaleLinear().range([height2, 0]);   // stacked flows (context)

            /* ===== Axes ===== */
            const xAxis = d3.axisBottom(x);
            const xAxisC = d3.axisBottom(xC);
            const yAxis = d3.axisLeft(y);
            const yAxisC = d3.axisLeft(yC).ticks(2);

            /* ===== Brush on context ===== */
            const brush = d3.brushX()
                .extent([[0, 0], [width, height2]])
                .on("brush end", brushed);

            /* ===== SVG skeleton ===== */
            const svg = d3.select("#area1").append("svg")
                .attr("width", width + margin.left + margin.right)
                .attr("height", height + margin.top + margin.bottom);

            svg.append("defs").append("clipPath")
                .attr("id", "clip")
                .append("rect")
                .attr("width", width)
                .attr("height", height);

            const focus = svg.append("g")
                .attr("class", "focus")
                .attr("transform", `translate(${margin.left},${margin.top})`);

            const context = svg.append("g")
                .attr("class", "context")
                .attr("transform", `translate(${margin2.left},${margin2.top})`);

            /* ===== Tooltip for precip bars ===== */
            const tooltip = d3.select("body")
                .append("div")
                .attr("class", "d3-tooltip")
                .style("position", "fixed")
                .style("pointer-events", "none")
                .style("padding", "4px 8px")
                .style("background", "rgba(0,0,0,0.8)")
                .style("color", "#fff")
                .style("font", "12px sans-serif")
                .style("border-radius", "3px")
                .style("opacity", 0);

            /* ===== Globals needed outside the .then() ===== */
            let barsG, barWidth, redrawBars;
            let flowsG, area;   // stacked areas (focus)
            let meteo;          // precip + rain/melt array
            let flowRows, bisectDate, hoverLine, hoverCapture, showHover; // for future hover functionality
            let precipAxisG, barsGC;

            const flowColors = {
                "Baseflow": "#1e90ff",    // Dodger Blue
                "Lateral Flow": "#32cd32", // Lime Green
                "Runoff": "#ff6347"       // Tomato
            };

            /* ===== Load data ===== */
            d3.csv(
                `../../../resources/wepp/daily_streamflow.csv?exclude_yr_indxs={{ exclude_yr_indxs }}&stacked=true`,
                d => { d.date = parseDate(d.date); return d; }
            ).then(data => {

                /* --- Keys / colors for stacked hydrograph (bottom→top) --- */
                const flowKeys = ["Baseflow", "Lateral Flow", "Runoff"];


                /* --- Build tidy array for flows --- */
                flowRows = data.map(d => ({
                    date: d.date,
                    "Precipitation": +d["Precipitation"],
                    "Rain + Melt": +d["Rain + Melt"],
                    "Baseflow": +d["Baseflow"],
                    "Lateral Flow": +d["Lateral Flow"],
                    "Runoff": +d["Runoff"]
                }));
                bisectDate = d3.bisector(d => d.date).left;
                function moved(event) {
                    const [mx] = d3.pointer(event, this);
                    const date = x.invert(mx);
                    let i = bisectDate(flowRows, date);
                    if (i >= flowRows.length) i = flowRows.length - 1;
                    const d0 = flowRows[Math.max(i - 1, 0)];
                    const d1 = flowRows[i];
                    // choose closer
                    const d = (!d1 || (date - d0.date) < (d1.date - date)) ? d0 : d1;

                    // position rule
                    const xPos = x(d.date);
                    hoverLine
                        .attr("x1", xPos)
                        .attr("x2", xPos)
                        .style("opacity", 1);

                    // show tooltip
                    tooltip
                        .style("opacity", 1)
                        .html(`${fmtDate(d.date)}<br>
                                Precipitation: ${d["Precipitation"].toFixed(2)} mm<br>
                                Rain + Melt: ${d["Precipitation"].toFixed(2)} mm<br>
                                Runoff: ${d["Runoff"].toFixed(2)} mm<br>
                                Lateral Flow: ${d["Lateral Flow"].toFixed(2)} mm<br>
                                Baseflow: ${d["Baseflow"].toFixed(2)} mm`);

                    // place tooltip near cursor
                    tooltip
                        .style("left", (event.clientX + 12) + "px")
                        .style("top", (event.clientY - 28) + "px");
                }

                function left() {
                    hoverLine.style("opacity", 0);
                    tooltip.style("opacity", 0);
                }
                /* --- Precip / Rain+Melt arrays --- */
                const precipKey = "Precipitation";
                const rainMeltKey = "Rain + Melt";
                meteo = data.map(d => ({
                    date: d.date,
                    p: +d[precipKey],
                    rm: +d[rainMeltKey]
                }));

                const pMax = d3.max(meteo, d => d.rm);

                /* --- Scales for precip --- */
                const yP = d3.scaleLinear().range([height, 0]);      // (only for completeness)
                const yPC = d3.scaleLinear().range([height2, 0]);
                const yPbar = d3.scaleLinear().domain([0, pMax]).range([0, height]);  // bars downward
                const yAxisRight = d3.axisRight(yPbar).ticks(3);
                yP.domain([0, pMax]);
                yPC.domain(yP.domain());

                /* --- Stack generator --- */
                const stack = d3.stack()
                    .keys(flowKeys)
                    .order(d3.stackOrderNone)
                    .offset(d3.stackOffsetNone);

                const stacked = stack(flowRows);  // array of layers

                /* --- Domains for x & y using stacked total --- */
                x.domain(d3.extent(data, d => d.date));
                xC.domain(x.domain());

                const yMaxStack = d3.max(stacked[stacked.length - 1], d => d[1]);
                y.domain([0, yMaxStack]);
                yC.domain(y.domain());

                /* --- Axes (focus) --- */
                focus.append("g")
                    .attr("class", "x axis")
                    .attr("transform", `translate(0,${height})`)
                    .call(xAxis);

                focus.append("g")
                    .attr("class", "y axis")
                    .call(yAxis)
                    .append("text")
                    .attr("transform", "rotate(-90)")
                    .attr("y", 6).attr("dy", ".71em")
                    .style("text-anchor", "end")
                    .text("Streamflow (mm)");

                // right precip axis
                precipAxisG = focus.append("g")
                    .attr("class", "y axis precip-axis")
                    .attr("transform", `translate(${width},0)`)
                    .call(yAxisRight);

                precipAxisG.append("text")
                    .attr("transform", "rotate(-90)")
                    .attr("y", -12).attr("dy", ".71em")
                    .style("text-anchor", "end")
                    .text("Precip / Rain+Melt (mm)");

                /* --- Area generators --- */
                area = d3.area()
                    .x(d => x(d.data.date))
                    .y0(d => y(d[0]))
                    .y1(d => y(d[1]));

                const areaC = d3.area()
                    .x(d => xC(d.data.date))
                    .y0(d => yC(d[0]))
                    .y1(d => yC(d[1]));

                /* --- Draw stacked areas (focus) --- */
                flowsG = focus.append("g").attr("class", "flows").attr("clip-path", "url(#clip)");
                flowsG.selectAll("path")
                    .data(stacked)
                    .enter().append("path")
                    .attr("class", "flow-area")
                    .attr("fill", d => flowColors[d.key])
                    .attr("opacity", 0.6)
                    .attr("d", area);


                // vertical hover line
                hoverLine = focus.append("line")
                    .attr("class", "hover-line")
                    .attr("y1", 0)
                    .attr("y2", height)
                    .style("stroke", "#333")
                    .style("stroke-width", 1)
                    .style("pointer-events", "none")
                    .style("opacity", 0);

                // transparent capture rect on top of everything
                hoverCapture = focus.append("rect")
                    .attr("class", "hover-capture")
                    .attr("width", width)
                    .attr("height", height)
                    .style("fill", "none")
                    .style("pointer-events", "all")
                    .on("mousemove", moved)
                    .on("mouseleave", left);


                /* --- Precip / Rain+Melt bars (focus) --- */
                barsG = focus.append("g")
                    .attr("class", "precip")
                    .attr("clip-path", "url(#clip)");

                barWidth = function () {
                    const px = data.length > 1 ? x(data[1].date) - x(data[0].date) : 2;
                    return Math.max(1, px * 0.8);
                };

                function drawBars() {
                    const w = barWidth();

                    const bars = barsG.selectAll("rect")
                        .data(meteo, d => d.date);

                    bars.join(
                        enter => enter.append("rect")
                            .attr("x", d => x(d.date) - w / 2)
                            .attr("y", 0)
                            .attr("width", w)
                            .attr("height", d => yPbar(d.rm))
                            .attr("fill", d => d.rm > d.p ? "#ff69b4" : "#1f77b4")
                            .attr("opacity", 0.35)
                            .on("mouseenter", function (event, d) {
                                d3.select(this).attr("opacity", 0.8);
                                tooltip.style("opacity", 1)
                                    .html(`${fmtDate(d.date)}<br>`
                                        + `Precip: ${d.p.toFixed(2)} mm<br>`
                                        + `Rain+Melt: ${d.rm.toFixed(2)} mm`);
                            })
                            .on("mousemove", function (event) {
                                tooltip.style("left", (event.clientX + 12) + "px")
                                    .style("top", (event.clientY - 28) + "px");
                            })
                            .on("mouseleave", function () {
                                d3.select(this).attr("opacity", 0.35);
                                tooltip.style("opacity", 0);
                            }),
                        update => update
                            .attr("x", d => x(d.date) - w / 2)
                            .attr("width", w)
                            .attr("height", d => yPbar(d.rm))
                            .attr("fill", d => d.rm > d.p ? "#ff69b4" : "#1f77b4"),
                        exit => exit.remove()
                    );
                }
                drawBars();

                /* --- Context panel: axes --- */
                context.append("g")
                    .attr("class", "x axis")
                    .attr("transform", `translate(0,${height2})`)
                    .call(xAxisC);

                context.append("g")
                    .attr("class", "y axis")
                    .call(yAxisC);

                /* --- Context stacked areas --- */
                const flowsGC = context.append("g").attr("class", "flowsC");
                flowsGC.selectAll("path")
                    .data(stacked)
                    .enter().append("path")
                    .attr("fill", d => flowColors[d.key])
                    .attr("d", areaC)
                    .attr("opacity", 0.7);

                /* --- Context precip bars (no tooltip) --- */
                barsGC = context.append("g").attr("class", "precipC");
                function drawBarsC() {
                    const w = barWidth();
                    barsGC.selectAll("rect")
                        .data(meteo)
                        .join("rect")
                        .attr("x", d => xC(d.date) - w / 2)
                        .attr("y", 0)
                        .attr("width", w)
                        .attr("height", d => height2 - yPC(d.rm))
                        .attr("fill", d => d.rm > d.p ? "#ff69b4" : "#1f77b4")
                        .attr("opacity", 0.25);
                }
                drawBarsC();

                /* --- Brush group --- */
                context.append("g")
                    .attr("class", "x brush")
                    .call(brush)
                    .call(brush.move, x.range())
                    .selectAll(".handle")
                    .attr("display", null);

                /* --- Context x label --- */
                context.append("text")
                    .attr("class", "y axis")
                    .attr("transform", `translate(${width / 2},${height2 + margin2.bottom})`)
                    .style("text-anchor", "middle")
                    .text("Date");
            });

            /* ===== Brush handler ===== */
            function brushed(event) {
                const sel = event.selection;
                x.domain(sel ? sel.map(xC.invert) : xC.domain());

                // update axes
                focus.select(".x.axis").call(xAxis);

                // update stacked areas
                flowsG.selectAll("path").attr("d", area);

                // keep hover line in sync if visible
                hoverLine && hoverLine.style("opacity", 0); // optional hide

                // update precip bars
                redrawBars();
            }

            /* ===== Reposition bars on zoom ===== */
            redrawBars = function () {
                const w = barWidth();
                barsG.selectAll("rect")
                    .attr("x", d => x(d.date) - w / 2)
                    .attr("width", w);
            };

            /* ===== Legend ===== */
            buildLegend();

            function buildLegend() {
                // Include bar colors too, if you want them in the legend
                const legendData = [
                    { label: "Runoff (mm)", color: flowColors["Runoff"], type: "area" },
                    { label: "Lateral Flow (mm)", color: flowColors["Lateral Flow"], type: "area" },
                    { label: "Baseflow (mm)", color: flowColors["Baseflow"], type: "area" },
                    { label: "Rain+Melt (mm)", color: "#ff69b4", type: "bar" },
                    { label: "Precip (mm)", color: "#1f77b4", type: "bar" }
                ];

                const itemH = 18, itemW = 18, gap = 6;

                const svgLeg = d3.select("#legend").append("svg")
                    .attr("height", legendData.length * (itemH + gap))
                    .attr("width", 240);  // tweak as needed

                const g = svgLeg.selectAll("g.legend-item")
                    .data(legendData)
                    .enter().append("g")
                    .attr("class", "legend-item")
                    .attr("transform", (d, i) => `translate(0,${i * (itemH + gap)})`);

                g.append("rect")
                    .attr("width", itemW)
                    .attr("height", itemH)
                    .attr("rx", 2).attr("ry", 2)
                    .attr("fill", d => d.color)
                    .attr("fill-opacity", d => d.type === "area" ? 0.6 : 0.35)
                    .attr("stroke", "#444");

                g.append("text")
                    .attr("x", itemW + 8)
                    .attr("y", itemH / 2)
                    .attr("dy", "0.35em")
                    .style("font", "12px sans-serif")
                    .text(d => d.label);
            }

            /* ===== Toggle Bars ===== */
            d3.select("#toggleBars").on("change", function () {
                const show = this.checked;
                barsG.style("display", show ? null : "none");
                barsGC.style("display", show ? null : "none");
                d3.select(precipAxisG).style("display", show ? null : "none");
            });
        </script>
        {% include 'controls/unitizer_modal.htm'%}
        {% include 'controls/poweruser_panel.htm'%}
    </div>

    <!-- Placed at the end of the document so the pages load faster -->
    <script type="text/javascript" src="{{ url_for('static', filename='js/tinyqueue.js') }}"></script>
    <script type="text/javascript" src="{{ url_for('static', filename='js/polylabel.js') }}"></script>
    <script type="text/javascript" src="{{ url_for('static', filename='js/underscore.js') }}"></script>
    <script type="text/javascript" src="{{ url_for('static', filename='js/copytext.js') }}?20180904"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-ho+j7jyWK8fNQe+A12Hb8AhRq26LrZ/JpcUGGOn+Y7RsweNrtN/tE3MoK7ZeZDyx"
        crossorigin="anonymous"></script>
    <script type="text/javascript" src="{{ url_for('static', filename='js/mousetrap.js') }}"></script>
</body>

</html>