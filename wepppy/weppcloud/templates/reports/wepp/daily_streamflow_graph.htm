<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta name="description" content="">
    <meta name="author" content="">
    <title>{% block report_title %}{% endblock %}{% if ron.name != '' %} - {{ ron.name }}{% endif %}</title>
    <!-- Style Sheets -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css"
        integrity="sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2" crossorigin="anonymous">
    <link rel="stylesheet" type="text/css" href="{{ url_for('static', filename='css/style.css') }}">
    <link rel="shortcut icon" href="{{ url_for('static', filename='favicon/favicon2.ico') }}" type="image/x-icon">
    <link rel="icon" href="{{ url_for('static', filename='favicon/favicon2.ico') }}" type="image/x-icon">
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"
        integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0=" crossorigin="anonymous"></script>
    <script type="text/javascript" src="{{ url_for('static', filename='js/d3.js') }}"></script>
    <style>
        body {
            font: 16px sans-serif;
        }

        .axis path,
        .axis line {
            fill: none;
            stroke: #000;
            shape-rendering: crispEdges;
        }

        .brush .selection {
            stroke: #fff;
            fill-opacity: .15;
            shape-rendering: crispEdges;
        }

        .brush .handle {
            fill: var(--handle-fill, #999);
            stroke: var(--handle-stroke, #515050);
            stroke-width: var(--handle-stroke-width, 1);
            opacity: var(--handle-opacity, 0.8);
            rx: 2px;
            ry: 2px;
            transition: fill 0.2s ease;
        }

        .brush .handle:hover {
            fill: var(--handle-fill-hover, #777);
        }

        .brush .handle--w,
        .brush .handle--e {
            cursor: ew-resize;
            width: var(--handle-size, 4px);
        }

        .brush .handle--n,
        .brush .handle--s {
            cursor: ns-resize;
            height: var(--handle-size, 4px);
        }

        .x.axis path {
            display: none;
        }

        .line {
            fill: none;
            stroke: steelblue;
            stroke-width: 1.5px;
            clip-path: url(#clip);
        }

        .hover-line {
            pointer-events: none;
            stroke-dasharray: 3 3;
        }

        /* horizontal legend */
        .legend-horizontal {
            display: flex;
            flex-wrap: wrap;
            align-items: center;
            gap: 12px;
            margin-bottom: 6px;
            font: 12px sans-serif;
        }

        .legend-item {
            display: flex;
            align-items: center;
            user-select: none;
        }

        .legend-swatch-group {
            display: inline-flex;
            margin: 0 4px 0 4px;
            /* space before/after the squares */
        }

        .legend-swatch {
            width: 16px;
            height: 12px;
            border: 1px solid #444;
            border-radius: 2px;
            margin-right: 2px;
        }

        svg,
        .focus,
        .context,
        body {
            user-select: none;
        }
    </style>
</head>

<body>
    {% include 'header.htm'%}
    <div role="main" class="container-full">
        <h2>Daily Runoff/Lateral Flow/Baseflow for {{ ron.runid }}</h2>


        <div id="legend" class="legend-horizontal"></div>
        <div id="area1"></div>

        <script>
            /* ===== Layout / sizes ===== */
            const margin = { top: 10, right: 100, bottom: (window.innerHeight - 80) * 0.2, left: 40 },
                margin2 = { top: (window.innerHeight - 80) * 0.80, right: 100, bottom: 70, left: 40 },
                width = window.innerWidth * 0.95 - margin.left - margin.right,
                height = window.innerHeight * 0.95 - 80 - margin.top - margin.bottom,
                height2 = window.innerHeight * 0.95 - 80 - margin2.top - margin2.bottom;

            /* ===== Parsers / formatters ===== */
            const parseDate = d3.timeParse("%Y%m%d");
            const fmtDate = d3.timeFormat("%Y-%m-%d");

            /* ===== Scales ===== */
            const x = d3.scaleTime().range([0, width]);
            const xC = d3.scaleTime().range([0, width]);
            const y = d3.scaleLinear().range([height, 0]);
            const yC = d3.scaleLinear().range([height2, 0]);

            /* ===== Axes ===== */
            const yTick = d => `${d} mm`;  // add units on ticks
            const xAxis = d3.axisBottom(x);
            const xAxisC = d3.axisBottom(xC);
            const yAxis = d3.axisLeft(y).tickFormat(yTick);
            const yAxisC = d3.axisLeft(yC).ticks(2).tickFormat(yTick);

            /* ===== Brush ===== */
            const brush = d3.brushX()
                .extent([[0, 0], [width, height2]])
                .on("brush end", brushed);

            /* ===== SVG skeleton ===== */
            const svg = d3.select("#area1").append("svg")
                .attr("width", width + margin.left + margin.right)
                .attr("height", height + margin.top + margin.bottom);

            svg.append("defs").append("clipPath")
                .attr("id", "clip")
                .append("rect")
                .attr("x", margin.left)
                .attr("y", margin.top)
                .attr("width", width)
                .attr("height", height);

            const focus = svg.append("g")
                .attr("class", "focus")
                .attr("transform", `translate(${margin.left},${margin.top})`);

            const context = svg.append("g")
                .attr("class", "context")
                .attr("transform", `translate(${margin2.left},${margin2.top})`);

            /* ===== Tooltip ===== */
            const tooltip = d3.select("body")
                .append("div")
                .attr("class", "d3-tooltip")
                .style("position", "fixed")
                .style("pointer-events", "none")
                .style("padding", "4px 8px")
                .style("background", "rgba(0,0,0,0.8)")
                .style("color", "#fff")
                .style("font", "12px sans-serif")
                .style("border-radius", "3px")
                .style("opacity", 0);

            /* ===== Globals ===== */
            let flowsG, barsG, barsGC, hoverLine, redrawBars, redrawAreas, legendOverlay;
            const flowColors = {
                "Baseflow": "#1e90ff",
                "Lateral Flow": "#32cd32",
                "Runoff": "#FF3B30"
            };
            const meteoColors = {
                "Precipitation": "#FF6F30",
                "Rain + Melt": "#00B2A9"
            };

            /* ===== Load data ===== */
            d3.csv("../../../resources/wepp/daily_streamflow.csv?exclude_yr_indxs={{ exclude_yr_indxs }}",
                d => { d.date = parseDate(d.date); return d; }
            ).then(data => {

                /* --- Keys / tidy rows --- */
                const flowKeys = ["Runoff", "Lateral Flow", "Baseflow"];   // backâ†’front order
                const rows = data.map(d => ({
                    date: d.date,
                    "Precipitation": +d["Precipitation"],
                    "Rain + Melt": +d["Rain + Melt"],
                    "Baseflow": +d["Baseflow"],
                    "Lateral Flow": +d["Lateral Flow"],
                    "Runoff": +d["Runoff"]
                }));

                /* --- Domains --- */
                x.domain(d3.extent(rows, d => d.date));
                xC.domain(x.domain());

                const yMax = d3.max(rows, d => d3.max(flowKeys, k => d[k]));
                y.domain([0, yMax]);
                yC.domain(y.domain());

                /* --- Meteo for bars --- */
                const meteo = rows.map(d => ({ date: d.date, p: d["Precipitation"], rm: d["Rain + Melt"] }));
                const pMax = d3.max(meteo, d => d.rm);

                // Note: this right-side scale is pixel-height oriented as in your original code.
                const yPbar = d3.scaleLinear().domain([0, pMax]).range([0, height]);
                const yPC = d3.scaleLinear().domain([0, pMax]).range([height2, 0]);
                const yAxisRight = d3.axisRight(yPbar).ticks(3).tickFormat(yTick); // add units on ticks

                /* --- Axes (focus) --- */
                focus.append("g")
                    .attr("class", "x axis")
                    .attr("transform", `translate(0,${height})`)
                    .call(xAxis);

                focus.append("g")
                    .attr("class", "y axis")
                    .call(yAxis)
                    .append("text")
                    .attr("transform", "rotate(-90)")
                    .attr("y", 6).attr("dy", ".71em")
                    .style("text-anchor", "end")
                    .text("Streamflow (mm)");

                const precipAxisG = focus.append("g")
                    .attr("class", "y axis precip-axis")
                    .attr("transform", `translate(${width},0)`)
                    .call(yAxisRight);

                precipAxisG.append("text")
                    .attr("transform", "rotate(-90)")
                    .attr("y", -12).attr("dy", ".71em")
                    .style("text-anchor", "end")
                    .text("Precip / Rain+Melt (mm)");

                /* --- Flow areas --- */
                function areaGen(k, xS, yS) {
                    return d3.area()
                        .x(d => xS(d.date))
                        .y0(yS(0))
                        .y1(d => yS(d[k]));
                }

                flowsG = focus.append("g")
                    .attr("clip-path", "url(#clip)")
                    .attr("class", "flows");

                flowsG.selectAll("path")
                    .data(flowKeys)
                    .enter().append("path")
                    .attr("class", d => `area area-${d.replace(/\s+/g, '-')}`)  // e.g. area-Runoff
                    .attr("fill", d => flowColors[d])
                    .attr("opacity", 1.0)
                    .attr("d", k => areaGen(k, x, y)(rows));


                redrawAreas = () => flowsG.selectAll("path")
                    .attr("d", k => areaGen(k, x, y)(rows));

                /* --- Hover line / tooltip --- */
                const bisect = d3.bisector(d => d.date).left;
                hoverLine = focus.append("line")
                    .attr("class", "hover-line")
                    .attr("y1", 0).attr("y2", height)
                    .style("stroke", "#333").style("stroke-width", 1)
                    .style("pointer-events", "none").style("opacity", 0);

                function moved(event) {
                    const [mx] = d3.pointer(event, this),
                        t = x.invert(mx),
                        i = Math.min(bisect(rows, t), rows.length - 1),
                        d0 = rows[Math.max(0, i - 1)], d1 = rows[i],
                        d = (!d1 || (t - d0.date) < (d1.date - t)) ? d0 : d1;

                    hoverLine.attr("x1", x(d.date)).attr("x2", x(d.date)).style("opacity", 1);
                    tooltip.style("opacity", 1)
                        .html(`${fmtDate(d.date)}<br>
             Precipitation: ${d["Precipitation"].toFixed(2)} mm<br>
             Rain + Melt : ${d["Rain + Melt"].toFixed(2)} mm<br>
             Runoff      : ${d["Runoff"].toFixed(2)} mm<br>
             Lateral Flow: ${d["Lateral Flow"].toFixed(2)} mm<br>
             Baseflow    : ${d["Baseflow"].toFixed(2)} mm`)
                        .style("left", (event.clientX + 12) + "px")
                        .style("top", (event.clientY - 28) + "px");
                }
                function left() { hoverLine.style("opacity", 0); tooltip.style("opacity", 0); }

                focus.append("rect")
                    .attr("class", "hover-capture")
                    .attr("width", width).attr("height", height)
                    .style("fill", "none").style("pointer-events", "all")
                    .on("mousemove", moved).on("mouseleave", left);

                /* --- Precip / Rain+Melt bars --- */
                barsG = focus.append("g")
                    .attr("class", "precip")
                    .attr("clip-path", "url(#clip)");

                /** Dynamic pixel width: distance between first two visible days */
                const barWidth = () => {
                    const domain = x.domain(),
                        i0 = bisect(rows, domain[0]),
                        i1 = Math.min(i0 + 1, rows.length - 1);
                    if (i0 === i1) return 2;
                    return Math.max(1, (x(rows[i1].date) - x(rows[i0].date)) * 0.8);
                };

                function drawBars(selection, xScale, yScale, clipToDomain = false) {
                    const w = barWidth(),
                        d0 = x.domain()[0], d1 = x.domain()[1];
                    selection
                        .attr("x", d => xScale(d.date) - w / 2)
                        .attr("width", w)
                        .attr("height", d => yScale(d.rm))
                        .attr("display", d => clipToDomain && (d.date < d0 || d.date > d1) ? "none" : null);
                }

                barsG.selectAll("rect")
                    .data(meteo, d => d.date)
                    .enter().append("rect")
                    .attr("y", 0)
                    .attr("fill", d => d.rm > d.p ? meteoColors["Rain + Melt"] : meteoColors["Precipitation"])
                    .attr("opacity", 0.35)
                    .on("mouseenter", function (event, d) {
                        d3.select(this).attr("opacity", 0.8);
                        tooltip.style("opacity", 1)
                            .html(`${fmtDate(d.date)}<br>
                 Precip: ${d.p.toFixed(2)} mm<br>
                 Rain+Melt: ${d.rm.toFixed(2)} mm`);
                    })
                    .on("mousemove", e => tooltip.style("left", (e.clientX + 12) + "px").style("top", (e.clientY - 28) + "px"))
                    .on("mouseleave", function () { d3.select(this).attr("opacity", 0.35); tooltip.style("opacity", 0); });

                drawBars(barsG.selectAll("rect"), x, yPbar, true);

                /* --- Context axes --- */
                context.append("g")
                    .attr("class", "x axis")
                    .attr("transform", `translate(0,${height2})`)
                    .call(xAxisC);

                context.append("g")
                    .attr("class", "y axis")
                    .call(yAxisC);

                /* --- Context flow areas --- */
                const flowsGC = context.append("g").attr("class", "flowsC");
                flowsGC.selectAll("path")
                    .data(flowKeys)
                    .enter().append("path")
                    .attr("fill", d => flowColors[d]).attr("opacity", 1.0)
                    .attr("d", k => areaGen(k, xC, yC)(rows));

                /* --- Context precip bars (no tooltip) --- */
                barsGC = context.append("g").attr("class", "precipC");
                barsGC.selectAll("rect")
                    .data(meteo)
                    .enter().append("rect")
                    .attr("y", 0)
                    .attr("fill", d => d.rm > d.p ? meteoColors["Rain + Melt"] : meteoColors["Precipitation"])
                    .attr("opacity", 0.25);

                function drawBarsC() {
                    const w = barWidth();
                    barsGC.selectAll("rect")
                        .attr("x", d => xC(d.date) - w / 2)
                        .attr("width", w)
                        .attr("height", d => height2 - yPC(d.rm));
                }
                drawBarsC();

                /* --- Brush --- */
                context.append("g")
                    .attr("class", "x brush")
                    .call(brush)
                    .call(brush.move, x.range())
                    .selectAll(".handle").attr("display", null);

                context.append("text")
                    .attr("transform", `translate(${width / 2},${height2 + margin2.bottom})`)
                    .style("text-anchor", "middle")
                    .text("Date");


                buildLegend();

                /* === initial clipping === */
                redrawBars = () => drawBars(barsG.selectAll("rect"), x, yPbar, true);
            });

            /* ===== Brush handler ===== */

            function brushed(event) {
                const sel = event.selection;
                x.domain(sel ? sel.map(xC.invert) : xC.domain());
                focus.select(".x.axis").call(xAxis);

                redrawAreas && redrawAreas();      // cheap (3 paths)

                hoverLine && hoverLine.style("opacity", 0);
                redrawBars && redrawBars();
            }
            function buildLegend() {
                const legendData = [
                    { id: "Runoff", label: "Runoff (mm)", colors: [flowColors["Runoff"]], type: "area" },
                    { id: "Lateral Flow", label: "Lateral Flow (mm)", colors: [flowColors["Lateral Flow"]], type: "area" },
                    { id: "Baseflow", label: "Baseflow (mm)", colors: [flowColors["Baseflow"]], type: "area" },
                    // one checkbox, two swatches
                    {
                        id: "Bars", label: "Rain+Melt / Precip (mm)", colors: [meteoColors["Rain + Melt"],
                        meteoColors["Precipitation"]], type: "bar"
                    }
                ];

                const cont = d3.select("#legend");

                const item = cont.selectAll("label.legend-item")
                    .data(legendData)
                    .enter().append("label")
                    .attr("class", "legend-item")
                    .on("pointerdown", e => { e.stopPropagation(); e.preventDefault(); });   // keeps brush drag working

                /* checkbox */
                item.append("input")
                    .attr("type", "checkbox")
                    .attr("checked", true)
                    .on("change", (evt, d) => handleToggle(evt.currentTarget.checked, d));

                /* colour swatches (1-N per item) */
                const swatchGroup = item.append("span")
                    .attr("class", "legend-swatch-group")              // groups multiple squares
                    .style("opacity", d => d.type === "area" ? 1 : 0.35);  // bars = semi-transparent, areas = solid

                swatchGroup.selectAll("span.swatch")
                    .data(d => d.colors)                                // array of 1 or 2 colours
                    .enter().append("span")
                    .attr("class", "legend-swatch")
                    .style("background", c => c);

                /* text label */
                item.append("span").text(d => d.label);
            }

            function handleToggle(checked, d) {
                if (d.id === "Bars") {
                    // toggle precip + rain/melt bars and their y-axis
                    d3.selectAll(".precip,.precipC").style("display", checked ? null : "none");
                    d3.selectAll(".precip-axis").style("display", checked ? null : "none");
                } else {
                    const cls = `.area-${d.id.replace(/\s+/g, '-')}`;
                    d3.selectAll(cls).style("display", checked ? null : "none");
                }
            }

            /* ===== Toggle bars ===== */
            d3.select("#toggleBars").on("change", function () {
                const show = this.checked;
                d3.selectAll(".precip").style("display", show ? null : "none");
                d3.selectAll(".precipC").style("display", show ? null : "none");
                d3.selectAll(".precip-axis").style("display", show ? null : "none");
            });
        </script>

        {% include 'controls/unitizer_modal.htm'%}
        {% include 'controls/poweruser_panel.j2'%}
    </div>

    <!-- Placed at the end of the document so the pages load faster -->
    <script type="text/javascript" src="{{ url_for('static', filename='js/tinyqueue.js') }}"></script>
    <script type="text/javascript" src="{{ url_for('static', filename='js/polylabel.js') }}"></script>
    <script type="text/javascript" src="{{ url_for('static', filename='js/underscore.js') }}"></script>
    <script type="text/javascript" src="{{ url_for('static', filename='js/copytext.js') }}?20180904"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-ho+j7jyWK8fNQe+A12Hb8AhRq26LrZ/JpcUGGOn+Y7RsweNrtN/tE3MoK7ZeZDyx"
        crossorigin="anonymous"></script>
</body>

</html>