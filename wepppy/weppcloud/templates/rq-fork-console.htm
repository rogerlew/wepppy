<html>
  <head>
    <title>fork</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css"
    integrity="sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2" crossorigin="anonymous">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/js/bootstrap.bundle.min.js"
      integrity="sha384-ho+j7jyWK8fNQe+A12Hb8AhRq26LrZ/JpcUGGOn+Y7RsweNrtN/tE3MoK7ZeZDyx"
      crossorigin="anonymous"></script>
    <script type="text/javascript">


function WSClient(formId, channel) {
    // global runid
    this.formId = formId;
    this.channel = channel;
    this.wsUrl = "wss://" + window.location.host + "/weppcloud-microservices/status/" + runid + ":" + channel;
    this.ws = null;
    this.shouldReconnect = true;
//    this.connect();
}

WSClient.prototype.connect = function() {
    if (this.ws) {
        return; // If already connected, do nothing
    }

    this.shouldReconnect = true;
    this.ws = new WebSocket(this.wsUrl);
    this.ws.onopen = () => {
        $("#preflight_status").html("Connected");
        if (this.ws.readyState === WebSocket.OPEN) {
            this.ws.send(JSON.stringify({"type": "init"}));
        } else {
            console.error("WebSocket is not in OPEN state: ", this.ws.readyState);
        }
    };

    this.ws.onmessage = (event) => {
        var payload = JSON.parse(event.data);
        if (payload.type === "ping") {
            this.ws.send(JSON.stringify({"type": "pong"}));
        } else if (payload.type === "hangup") {
            this.disconnect();
        } else if (payload.type === "status") {
            var data = payload.data;
            var lines = data.split('\n');
            if (lines.length > 1) {
                data = lines[0] + '...';
            }

            if (data.includes("EXCEPTION")) {
                var stacktrace = $("#" + this.formId + " #stacktrace");

                stacktrace.show();
                stacktrace.text("");
                stacktrace.append("<h6>Error</h6>");
                stacktrace.append(`<p>${data}</p>`);

                var job_id = data.split(' ')[0].slice(3);
                var job_url = `https://${window.location.host}/weppcloud/rq/jobinfo/${job_id}`;

                // need a short delay here to avoid race condition
                setTimeout(function() {
                    $.get(job_url, function(job_info, status) {
                        if (status === 'success') {
                            stacktrace.append(`<pre><small class="text-muted">${job_info.exc_info}</small></pre>`);
                        }
                    });
                }, 500);
            }

            if (data.includes("TRIGGER")) {
                // need to parse the trigger command and execute it
                // second to last argument is the controller
                // last argument is the event
                var trigger = data.split(' ');
                var controller = trigger[trigger.length - 2];
                var event = trigger[trigger.length - 1];

                if (controller == this.channel) {
                    $("#" + this.formId).trigger(event);
                }

            }
            else {
                $("#" + this.formId + " #status").html(data);
            }
        }
    };

    this.ws.onerror = (error) => {
        console.log("WebSocket Error: ", error);
        this.ws = null;
    };

    this.ws.onclose = () => {
//        $("#" + this.formId + " #status").html("Connection Closed");
        this.ws = null;
        if (this.shouldReconnect) {
            setTimeout(() => { this.connect(); }, 5000);
        }
    };
};

WSClient.prototype.disconnect = function() {
    if (this.ws) {
        this.shouldReconnect = false;
        this.ws.close();
        this.ws = null;
    }
};

window.onload = function(e){

    var the_console = $("#the_console");
            
    $.post({
        url: "rq/api/fork",
        data: {undisturbify: __undisturbify__},
        success: function success(response) {
            if (response.Success === true) {
                the_console.html(`fork job submitted: ${response.job_id}\n\nnew_runid: ${response.new_runid}`);
            } else {
                the_console.html(`Error: ${response.Error}`);
            }
        },
        error: function error(jqXHR)  {
            the_console.html(`Error: ${jqXHR.responseText}`);
        },
        fail: function fail(jqXHR, textStatus, errorThrown) {
            the_console.html(`Error: ${errorThrown}`);
        }
    });
            
}
    </script>
  </head>
  <body>
    <div style="margin-left:2em;">
    <h1>fork-console<h1>
    <form  id="the_console" action="javascript:void(0);">
        <div class="form-group row">
            <h3 style="margin-left: 0.5em; padding-top: 80px;">fork-console</h3>
        </div>
        <div id="rq_job">
        </div>
        <h6>Status</h6>
        <div class="alert alert-info" style="line-height: 30px; height: 30px; padding-top: 0;">
            <pre><small id="status" class="text-muted"></small></pre>
        </div>
        <h6>Summary</h6>
        <div class="alert alert-success" style="background:white">
            <div id="info"></div>
        </div>
        <div id="stacktrace" class="alert alert-warning">
        </div>
    </form>
    </div>
  </body>
</html>