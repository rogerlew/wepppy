{% import "controls/_pure_macros.html" as ui %}
{% from "shared/console_macros.htm" import button_row %}

{% set show_landuse_modify = ron.enable_landuse_change %}
{% set show_rangeland_modify = 'rangeland_cover' in ron.mods %}
{% set show_rap = 'rap' in ron.mods %}

{% set sub_cmap_options = [
  {
    "id": "sub_cmap_radio_default",
    "label": "Default",
    "value": "default",
    "selected": True
  },
  {
    "id": "sub_cmap_radio_slp_asp",
    "label": "Slope/Aspect",
    "value": "slp_asp",
    "disabled": True
  },
  {
    "id": "sub_cmap_radio_dom_lc",
    "label": "Dominant Landcover",
    "value": "dom_lc",
    "disabled": True
  },
  {
    "id": "sub_cmap_radio_dom_soil",
    "label": "Dominant Soil",
    "value": "dom_soil",
    "disabled": True
  }
] %}
{% if show_rangeland_modify %}
  {% set sub_cmap_options = sub_cmap_options + [
    {
      "id": "sub_cmap_radio_rangeland_cover",
      "label": "Rangeland Cover",
      "value": "rangeland_cover",
      "disabled": True
    }
  ] %}
{% endif %}
{% if show_rap %}
  {% set sub_cmap_options = sub_cmap_options + [
    {
      "id": "sub_cmap_radio_landuse_cover",
      "label": "Vegetation Cover (%)",
      "value": "landuse_cover"
    }
  ] %}
{% endif %}

{% set sub_layer_selection_content %}
  <h3 class="wc-map-panel__title">Subcatchment Colormapping</h3>
  {{ ui.radio_group(
       "sub_cmap_radio",
       label="Subcatchment color map",
       layout="vertical",
       options=sub_cmap_options
     ) }}
  {% if show_rap %}
    <div class="wc-map-legend">
      <span id="landuse_sub_cmap_canvas_cover_units" class="wc-color-scale__units"></span>
      <div class="wc-color-scale__bar">
        <canvas
          id="landuse_sub_cmap_canvas_cover"
          class="wc-color-scale__canvas"
          width="200"
          height="20"></canvas>
      </div>
      <div class="wc-color-scale__labels">
        <span id="landuse_sub_cmap_canvas_cover_min"></span>
        <span id="landuse_sub_cmap_canvas_cover_max"></span>
      </div>
    </div>
  {% endif %}
  <div id="sbs_legend" class="wc-map-legend" aria-live="polite"></div>
  <div id="sub_legend" class="wc-map-legend" aria-live="polite"></div>
{% endset %}

{% set drilldown_content %}
  <p class="wc-text-muted">Select a channel or hillslope to view information.</p>
{% endset %}

{% set results_content %}
  {% if 'rhem' not in ron.mods %}
    {% include "controls/map/wepp_hillslope_visualizations.htm" %}
  {% else %}
    {% include "controls/map/rhem_hillslope_visualizations.htm" %}
  {% endif %}
{% endset %}

{% if show_landuse_modify %}
  {% set modify_landuse_content %}
    {% include "controls/modify_landuse.htm" %}
  {% endset %}
{% endif %}

{% if show_rangeland_modify %}
  {% set modify_rangeland_content %}
    {% include "controls/modify_rangeland_cover.htm" %}
  {% endset %}
{% endif %}

{% set map_tabs = [
  {
    "id": "sub_layer_selection",
    "label": "Layers",
    "icon": '<span aria-hidden="true">üó∫Ô∏è</span>',
    "active": True,
    "content": sub_layer_selection_content
  },
  {
    "id": "drilldown",
    "label": "Drilldown",
    "icon": '<span aria-hidden="true">üîé</span>',
    "content": drilldown_content
  }
] %}

{% if show_landuse_modify %}
  {% set map_tabs = map_tabs + [
    {
      "id": "modify",
      "label": "Modify Landuse",
      "icon": '<span aria-hidden="true">üõ†Ô∏è</span>',
      "content": modify_landuse_content
    }
  ] %}
{% endif %}

{% if show_rangeland_modify %}
  {% set map_tabs = map_tabs + [
    {
      "id": "modify_rangeland_cover",
      "label": "Rangeland Cover",
      "icon": '<span aria-hidden="true">üåæ</span>',
      "content": modify_rangeland_content
    }
  ] %}
{% endif %}

{% set map_tabs = map_tabs + [
  {
    "id": "results",
    "label": "Results",
    "icon": '<span aria-hidden="true">üìä</span>',
    "content": results_content
  }
] %}

{% call ui.control_shell(
     form_id="setloc_form",
     title="Map",
     collapsible=False,
     status_panel_override='',
     summary_panel_override='',
     stacktrace_panel_override=''
   ) %}
  <div class="wc-map-controls">
    <div class="wc-map-controls__input">
      {{ ui.text_field(
           "input_centerloc",
           "Center or ID search",
           placeholder="Lon, Lat, [Zoom] | TopazID | WeppID",
           attrs={"autocomplete": "off", "inputmode": "text"},
           help="Enter coordinates (lon, lat, optional zoom) or a Topaz/Wepp ID."
         ) }}
    </div>
    <div class="wc-map-controls__actions">
      {% call button_row() %}
        <button type="button" class="pure-button pure-button-primary" id="btn_setloc">Go</button>
        <button type="button" class="pure-button pure-button-secondary" id="btn_find_topaz_id">Find Topaz ID</button>
        <button type="button" class="pure-button pure-button-secondary" id="btn_find_wepp_id">Find WEPP ID</button>
      {% endcall %}
    </div>
  </div>

  <div class="wc-map-layout">
    <div class="wc-map-layout__canvas">
      <div class="wc-map">
        <div id="mapid" class="wc-map__canvas" role="application" aria-label="Watershed map viewport"></div>
        <button type="button"
                class="wc-map__resize-handle"
                aria-label="Resize map"
                title="Resize map"
                data-map-resize-handle>
          <span class="wc-map__resize-grip" aria-hidden="true"></span>
        </button>
      </div>
      <div class="wc-map-status" aria-live="polite">
        <span id="mapstatus"></span>
        <span class="wc-map-status__spacer" aria-hidden="true"></span>
        <span id="mouseelev"></span>
      </div>
    </div>
    <div class="wc-map-layout__inspector">
      {{ ui.tabset(map_tabs) }}
    </div>
  </div>
{% endcall %}
<script>
(function setupMapResizeHandle() {
  "use strict";

  var mapContainer = document.querySelector('.wc-map');
  if (!mapContainer || mapContainer.hasAttribute('data-map-resize-enhanced')) {
    return;
  }

  var handle = mapContainer.querySelector('[data-map-resize-handle]');
  if (!handle) {
    return;
  }

  if (!('PointerEvent' in window)) {
    console.warn('[Map Resize] Pointer events are not supported in this browser. Resize handle disabled.');
    return;
  }

  mapContainer.setAttribute('data-map-resize-enhanced', 'true');
  handle.setAttribute('tabindex', '0');

  var computedStyle = window.getComputedStyle(mapContainer);
  var mapInstance = null;
  var mapLayout = mapContainer.closest('.wc-map-layout');
  var minWidth = parseFloat(computedStyle.minWidth) || 320;
  var minHeight = parseFloat(computedStyle.minHeight) || 320;
  var pointerId = null;
  var startX = 0;
  var startY = 0;
  var startWidth = 0;
  var startHeight = 0;

  function getMapInstance() {
    if (mapInstance) {
      return mapInstance;
    }
    if (window.MapController && typeof window.MapController.getInstance === 'function') {
      try {
        mapInstance = window.MapController.getInstance();
        return mapInstance;
      } catch (error) {
        console.warn('[Map Resize] Unable to obtain MapController instance:', error);
      }
    }
    return null;
  }

  function clamp(value, minimum) {
    return value < minimum ? minimum : value;
  }

  function updateColumnWidth(width) {
    if (!mapLayout) {
      return;
    }
    var normalized = clamp(Math.round(width), minWidth);
    mapLayout.style.setProperty('--wc-map-layout-left', 'minmax(' + minWidth + 'px, ' + normalized + 'px)');
  }

  function applySize(width, height) {
    mapContainer.style.width = width + 'px';
    mapContainer.style.height = height + 'px';
    updateColumnWidth(width);
    var map = getMapInstance();
    if (map && typeof map.invalidateSize === 'function') {
      map.invalidateSize({ animate: false });
    }
  }

  function handlePointerMove(event) {
    if (pointerId === null || event.pointerId !== pointerId) {
      return;
    }
    event.preventDefault();
    if (typeof event.stopPropagation === 'function') {
      event.stopPropagation();
    }

    var deltaX = event.clientX - startX;
    var deltaY = event.clientY - startY;

    var nextWidth = clamp(startWidth + deltaX, minWidth);
    var nextHeight = clamp(startHeight + deltaY, minHeight);

    applySize(nextWidth, nextHeight);
  }

  function handlePointerEnd(event) {
    if (pointerId === null || event.pointerId !== pointerId) {
      return;
    }
    if (typeof event.stopPropagation === 'function') {
      event.stopPropagation();
    }
    if (typeof handle.releasePointerCapture === 'function') {
      handle.releasePointerCapture(pointerId);
    }
    pointerId = null;
    document.removeEventListener('pointermove', handlePointerMove);
    document.removeEventListener('pointerup', handlePointerEnd);
    document.removeEventListener('pointercancel', handlePointerEnd);
  }

  function handlePointerStart(event) {
    if (pointerId !== null) {
      handlePointerEnd({ pointerId: pointerId });
    }

    pointerId = event.pointerId;
    startX = event.clientX;
    startY = event.clientY;
    startWidth = mapContainer.offsetWidth;
    startHeight = mapContainer.offsetHeight;

    mapContainer.style.maxWidth = '100%';
    mapContainer.style.maxHeight = 'none';

    if (!mapContainer.style.width) {
      mapContainer.style.width = startWidth + 'px';
    }
    if (!mapContainer.style.height) {
      mapContainer.style.height = startHeight + 'px';
    }
    updateColumnWidth(startWidth);

    if (typeof handle.setPointerCapture === 'function') {
      handle.setPointerCapture(pointerId);
    }

    document.addEventListener('pointermove', handlePointerMove);
    document.addEventListener('pointerup', handlePointerEnd);
    document.addEventListener('pointercancel', handlePointerEnd);

    event.preventDefault();
    event.stopPropagation();
  }

  function handleKeyDown(event) {
    var step = event.shiftKey ? 32 : 16;
    var handled = false;
    var width = mapContainer.offsetWidth;
    var height = mapContainer.offsetHeight;

    if (!mapContainer.style.width) {
      mapContainer.style.width = width + 'px';
    }
    if (!mapContainer.style.height) {
      mapContainer.style.height = height + 'px';
    }

    switch (event.key) {
      case 'ArrowRight':
        width += step;
        handled = true;
        break;
      case 'ArrowLeft':
        width = clamp(width - step, minWidth);
        handled = true;
        break;
      case 'ArrowDown':
        height += step;
        handled = true;
        break;
      case 'ArrowUp':
        height = clamp(height - step, minHeight);
        handled = true;
        break;
      default:
        break;
    }

    if (handled) {
      event.preventDefault();
      applySize(width, height);
    }
  }

  handle.addEventListener('pointerdown', handlePointerStart);
  handle.addEventListener('keydown', handleKeyDown);
})();
</script>
