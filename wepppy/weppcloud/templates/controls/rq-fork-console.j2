<html>
  <head>
    <title>Fork Project Console</title>

    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css"
          integrity="sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2" crossorigin="anonymous">
    <script src="https://code.jquery.com/jquery-3.5.1.js" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/js/bootstrap.bundle.min.js"
            integrity="sha384-ho+j7jyWK8fNQe+A12Hb8AhRq26LrZ/JpcUGGOn+Y7RsweNrtN/tE3MoK7ZeZDyx"
            crossorigin="anonymous"></script>
    <style>
#status {
    background-color: #f5f5f5;  /* Light gray background */
    color: #333;              /* Dark text for readability */
    font-family: 'Courier New', Courier, monospace;
    padding: 10px;
    height: 300px;
    overflow-y: auto;
    white-space: pre-wrap;    /* Preserves whitespace and line breaks */
    border: 1px solid #ccc;   /* Softer border */
    border-radius: 4px;       /* Rounded corners */
}
    </style>

    <script type="text/javascript">
      // Global variables to hold the updated runid and job_id.
      var runid = {{ runid | tojson }};
      var undisturbify = {{ undisturbify | tojson }} === "true";
      var job_id = "";
      var new_runid = "";

      // WSClient definition
      function WSClient(runid, formId, channel) {
          this.formId = formId;
          this.channel = channel;
          this.wsUrl = "wss://" + window.location.host + "/weppcloud-microservices/status/" + runid + ":" + channel;
          this.ws = null;
          this.shouldReconnect = true;
          this.status = $("#" + this.formId + " #status");
          this.stacktrace = $("#" + this.formId + " #stacktrace");
      }

      WSClient.prototype.connect = function() {
          if (this.ws) {
              return; // Already connected
          }
          this.shouldReconnect = true;
          this.ws = new WebSocket(this.wsUrl);
          this.ws.onopen = () => {
              $("#preflight_status").html("Connected");
              if (this.ws.readyState === WebSocket.OPEN) {
                  this.ws.send(JSON.stringify({"type": "init"}));
              } else {
                  console.error("WebSocket is not in OPEN state: ", this.ws.readyState);
              }
          };

          this.ws.onmessage = (event) => {
              var payload = JSON.parse(event.data);
              if (payload.type === "ping") {
                  this.ws.send(JSON.stringify({"type": "pong"}));
              } else if (payload.type === "hangup") {
                  this.disconnect();
              } else if (payload.type === "status") {
                  var data = payload.data;
                  // Handle error messages with EXCEPTION text
                  if (data.includes("EXCEPTION")) {
                      this.stacktrace.show();
                      this.stacktrace.html("<h6>Error</h6><p>" + data + "</p>");
                      var job_id_extracted = data.split(' ')[0].slice(3);
                      var job_url = `https://${window.location.host}/weppcloud/rq/jobinfo/${job_id_extracted}`;
                      // Use a delay to avoid race condition
                      setTimeout(function() {
                          $.get(job_url, function(job_info, status) {
                              if (status === 'success') {
                                  this.stacktrace.append(`<pre><small class="text-muted">${job_info.exc_info}</small></pre>`);
                              }
                          });
                      }, 500);
                  }
                  // Handle TRIGGER messages
                  if (data.includes("TRIGGER")) {
                      // Expecting message format: "TRIGGER <channel> <event>"
                      var triggerParts = data.split(' ');
                      var controller = triggerParts[triggerParts.length - 2];
                      var eventName = triggerParts[triggerParts.length - 1];
                      console.log("Triggering event: ", controller, eventName);
                      if (controller === this.channel) {
//                          $("#" + this.formId).trigger(eventName);
                          if (eventName === "FORK_COMPLETE") {
                              $("#cancel_button").hide();
                              $('#submit_button').show();
                              $('#submit_button').prop('disabled', false);
                              $("#bottom").html(`<a href="https://${window.location.host}/weppcloud/runs/${new_runid}/cfg">Load ${new_runid} Project</a>`);
                          }
                      }
                  } else {
                      this.status.append(data);
                      this.status.scrollTop(this.status.prop("scrollHeight"));
                  }
              }
          };

          this.ws.onerror = (error) => {
              console.error("WebSocket Error: ", error);
              this.ws = null;
          };

          this.ws.onclose = () => {
              this.ws = null;
              if (this.shouldReconnect) {
                  setTimeout(() => { this.connect(); }, 5000);
              }
          };
      };

      WSClient.prototype.disconnect = function() {
          if (this.ws) {
              this.shouldReconnect = false;
              this.ws.close();
              this.ws = null;
          }
      };

      // Function to fork the project
      function forkProject() {
          // Read values from the form
          runid = $("#runid_input").val();
          undisturbify = $("#undisturbify_checkbox").is(":checked");

          $('#submit_button').prop('disabled', true);

          var the_console = $("#the_console");
          // Construct the fork URL using the provided runid
          var fork_url = `https://${window.location.host}/weppcloud/runs/${runid}/cfg/rq/api/fork`;

          $.post({
              url: fork_url,
              data: { undisturbify: undisturbify },
              success: function(response) {
                  if (response.Success === true) {
                      // Update global runid and job_id with values from the response
                      new_runid = response.new_runid;
                      job_id = response.job_id;

                      the_console.html(`
Fork job submitted: <a href="https://${window.location.host}/weppcloud/rq/job-dashboard/${job_id}" target="_blank">${job_id}</a><br>
New runid: <a href="https://${window.location.host}/weppcloud/runs/${new_runid}/cfg" target="_blank">${new_runid}</a>
                    `);
                      // Show the Cancel button after submission
                      $('#submit_button').hide();
                      $("#cancel_button").show();

                      var wsClient = new WSClient(runid, "fork_form", "fork");
                      wsClient.connect();
                  } else {
                      the_console.html(`Error: ${response.Error}`);
                  }
              },
              error: function(jqXHR) {
                  the_console.html(`Error: ${jqXHR.responseText}`);
              }
          });
      }

      // Cancel job function as provided
      function cancelJob() {
          $.ajax({
              url: `https://${window.location.host}/weppcloud/rq/canceljob/${job_id}`,
              method: 'GET',
              success: function(data) {
                  alert('Job cancelled');
              }
          });
      }

      $(document).ready(function() {
          $("#runid_input").val(runid);
         if (undisturbify) {
           $("#undisturbify_checkbox").prop("checked", true);
         }

         $("#the_console").html(`Fork job submitted:\nNew runid:`);

      });
    </script>
  </head>
  <body>
    <div class="container mt-4">
      <h1>WEPPcloud Project Forking Console</h1>
      
      <!-- Console output area -->

      <h5>Job Info:</h5>
      <pre id="the_console" class="border p-2"></pre>
      
      <!-- Fork form with runid and undisturbify options -->
      <form id="fork_form" onsubmit="forkProject(); return false;">
        <div class="form-group">
          <label for="runid_input">Run ID:</label>
          <input type="text" class="form-control" id="runid_input" placeholder="Enter runid" required>
        </div>
        <div class="form-group form-check">
          <input type="checkbox" class="form-check-input" id="undisturbify_checkbox">
          <label class="form-check-label" for="undisturbify_checkbox">Undisturbify
            <a data-toggle="tooltip" data-placement="top" title="Removes SBS Map (if applicable), rebuilds landuse, soils, and runs WEPP"><img src="{{ url_for('static', filename='images/61692-200-24.png') }}"/></a>
          </label>
        </div>
        <button type="submit" class="btn btn-primary" id="submit_button">Fork Project</button>
        
        <!-- Cancel button; hidden until a job is submitted -->
        <button type="button" class="btn btn-warning" id="cancel_button" onclick="cancelJob()" style="display:none;">Cancel Job</button>

        <div style="height: 20px;"></div>

        <div id="status"></div>
        <div id="stacktrace" style="display:none;" class="text-danger"></div>
        
      </form>
      
      <!-- Area to display the link to load the forked project when ready -->
      <div id="bottom" class="mt-4"></div>
    </div>
  </body>
</html>
