{% extends "controls/_base.htm" %}
{% block form_id %}omni_form{% endblock %}
{% block form_title %}OMNI Scenario Runner{% endblock %}
{% block inputs %}
<style>
    .scenario-item {
        position: relative;
        width: 100%;
    }
    .remove-btn-col {
        position: absolute;
        right: 0;
        top: 50%;
        transform: translateY(-50%);
        width: 50px;
    }
    .scenario-controls .form-group {
        flex: 1;
        min-width: 0;
    }
</style>
<h5>Scenario Builder</h5>
<div class="container mt-4">
    <div class="card">
        <div class="card-body">
            <div id="scenario-container"></div>
            <button class="btn btn-success mb-3" onclick="addScenario()">+</button>
        </div>
    </div>
</div>

<script>
    // Configuration for scenarios and their controls
    const scenarios = {
        uniform_low: {
            label: "Uniform Low Severity Fire",
            controls: []
        },
        uniform_moderate: {
            label: "Uniform Moderate Severity Fire",
            controls: []
        },
        uniform_high: {
            label: "Uniform High Severity Fire",
            controls: []
        },
        sbs_map: {
            label: "SBS Map",
            controls: [
                { type: "file", name: "sbs_file", label: "Upload SBS File" }
            ]
        },
        undisturbed: {
            label: "Undisturbed",
            controls: [],
            condition: () => window.omni?.has_sbs || false
        },
        prescribed_fire: {
            label: "Prescribed Fire",
            controls: [],
            condition: () => {
                const hasUndisturbed = document.querySelector('select[name="scenario"] option[value="undisturbed"]:checked');
                return hasUndisturbed || !window.omni?.has_sbs;
            }
        },
        thinning: {
            label: "Thinning",
            controls: [
                { type: "select", name: "canopy_cover", label: "Canopy Cover Reduction", options: ["40%", "65%"] },
                { type: "select", name: "ground_cover", label: "Ground Cover", options: ["93%", "90%", "75%"] }
            ]
        },
        mulch: {
            label: "Mulching",
            controls: [
                { type: "select", name: "ground_cover_increase", label: "Ground Cover Increase", options: ["15%", "30%", "60%"] },
                { 
                    type: "select", 
                    name: "base_scenario", 
                    label: "Base Scenario", 
                    options: ["uniform_low", "uniform_moderate", "uniform_high", "sbs_map"],
                    optionLabels: {
                        uniform_low: "Uniform Low Severity Fire",
                        uniform_moderate: "Uniform Moderate Severity Fire",
                        uniform_high: "Uniform High Severity Fire",
                        sbs_map: "SBS Map"
                    }
                }
            ]
        }
    };

    // Mock omni object for testing (replace with actual Flask-provided value)
    window.omni = { has_sbs: true };

    function addScenario() {
        const container = document.getElementById('scenario-container');
        const scenarioItem = document.createElement('div');
        scenarioItem.className = 'row align-items-end mb-3 pb-3 border-bottom scenario-item';
        scenarioItem.innerHTML = `
            <div class="col pr-5">
                <div class="row">
                    <div class="col-md-4">
                        <div class="form-group">
                            <label for="scenario-select">Scenario</label>
                            <select class="form-control" id="scenario-select" name="scenario" onchange="updateControls(this)">
                                <option value="">Select Scenario</option>
                                ${Object.entries(scenarios)
                                    .filter(([key, config]) => !config.condition || config.condition())
                                    .map(([key, config]) => `<option value="${key}">${config.label}</option>`)
                                    .join('')}
                            </select>
                        </div>
                    </div>
                    <div class="col-md-8 scenario-controls d-flex"></div>
                </div>
            </div>
            <div class="remove-btn-col">
                <button class="btn btn-danger btn-sm w-100" onclick="this.parentElement.parentElement.remove()">-</button>
            </div>
        `;
        container.appendChild(scenarioItem);
    }

    function updateControls(selectElement) {
        const scenarioKey = selectElement.value;
        const controlsDiv = selectElement.parentElement.parentElement.parentElement.querySelector('.scenario-controls');
        controlsDiv.innerHTML = '';

        if (scenarioKey && scenarios[scenarioKey]) {
            const config = scenarios[scenarioKey];
            config.controls.forEach(control => {
                let html = `
                    <div class="form-group px-2">
                        <label for="${control.name}">${control.label}</label>
                `;
                if (control.type === 'select') {
                    html += `
                        <select class="form-control" id="${control.name}" name="${control.name}">
                            ${control.options.map(opt => 
                                `<option value="${opt}">${control.optionLabels?.[opt] || opt}</option>`
                            ).join('')}
                        </select>
                    `;
                } else if (control.type === 'file') {
                    html += `<input type="file" class="form-control-file" id="${control.name}" name="${control.name}" accept=".tif,.img">`;
                }
                html += `</div>`;
                controlsDiv.insertAdjacentHTML('beforeend', html);
            });
        }
    }

    function serializeScenarios() {
        const formData = new FormData();
        const scenarioItems = document.querySelectorAll('#scenario-container .scenario-item');
        const scenariosList = [];

        scenarioItems.forEach((item, index) => {
            const scenarioSelect = item.querySelector('select[name="scenario"]');
            if (!scenarioSelect || !scenarioSelect.value) return;

            const scenario = {
                type: scenarioSelect.value
            };

            const controls = item.querySelectorAll('.scenario-controls [name]');
            controls.forEach(control => {
                if (control.type === 'file' && control.files.length > 0) {
                    // Append the file with a unique key based on the scenario index
                    formData.append(`scenarios[${index}][${control.name}]`, control.files[0]);
                    scenario[control.name] = control.files[0].name; // Store filename in the JSON structure
                } else if (control.value) {
                    scenario[control.name] = control.value;
                }
            });

            scenariosList.push(scenario);
        });

        // Append the scenarios list as a JSON string
        formData.append('scenarios', JSON.stringify(scenariosList));
        return formData;
    }
    
</script>

<div style="height:1em;"></div>
<div class="form-group row hide-readonly">
    <div class="col-sm-4">
        <button id="btn_build_rap_ts" class="btn btn-outline-success my-2 my-sm-0 col-sm-12" type="button" onclick="Omni.getInstance().run_omni_scenarios()">Run Omni</button>
    </div>
    <div class="col-sm-5">
        <small id="hint_run_omni"></small>
    </div>
</div>
{% endblock %}