<!doctype html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <meta name="description" content="">
    <meta name="author" content="">
    <title>Combined Watershed Viewer </title>
    <!-- Style Sheets -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.7.1/dist/leaflet.css" crossorigin="anonymous"/>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css"
      integrity="sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2" crossorigin="anonymous">
    <link rel="stylesheet" type="text/css" href="{{ url_for('static', filename='css/style.css') }}">
    <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/v/bs4/dt-1.10.16/datatables.min.css"/>
    <link rel="shortcut icon" href="{{ url_for('static', filename='favicon/favicon.ico') }}" type="image/x-icon">
    <link rel="icon" href="{{ url_for('static', filename='favicon/favicon.ico') }}" type="image/x-icon">
    <script   src="https://code.jquery.com/jquery-3.5.1.min.js" integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0=" crossorigin="anonymous"></script>
    <script src="https://unpkg.com/leaflet@1.7.1/dist/leaflet-src.js"
            crossorigin=""></script>
<script type="text/javascript">
var site_prefix = "{{ site_prefix }}";

function getURLParameter(sParam) {
    var sPageURL = window.location.search.substring(1);
    var sURLVariables = sPageURL.split('&');
    for (var i = 0; i < sURLVariables.length; i++) {
        var sParameterName = sURLVariables[i].split('=');
        if (sParameterName[0] === sParam) {
            return sParameterName[1];
        }
    }
}

function render_legend_cmap(cmap, canvasID) {
    var canvas = $("#" + canvasID);

    var width = canvas.outerWidth();
    var height = canvas.outerHeight();
    var data = new Float32Array(height * width);

    for (var y = 0; y <= height; y++) {
        for (var x = 0; x <= width; x++) {
            data[(y*width)+x] = x / (width - 1.0);
        }
    }

    var plot = new plotty.plot({
        canvas: canvas["0"],
        data: data, width: width, height: height,
        domain: [0, 1], colorScale: cmap
    });
    plot.render();
}

$(document).ready(function () {
    var center;
    var zoom;
    var display_units;
    var ws;
    var varopts;
    var varname;
    var title;

    var map = L.map('map');

    var googleTerrain = L.tileLayer("https://{s}.google.com/vt/lyrs=p&x={x}&y={y}&z={z}", {
      maxZoom: 20,
      subdomains: ["mt0", "mt1", "mt2", "mt3"]
    });

    var googleSat = L.tileLayer("https://{s}.google.com/vt/lyrs=s&x={x}&y={y}&z={z}", {
      maxZoom: 20,
      subdomains: ["mt0", "mt1", "mt2", "mt3"]
    });

    var baseMaps = {
      "Satellite": googleSat,
      "Terrain": googleTerrain
    };

    var overlayMaps = {};

    googleSat.addTo(map);
    googleTerrain.addTo(map);

    var ctrls = L.control.layers(baseMaps, overlayMaps);
    ctrls.addTo(map);

    var tolerance;
    var units = '';
    var numvars;
    var defaultStyle;

    var cmapperRunoff = createColormap({ colormap: 'winter', nshades: 64 });
    var cmapperLoss = createColormap({ colormap: "electric", nshades: 64 });
    var cmapperPhosphorus = createColormap({ colormap: 'viridis', nshades: 64 });

    var cmap, r;
    var vmin = 0.0;
    var vmax;
    var cmapname;

    var Legend;
    var legend;

    var VarSelection;
    var varSelection;

    var TitleBox;

    var polys;
    var data;
    var popup;

    var data_uri = getURLParameter("data_uri");

    if (data_uri !== undefined) {
        $.getJSON(data_uri, function (data) {
            center = data.center;
            zoom = data.zoom;
            display_units = data.units;
            ws = data.ws;
            varopts = data.varopts;
            varname = data.varname;
            title = data.title;

            callback();
        });

    } else {
        center = getURLParameter("center");
        if (center === undefined) {
            center = [39.0, -99.0];
        } else {
            center = decodeURIComponent((center + '').replace(/\+/g, '%20'));
            center = JSON.parse(center);
        }

        zoom = getURLParameter("zoom");
        if (zoom === undefined) {
            zoom = 5;
        } else {
            zoom = JSON.parse(zoom);
        }

        display_units = getURLParameter("units");
        if (display_units === undefined) {
            display_units = 'SI';
        }

        ws = getURLParameter("ws");
        if (ws !== undefined) {
            ws = decodeURIComponent((ws + '').replace(/\+/g, '%20'));
            ws = JSON.parse(ws);
        }

        varopts = getURLParameter("varopts");
        if (varopts !== undefined) {
            varopts = decodeURIComponent((varopts + '').replace(/\+/g, '%20'));
            varopts = JSON.parse(varopts);

            if (display_units !== 'SI') {
                if ("runoff" in varopts) {
                    varopts["runoff"] *= 25.4;
                }
                if ("subrunoff" in varopts) {
                    varopts["subrunoff"] *= 25.4;
                }
                if ("baseflow" in varopts) {
                    varopts["baseflow"] *= 25.4;
                }
                if ("phosphorus" in varopts) {
                    varopts["phosphorus"] *= 1.12085;
                }
                if ("loss" in varopts) {
                    varopts["loss"] *= 1.12085;
                }
            }
        }

        varname = getURLParameter("varname");
        if (varname === undefined) {
            varname = Object.keys(varopts)[0];
        }

        title = getURLParameter("title");
        if (title !== undefined) {
            title = decodeURIComponent((title + '').replace(/\+/g, '%20'));
        }

        callback();

    }

    function prep_render() {

        if (varname === 'runoff' || varname === 'subrunoff' || varname === 'baseflow') {
            r = tolerance;
            cmap = function (v) {
                return cmapperRunoff.map(v / r);
            };
            vmin = -tolerance;
            vmax = tolerance;
            cmapname = 'winter';
            units = 'mm';
        } else if (varname === 'loss') {
            r = tolerance;
            cmap = function (v) {
                return cmapperLoss.map(v / (2.0 * r) + 0.5);
            };
            vmin = -tolerance;
            vmax = tolerance;
            cmapname = 'electric';
            units = 'kg/ha';
        } else if (varname === 'phosphorus') {
            r = tolerance;
            if (r < 1) {
                r = Math.pow(r, 2.0);
            }
            cmap = function (v) {
                return cmapperPhosphorus.map(v / r);
            };
            vmin = -tolerance;
            vmax = tolerance;
            cmapname = 'viridis';
            units = 'kg/ha';
        }
    }

    function set_tolerance() {
        var _scale;
        if (display_units === 'SI') {
            _scale = 1;
        } else {
            if (units === 'mm') {
                _scale = 25.4;
            } else if (units === 'kg/ha') {
                _scale = 1.12085;
            }
        }

        tolerance = parseFloat($('#tolerance-input').val()) * _scale;
        prep_render();
        render_legend();
        render();
    }
    
    function render_legend() {
        if (legend !== undefined) {
            legend.remove();
        }
        legend = new Legend();
        map.addControl(legend);
        render_legend_cmap(cmapname, 'legend_canvas');
        $('#set-tolerance-btn').on('click', set_tolerance);

    }

    function render() {
        if (data === undefined) {
            map.spin(true);
            let i = 0;
            for (let w of ws) {
                let runid = w.runid;
                data = {};

                $.get({
                    url: site_prefix + "/runs/" + runid + "/cfg/query/wepp/" + varname + "/subcatchments/",
                    success: function success(_data) {
                        if (_data === null) {
                            throw "query returned null";
                        }
                        data[runid] = _data;
                        _render(runid, _data);

                        i += 1;
                        if (i === ws.length) {
                            map.spin(false);
                        }
                    },
                    fail: function fail(error) {
                        data[runid] = null;
                        map.spin(false);
                    }
                });
            }
        } else {
            for (let w of ws) {
                let runid = w.runid;
                _render(runid, data[runid]);
            }
        }
    }

    function _render(runid, _data) {
        polys[runid].eachLayer(function (layer) {
            const topId = layer.feature.properties.TopazID;
            const v = parseFloat(_data[topId].value);
            const c = cmap(v);

            layer.setStyle({
                color: c,
                weight: 1,
                opacity: 0.9,
                fillColor: c,
                fillOpacity: 0.9
            });
        });
    }

    
    function callback() {
        map.setView(center, zoom);
        tolerance = varopts[varname];
        units = '';
        numvars = Object.keys(varopts).length;

        defaultStyle = {
            "color": "#ff7800",
            "weight": 2,
            "opacity": 0.65,
            "fillColor": "#ff7800",
            "fillOpacity": 0.3
        };


        Legend = L.Control.extend({
            options: {
                position: 'bottomleft'
            },
            initialize: function (options) {
                // constructor
            },
            onAdd: function (map) {
                var container = L.DomUtil.create('div', 'leaflet-bar leaflet-control leaflet-control-custom');

                container.style.backgroundColor = 'white';
                container.style.width = '240px';
                container.style.height = '150px';

                if (display_units === 'SI') {
                    container.innerHTML =
                        '<div style="padding-left: 10px; padding-right: 10px; padding-top: 5px;">' +
                        '<h6>' + varname.charAt(0).toUpperCase() + varname.slice(1) + ' Legend</h6>' +
                        '<div>' + units + '</div>' +
                        '<canvas id="legend_canvas" width=180 height=20 ' +
                        'style="width:200px;height:20px;display:table;margin:0 auto;"></canvas>' +
                        '<div class="row">' +
                        '<div class="col-md-4"><span id="legend_vmin">' + vmin + '</span></div>' +
                        '<div class="col-md-4" style="text-align: center;">0</div>' +
                        '<div class="col-md-4" style="text-align: right;"><span id="legend_vmax">' + vmax + '</span></div>' +
                        '</div>' +
                        '<div class="row" style="padding-top: 18px;">' +
                        '<div class="col-md-4"><input class="form-control-sm" style="width:80px;" id="tolerance-input" type="text" value="' + tolerance + '"></div>' +
                        '<div class="col-md-8"><button id="set-tolerance-btn" class="btn btn-primary btn-sm">Set Tolerance</button></div>' +
                        '</div>' +
                        '</div>';
                } else {
                    var scale;
                    var _units;
                    if (units === 'mm') {
                        scale = 0.0393701;
                        _units = 'in';
                    } else if (units === 'kg/ha') {
                        scale = 0.892179;
                        _units = 'lb/ha';
                    }

                    var _vmin = parseFloat(vmin * scale).toFixed(2);
                    var _vmax = parseFloat(vmax * scale).toFixed(2);
                    var _tolerance = parseFloat(tolerance * scale).toFixed(2);

                    container.innerHTML =
                        '<div style="padding-left: 10px; padding-right: 10px; padding-top: 5px;">' +
                        '<h6>' + varname.charAt(0).toUpperCase() + varname.slice(1) + ' Legend</h6>' +
                        '<div>' + _units + '</div>' +
                        '<canvas id="legend_canvas" width=180 height=20 ' +
                        'style="width:200px;height:20px;display:table;margin:0 auto;"></canvas>' +
                        '<div class="row">' +
                        '<div class="col-md-4"><span id="legend_vmin">' + _vmin + '</span></div>' +
                        '<div class="col-md-4" style="text-align: center;">0</div>' +
                        '<div class="col-md-4" style="text-align: right;"><span id="legend_vmax">' + _vmax + '</span></div>' +
                        '</div>' +
                        '<div class="row" style="padding-top: 18px;">' +
                        '<div class="col-md-4"><input class="form-control-sm" style="width:80px;" id="tolerance-input" type="text" value="' + _tolerance + '"></div>' +
                        '<div class="col-md-8"><button id="set-tolerance-btn" class="btn btn-primary btn-sm">Set Tolerance</button></div>' +
                        '</div>' +
                        '</div>';
                }

                return container;
            },
            onRemove: function (map) {
                // when removed
            }
        });

        VarSelection = L.Control.extend({
            options: {
                position: 'bottomleft'
            },
            initialize: function (options) {
                // constructor
            },
            onAdd: function (map) {
                var container = L.DomUtil.create('div', 'leaflet-bar leaflet-control leaflet-control-custom');

                container.style.backgroundColor = 'white';
                container.style.width = '240px';
                container.style.height = (30 + 28 * numvars) + 'px';

                let html = '<div style="padding-left: 10px; padding-top: 5px;">';
                html += '<h6>Select Variable</h6>';

                for (let key in varopts) {

                    html += '<div class="radio"><label><input type="radio" id="varRadio" name="varRadio" value="' + key + '"';

                    if (key === varname) {
                        html += 'checked';
                    }

                    if (key === 'runoff') {
                        html += '> Runoff</label></div>';
                    } else if (key === 'subrunoff') {
                        html += '> Lateral Flow</label></div>';
                    } else if (key === 'baseflow') {
                        html += '> Baseflow</label></div>';
                    } else if (key === 'phosphorus') {
                        html += '> Total Phosphorus</label></div>';
                    } else if (key === 'loss') {
                        html += '> Soil Deposition/Loss</label></div>';
                    } else {
                        html += '> ' + key + '</label></div>';
                    }
                }
                html += '</div>';
                container.innerHTML = html;
                return container;
            },
            onRemove: function (map) {
                // when removed
            }
        });

        varSelection = new VarSelection();
        map.addControl(varSelection);

        TitleBox = L.Control.extend({
            options: {
                position: 'bottomright'
            },
            initialize: function (options) {
                // constructor
            },
            onAdd: function (map) {
                var container = L.DomUtil.create('div', 'leaflet-bar leaflet-control leaflet-control-custom');

                container.style.backgroundColor = 'transparent';
                container.style.borderColor = 'transparent';
                container.style.width = '500px';
                container.style.height = '40px';

                container.innerHTML = '<h4 style="text-shadow: -1px -1px 0 #FFF, 1px -1px 0 #FFF, -1px 1px 0 #FFF, 1px 1px 0 #FFF;">' + title + '</h4>';
                return container;
            },
            onRemove: function (map) {
                // when removed
            }
        });
        // titleBox = TitleBox();
        // map.addControl(titleBox);

        $('input[type=radio][name=varRadio]').change(function () {
            varname = this.value;
            tolerance = varopts[varname];
            data;

            prep_render();
            render_legend();
            render();
        });

        polys = {};
        data;
        popup;


        if (ws !== null) {
            for (let w of ws) {
                let runid = w.runid;
                let cfg = w.cfg;
                polys[runid] = {};

                $.get({
                    url: site_prefix + "/runs/" + runid + "/cfg/resources/subcatchments.json",
                    async: false,
                    success: function (response) {
                        polys[runid] = L.geoJSON(response.features, {
                            style: defaultStyle,
                            onEachFeature: function (feature, layer) {
                                layer.on({
                                    click: function click(ev) {
                                        var topaz_id = ev.target.feature.properties.TopazID;
                                        var query_url = site_prefix + "/runs/" + runid + "/cfg/report/sub_summary/" + topaz_id + "/";
                                        $.get({
                                            url: query_url,
                                            success: function success(response) {
                                                if (popup !== undefined) {
                                                    popup.remove();
                                                }
                                                const content =
                                                    '<h5>' + runid + '</h5>' +
                                                    response +
                                                    '<a href="' + site_prefix + '/runs/' + runid + '/' + cfg + '/" target="_blank">View Watershed Run</a>';

                                                popup = L.popup()
                                                    .setLatLng(ev.latlng)
                                                    .setContent(content)
                                                    .openOn(map);

                                                if (display_units !== 'SI') {
                                                    $(".units-m").removeClass("invisible");
                                                    $(".units-ft").addClass("invisible");

                                                    $(".units-ha").removeClass("invisible");
                                                    $(".units-acre").addClass("invisible");
                                                }
                                            },
                                            fail: function fail(error) {
                                                console.log(error);
                                            }
                                        });
                                    }
                                });
                            }
                        });

                        polys[runid].name = response.name;
                        polys[runid].addTo(map);
                        ctrls.addOverlay(polys[runid], runid);
                    },
                    fail: function fail(jqXHR, textStatus, errorThrown) {
                        console.log(textStatus, errorThrown);
                    }
                });
            }

            prep_render();
            render_legend();
            render();
        }
    }
});
</script>
    <style>
        body {
            padding: 0;
            margin: 0;
        }
        html, body, #map {
            height: 100%;
            width: 100%;
        }
    </style>
  </head>
  <body>
       <div id="map"></div>
    <!-- Placed at the end of the document so the pages load faster -->
    <script type="text/javascript" src="{{ url_for('static', filename='js/spin.js') }}"></script>
    <script type="text/javascript" src="{{ url_for('static', filename='js/tinyqueue.js') }}"></script>
    <script type="text/javascript" src="{{ url_for('static', filename='js/polylabel.js') }}"></script>
    <script type="text/javascript" src="{{ url_for('static', filename='js/underscore.js') }}"></script>
    <script type="text/javascript" src="{{ url_for('static', filename='js/colormap.js') }}"></script>
    <script type="text/javascript" src="{{ url_for('static', filename='js/geotiff.js') }}"></script>
    <script type="text/javascript" src="{{ url_for('static', filename='js/plotty.js') }}"></script>
    <script type="text/javascript" src="{{ url_for('static', filename='js/leaflet-spin.js') }}"></script>
    <script type="text/javascript" src="{{ url_for('static', filename='js/leaflet-geotiff.js') }}"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/js/bootstrap.bundle.min.js"
        integrity="sha384-ho+j7jyWK8fNQe+A12Hb8AhRq26LrZ/JpcUGGOn+Y7RsweNrtN/tE3MoK7ZeZDyx" crossorigin="anonymous"></script>
  </body>
</html>
