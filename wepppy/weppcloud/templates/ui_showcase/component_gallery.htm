{% extends "base_pure.htm" %}
{% import "controls/_pure_macros.html" as ui %}

{% block title %}UI Components Showcase{% endblock %}

{% block site_header %}
  {% include 'header/header.htm' %}
{% endblock %}

{% block body %}
  <header class="wc-stack">
    <h1 class="wc-heading__title">UI Component Showcase</h1>
    <p class="wc-text-muted">
      This sandbox illustrates the new Pure.css-aware control shell and field macros.
      Iterate here, then port stable patterns into production controls.
    </p>
  </header>

  <section class="wc-stack">
    <h2>Run Header Fields</h2>
    <p class="wc-text-muted">
      Header macros match the live run header; use them when a control needs inline editing for name/scenario.
    </p>
    <div class="wc-run-header__fields">
      {{ ui.header_text_field(
        "input_name",
        "Project name",
        value=sample.project_name,
        placeholder="Name",
        attrs={
          "oninput": "Project.getInstance().setNameFromInput()",
          "onblur": "Project.getInstance().commitNameFromInput()"
        }
      ) }}
      {{ ui.header_text_field(
        "input_scenario",
        "Scenario",
        value=sample.scenario,
        placeholder="Scenario",
        attrs={
          "oninput": "Project.getInstance().setScenarioFromInput()",
          "onblur": "Project.getInstance().commitScenarioFromInput()"
        }
      ) }}
    </div>
  </section>

  {% call ui.control_shell(
        form_id="ui_showcase_form",
        title="Sample Control",
        description=sample.description,
        meta='<span aria-label="Project name">Project: <strong>{}</strong></span>'.format(sample.project_name)
      ) %}
    {{ ui.text_field("project_name", "Project Name", value=sample.project_name, help="Editable text input example.") }}

    {{ ui.text_field("scenario", "Scenario Label", value=sample.scenario, help="Debounced inputs can hook into Project JS.", error="Scenario label must be unique per project.") }}

    {{ ui.numeric_field(
         "precipitation_mm",
         "Average Annual Precipitation",
         value="812",
         unit_label="mm",
         precision="0.1",
         min="0",
         help="Unit-aware numeric field; precision feeds the unitizer hook.",
         error="Provide a value between 0 and 5000 mm.",
         unit_category="xs-distance",
         unit_name="mm"
       ) }}

    {{ ui.text_field("location", "Location", value=sample.location, help="Standard text field layout remains responsive.") }}

    {{ ui.radio_group(
         "treatment_mode",
         label="Treatment Mode",
         layout="horizontal",
         options=radio_options,
         help="Toggle between production-ready and experimental scenarios.",
         mode_help=radio_mode_help,
         attrs={"data-choice-group": "treatment"},
         error="Select a treatment strategy before launching the run."
       ) }}

    {{ ui.select_field("treatment", "Treatment Mode (Legacy Select)", select_options, selected="baseline", help="Select macro with helper text.") }}

    {{ ui.checkbox_field(
         "readonly_flag",
         "Readonly mode",
         checked=True,
         help="When enabled, backend writes are skipped and inputs display as disabled."
       ) }}

    {{ ui.file_upload(
         "watershed_upload",
         "Watershed GeoJSON",
         accept=".json,.geojson",
         current_filename="south-fork.geojson",
         help="Uploads replace the current watershed shapefile once validated.",
         error="The last upload failed checksum validation."
       ) }}

    {{ ui.textarea_field(
         "notes",
         "Notes",
         rows=4,
         placeholder="Document expected behavior, constraints, and open questions.",
         help="Textarea macro mirrors the text field spacing while supporting helper copy.",
         error="Add at least one sentence so collaborators have context."
       ) }}

    {% call ui.fieldset("Notes", "Use fieldsets for longer free-form content.") %}
      {% set summary_columns = [
        {"key": "parameter", "label": "Parameter"},
        {"key": "value", "label": "Value"},
        {"key": "units", "label": "Units"}
      ] %}
      {{ ui.table_block(summary_columns, summary_rows, caption="Watershed summary metrics") }}

      {{ ui.text_display(
           label="Hydrology Summary",
           content="<p>Peak runoff decreased by <strong>12%</strong> under the mitigation scenario.</p>",
           variant="info",
           actions=[
             '<button type="button" class="pure-button">Download CSV</button>',
             '<button type="button" class="pure-button pure-button-secondary">Copy Link</button>'
           ]
         ) }}
    {% endcall %}

    {% call ui.collapsible_card(
         "Advanced Options",
         description="Optional tuning controls stay tucked away until power users need them."
       ) %}
      {{ ui.numeric_field(
           "precipitation_threshold",
           "Precipitation Threshold",
           value="2.5",
           unit_label="mm/hr",
           precision="0.1",
           help="Minimum hourly precipitation to trigger runoff calculations.",
           unit_category="xs-distance-rate",
           unit_name="mm/hour"
         ) }}
      {{ ui.text_field(
           "comment_token",
           "Comment Tag",
           value="ADV-1001",
           help="Optional marker inserted into run logs for traceability."
         ) }}
      {{ ui.checkbox_field(
           "enable_telemetry",
           "Enable verbose telemetry",
           help="Writes extended metrics to Redis for downstream analytics."
         ) }}
    {% endcall %}

    {{ ui.dynamic_slot("map_slot", help="Controllers inject interactive maps or charts into slots so cards stay balanced.", attrs={"data-slot": "map-preview"}) }}
  {% endcall %}

  <section class="wc-stack">
    <h2>Status &amp; Stacktrace Panels</h2>
    <p class="wc-text-muted">
      Status panels scale from compact control-side logs to tall console views. Stacktrace panels share disclosure styling for error payloads.
    </p>
    <div class="wc-stack">
      {{ ui.status_panel(
           id="status_panel_demo",
           title="Status (compact)",
           meta='<strong>Job</strong>: <span id="status_panel_demo_job">Pending</span>',
           initial="Waiting for updates..."
         ) }}
      {{ ui.status_panel(
           id="status_panel_console",
           title="Status (console)",
           variant="console",
           description="Taller viewport for streaming console pages.",
           actions='<button type="button" class="pure-button pure-button-secondary">Download log</button>',
           footer='<span class="wc-text-muted">Streaming 1,024 messages</span>',
           height="18rem",
           initial="17:03:12 Connected to status channel\n17:03:13 Awaiting first event..."
         ) }}
      {{ ui.stacktrace_panel(
           id="stacktrace_panel_demo",
           summary="Stack trace",
           description="Populated when back-end jobs raise exceptions.",
           empty_state="No stack trace captured."
         ) }}
    </div>
  </section>

  <section class="wc-stack">
    <h2>Control Shell Overrides</h2>
    <p class="wc-text-muted">
      Swap in custom status/stacktrace panels or suppress the summary panel while keeping the shared control layout.
    </p>
    {% call ui.control_shell(
         form_id="override_demo_form",
         title="Console-style Control",
         collapsible=False,
         form_class="pure-form-aligned",
         form_attrs={'novalidate': True},
         status_panel_override=ui.status_panel(
           id="override_status_panel",
           title="Console",
           variant="console",
           description="Status stream with fixed height.",
           log_id="override_status_log",
           height="16rem",
           initial="12:00:00 Connected to demo channel\n12:00:01 Waiting for updates..."
         ),
         summary_panel_override='',
         stacktrace_panel_override=ui.stacktrace_panel(
           id="override_stacktrace_panel",
           summary="Stack trace",
           description="Appears when an exception occurs.",
           empty_state="No stack trace captured."
         )
       ) %}
      <fieldset>
        <div class="pure-control-group">
          <label for="override_input">Job label</label>
          <input id="override_input" type="text" class="pure-input-1" value="Demo job">
        </div>
        <div class="pure-controls">
          <button type="button" class="pure-button pure-button-primary">Submit job</button>
          <button type="button" class="pure-button pure-button-secondary">Reset</button>
        </div>
      </fieldset>
    {% endcall %}
  </section>

  <section class="wc-stack">
    <h2>Unitizer Modal</h2>
    <p class="wc-text-muted">
      Preview the Pure-styled unitizer. Adjust global defaults or override unit selections per category
      without leaving the gallery.
    </p>
    <div>
      <button type="button"
              class="pure-button pure-button-primary"
              data-modal-open="unitizerModalDemo">
        Open Unitizer
      </button>
    </div>
  </section>

  {% with modal_id="unitizerModalDemo", modal_title="Unitizer Preferences (Demo)" %}
    {% include "controls/unitizer_modal.htm" %}
  {% endwith %}
{% endblock %}

{% block script_extras %}
  {{ super() }}
  <script>
    window.__unitizerMap = {{ unitizer_map | tojson }};
    window.site_prefix = window.site_prefix || "";
    window.runid = window.runid || "ui-demo";
    window.config = window.config || "cfg";
  </script>
  <script src="{{ url_for('static', filename='vendor/jquery/jquery.js') }}"></script>
  <script src="{{ url_for('static', filename='js/controllers.js') }}"></script>
  <script>
    (function () {
      "use strict";

      if (window.ModalManager) {
        return;
      }

      var ACTIVE_CLASS = "is-visible";
      var BODY_ACTIVE_CLASS = "wc-modal-open";
      var focusableSelectors = [
        "a[href]",
        "button:not([disabled])",
        "input:not([disabled])",
        "select:not([disabled])",
        "textarea:not([disabled])",
        "[tabindex]:not([tabindex='-1'])"
      ].join(",");

      var activeModal = null;
      var previouslyFocused = null;

      function toElement(target) {
        if (!target) {
          return null;
        }
        if (typeof target === "string") {
          return document.getElementById(target);
        }
        return target;
      }

      function getFocusable(modal) {
        var dialog = modal.querySelector(".wc-modal__dialog") || modal;
        return Array.prototype.slice.call(dialog.querySelectorAll(focusableSelectors));
      }

      function trapFocus(event) {
        if (!activeModal || event.key !== "Tab") {
          return;
        }

        var focusable = getFocusable(activeModal);
        if (focusable.length === 0) {
          event.preventDefault();
          return;
        }

        var first = focusable[0];
        var last = focusable[focusable.length - 1];
        var current = document.activeElement;

        if (event.shiftKey) {
          if (current === first || !activeModal.contains(current)) {
            event.preventDefault();
            last.focus();
          }
        } else if (current === last) {
          event.preventDefault();
          first.focus();
        }
      }

      function onKeyDown(event) {
        if (!activeModal) {
          return;
        }
        if (event.key === "Escape") {
          closeModal(activeModal);
          return;
        }
        trapFocus(event);
      }

      function activateModal(modal) {
        if (activeModal === modal) {
          return;
        }
        if (activeModal) {
          closeModal(activeModal);
        }

        previouslyFocused = document.activeElement;
        activeModal = modal;

        modal.removeAttribute("hidden");
        modal.setAttribute("data-modal-open", "true");
        modal.classList.add(ACTIVE_CLASS);
        document.body.classList.add(BODY_ACTIVE_CLASS);

        var focusable = getFocusable(modal);
        if (focusable.length > 0) {
          focusable[0].focus();
        } else {
          modal.focus({ preventScroll: true });
        }

        document.addEventListener("keydown", onKeyDown, true);
      }

      function deactivateModal(modal) {
        modal.classList.remove(ACTIVE_CLASS);
        modal.removeAttribute("data-modal-open");
        modal.setAttribute("hidden", "hidden");
      }

      function closeModal(modal) {
        var element = toElement(modal);
        if (!element) {
          return;
        }

        deactivateModal(element);

        if (activeModal === element) {
          activeModal = null;
          document.body.classList.remove(BODY_ACTIVE_CLASS);
          document.removeEventListener("keydown", onKeyDown, true);
          if (previouslyFocused && typeof previouslyFocused.focus === "function") {
            previouslyFocused.focus({ preventScroll: true });
          }
          previouslyFocused = null;
        }
      }

      function openModal(modal) {
        var element = toElement(modal);
        if (!element) {
          return;
        }
        activateModal(element);
      }

      function toggleModal(modal) {
        var element = toElement(modal);
        if (!element) {
          return;
        }
        if (element.hasAttribute("data-modal-open")) {
          closeModal(element);
        } else {
          openModal(element);
        }
      }

      function handleOpenClick(event) {
        var trigger = event.target.closest("[data-modal-open]");
        if (!trigger) {
          return;
        }
        event.preventDefault();
        var targetId = trigger.getAttribute("data-modal-open");
        if (targetId) {
          openModal(targetId);
        }
      }

      function handleDismissClick(event) {
        var dismiss = event.target.closest("[data-modal-dismiss]");
        if (!dismiss) {
          return;
        }
        event.preventDefault();
        var modal = dismiss.closest("[data-modal]");
        if (modal) {
          closeModal(modal);
        }
      }

      function handleOverlayClick(event) {
        if (!activeModal) {
          return;
        }
        if (event.target === activeModal) {
          closeModal(activeModal);
        }
      }

      document.addEventListener("click", handleOpenClick);
      document.addEventListener("click", handleDismissClick);
      document.addEventListener("mousedown", handleOverlayClick);

      window.ModalManager = {
        open: function (target) {
          openModal(target);
        },
        close: function (target) {
          closeModal(target);
        },
        toggle: function (target) {
          toggleModal(target);
        },
        get activeModal() {
          return activeModal;
        },
      };
    })();
  </script>
  <script>
    (function () {
      "use strict";

      var originalPost = $.post;
      $.post = function () {
        var args = Array.prototype.slice.call(arguments);
        var options = args[0];
        var url = typeof options === "string" ? options : options && options.url;
        if (url && url.indexOf("set_unit_preferences") !== -1) {
          var deferred = $.Deferred();
          var response = { Success: true };
          if (typeof options === "object" && typeof options.success === "function") {
            options.success(response);
          } else if (typeof args[2] === "function") {
            args[2](response);
          }
          console.log("[UI Showcase] Simulated POST", url, options && options.data ? options.data : args[1]);
          deferred.resolve(response);
          return deferred.promise();
        }
        return originalPost.apply($, args);
      };

      document.addEventListener('DOMContentLoaded', function () {
        UnitizerClient.ready()
          .then(function () {
            var project = Project.getInstance();
            console.log('[UI Showcase] Project ready', project);
            project.set_preferred_units(document);
          })
          .catch(function (error) {
            console.error('Unitizer demo failed to initialise', error);
          });
      });
    })();
  </script>
{% endblock %}
