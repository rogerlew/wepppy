<script type="text/javascript">
    "use strict";

    var site_prefix = "{{ site_prefix }}";
    var runid = "{{ ron.runid }}";
    var config = "{{ ron.config_stem }}";
    var ispoweruser = {{ current_user.has_role('PowerUser') | tojson }};
    var WEPP_channel_critical_shear = null;

    var error = null;

    var cellsize = {{ ron.cellsize }};

    var readonly = {{ ron.readonly | tojson }};

    function window_resize() {
        var _map = $('#mapid');
        var w = _map.parent().width();
        _map.css('min-height', w);
        _map.css('height', w);
        _map.css('width', w);

        Map.getInstance().invalidateSize();
    };

    function upload_cover_transform() {
        var fileInput = document.getElementById('input_upload_cover_transform');
        var file = fileInput.files[0]; // Get the file from the input

        if (file) { // Check if any file is selected
            var formData = new FormData();
            formData.append('input_upload_cover_transform', file); // Append the file

            $.post({
                url: "tasks/upload_cover_transform/", // Ensure this URL is correct
                data: formData,
                contentType: false,
                cache: false,
                processData: false,
                success: function (response) {
                    console.log("upload successful");
                },
                error: function (jqXHR) {
                    console.log(jqXHR.responseJSON);
                },
                fail: function (jqXHR, textStatus, errorThrown) {
                    console.log(textStatus);
                }
            });
        } else {
            console.log("No file selected.");
        }
    };

    //jQuery.readyException = function( e ) {
    //  console.error( e );
    //  error = e;
    //};

function onReady() {
    "use strict";
    // globals for JSLint: $, L, polylabel, setTimeout, console

    /*
        * Controller Singletons
        * =====================
        */



    var project = Project.getInstance();
    var team = Team.getInstance();
    var map = Map.getInstance();
    var channel_ctrl = ChannelDelineation.getInstance();
    var outlet = Outlet.getInstance();
    var sub_ctrl = SubcatchmentDelineation.getInstance();
    var landuse = Landuse.getInstance();
    var lc_modify = LanduseModify.getInstance();
    var soil = Soil.getInstance();
    var climate = Climate.getInstance();
    var wepp = Wepp.getInstance();
    var observed = Observed.getInstance();
    var debris_flow = DebrisFlow.getInstance();
    var ash = Ash.getInstance();
    var rap_ts = RAP_TS.getInstance();
    var disturbed = Disturbed.getInstance();
    var omni = Omni.getInstance();
    var dss_export = DssExport.getInstance();

    initUnitConverters(document);
    team.hideStacktrace();
    channel_ctrl.hideStacktrace();
    outlet.hideStacktrace();
    sub_ctrl.hideStacktrace();
    landuse.hideStacktrace();
    lc_modify.hideStacktrace();
    soil.hideStacktrace();
    climate.hideStacktrace();
    wepp.hideStacktrace();
    dss_export.hideStacktrace();


    try {
        observed.hideStacktrace();
    } catch (e) { }

    try {
        debris_flow.hideStacktrace();
    } catch (e) { }

    try {
        ash.hideStacktrace();
    } catch (e) { }

    try {
        rap_ts.hideStacktrace();
    } catch (e) { }

    try {
        omni.hideStacktrace();
    } catch (e) { }

    try {
        dss_export.hideStacktrace();
    } catch (e) { }


    /*
     * Project Initialization
     * ======================
     */

    /*
     * Map Initialization
     * ==================
     */

    //
    // Bindingss
    //

    // emulate click if user hits enter while in the entry field
    //
    // Initial Configuration
    //
    map.setView({{ ron.center0 }}, {{ ron.zoom0 }});

    // call map.onMapChange to update mapStatus
    map.onMapChange();

    if ({{ (ron.boundary != None) | tojson }}) {
        var boundary = null;
        $.get({
            url: "{{ site_prefix }}/{{ ron.boundary }}",
            cache: false,
            success: function success(response) {
                boundary = L.geoJSON(response, {
                    style: {
                        color: "#FF0000",
                        opacity: 1,
                        weight: 2,
                        fillColor: "#FFFFFF",
                        fillOpacity: 0.0
                    }
                });
                boundary.addTo(map);
            }
        });
    }


    {% if 'skid_trails' in ron.mods %}
    if ({{ (skid_trails.skid_trails_map != None) | tojson }}) {
        var skid_trails_map = null;
        $.get({
            url: "https://dev.wepp.cloud/weppcloud/static/mods/north_star_fire/Skid_segments.geojson",
            dataType: "json",  // Add this line
            cache: false,
            success: function success(response) {
                skid_trails_map = L.geoJSON(response, {
                    style: {
                        color: "#FF0000",
                        opacity: 1,
                        weight: 2,
                        fillColor: "#FFFFFF",
                        fillOpacity: 0.0
                    }
                });
                skid_trails_map.addTo(map);
            }
        });
    }

    {% endif %}

    {% if 'baer' in ron.mods or 'disturbed' in ron.mods %}
    /*
     * Baer mod
     * ======================
     */

    var baer = Baer.getInstance();
    baer.hideStacktrace();

    baer.form.on("SBS_UPLOAD_TASK_COMPLETE", function () {
        setTimeout(baer.show_sbs, 100);
        setTimeout(baer.load_modify_class, 100);
    });

    baer.form.on("SBS_REMOVE_TASK_COMPLETE", function () {
    });

    baer.form.on("MODIFY_BURN_CLASS_TASK_COMPLETE", function () {
        setTimeout(baer.show_sbs, 100);
        setTimeout(baer.load_modify_class, 100);
    });

    if ({{ ron.has_sbs | tojson }})
    {
        baer.show_sbs();
        baer.load_modify_class();
    }

    $("#sbs_mode0").click();

    {% endif %}

    /*
     * Channel Initialization
     * ======================
     */

    //
    // Bindings
    //
    // load the hidden inputs on channel form
    channel_ctrl.onMapChange();

    //
    // Initial Configuration
    //
    channel_ctrl.set_rq_job_id(channel_ctrl, {{ rq_job_ids.get("fetch_dem_and_build_channels_rq") | tojson }});

    channel_ctrl.zoom_min = 11;
    if ({{ watershed.has_channels | tojson }}) {
        channel_ctrl.report();
    }
    if ({{ watershed.has_channels | tojson }} && !({{ watershed.has_subcatchments | tojson }})) {
        channel_ctrl.show();
    }

    /*
     * Outlet Initialization
     * =====================
     */

    //
    // Bindings
    //
    // Bind Use Cursor button to the setCursorSelection
    $("#btn_set_outlet_cursor").click(function () {
        outlet.setCursorSelection(!outlet.cursorSelectionOn);
    });

    // Text Entry Control
    $("#btn_set_outlet_entry").click(function () {
        var loc = $("#input_set_outlet_entry").val().split(",");
        var lng = parseFloat(loc[0]);
        var lat = parseFloat(loc[1]);
        var ev = { latlng: L.latLng(lat, lng) };
        outlet.set_outlet(ev);
    });

    // Bind radio to the set outlet mode on change
    $("[name='set_outlet_mode']").change(function () {
        var mode = parseInt($("input[name='set_outlet_mode']:checked").val(), 10);
        outlet.setMode(mode);
    });

    //
    // Outlet Event Bindings
    //
    outlet.set_rq_job_id(outlet, {{ rq_job_ids.get("set_outlet_rq") | tojson }});

    // Load outlet from server
    if ({{ watershed.has_outlet | tojson }}) {
        outlet.triggerEvent('SET_OUTLET_TASK_COMPLETED');
    }

    outlet.setMode(parseInt($("input[name='set_outlet_mode']:checked").val(), 10));

    /*
     * Subcatchment Initialization
     * ===========================
     */

    //
    // Bindings
    //
    sub_ctrl.initializeColorMapControls();

    // load subcatchments
    sub_ctrl.set_rq_job_id(sub_ctrl, {{ rq_job_ids.get("build_subcatchments_and_abstract_watershed_rq") | tojson }});

    if ({{ watershed.has_subcatchments | tojson }}) {
        sub_ctrl.show();
        sub_ctrl.report();
        channel_ctrl.show();
        sub_ctrl.enableColorMap("slp_asp");
    }

    {% if 'rangeland_cover' in ron.mods %}
    /*
     * Rangeland Cover Initialization
     * ===============================
     */

    var rangeland_cover = RangelandCover.getInstance();
    rangeland_cover.hideStacktrace();


    var rangeland_cover_modify = RangelandCoverModify.getInstance();
    rangeland_cover_modify.hideStacktrace();

    //
    // Bindings
    //
    $("[name='rangeland_cover_mode']").change(function () {
        rangeland_cover.setMode();
    });
    $("[name='rangeland_cover_mode']").trigger("change");

    $("#rangeland_cover_single_selection").on("change", function () {
        rangeland_cover.setMode();
    });

    $("#btn_build_rangeland_cover").click(rangeland_cover.build);

    if ({{ rangeland_cover.has_covers | tojson }}) {
        rangeland_cover.report();
        sub_ctrl.enableColorMap("rangeland_cover");
    }

    /*
     * Modify RangelandCover Initialization
     * ======================
     */

    //
    // Bindings
    //
    $("#checkbox_modify_rangeland_cover").on("change", function () {
        rangeland_cover_modify.toggle();
    });


    {% endif %}

    /*
     * Landuse Initialization
     * ======================
     */

    //
    // Bindings
    //
    $("[name='landuse_mode']").change(function () {
        landuse.setMode();
    });

    $("#landuse_single_selection").on("change", function () {
        landuse.setMode();
    });

    //
    // Initial Configuration
    //
    landuse.set_rq_job_id(landuse, {{ rq_job_ids.get("build_landuse_rq") | tojson }});

    // load landuse
    if ({{ landuse.has_landuse | tojson }} ) {
        landuse.triggerEvent('LANDUSE_BUILD_TASK_COMPLETED');
    }

    /*
     * Modify Landuse Initialization
     * ======================
     */

    //
    // Bindings
    //
    $("#checkbox_modify_landuse").on("change", function () {
        lc_modify.toggle();
    });


    /*
     * Soil Initialization
     * ======================
     */

    //
    // Bindings
    //
    $("[name='soil_mode']").change(function () {
        soil.setMode();
    });

    $("#soil_single_selection").on("input", function () {
        soil.setMode();
    });

    $("#soil_single_dbselection").on("change", function () {
        soil.setMode();
    });

    //
    // Initial Configuration
    //
    soil.set_rq_job_id(soil, {{ rq_job_ids.get("build_soils_rq") | tojson }});

    soil.restore({{ soils.mode | int }});

    if ({{ (soils.single_dbselection != none) | tojson }})
    {
        $('#soil_single_dbselection').val('{{ soils.single_dbselection }}').prop('selected', true);
    }
    // load soil
    if ({{ soils.has_soils | tojson }} ) {
        soil.triggerEvent('SOILS_BUILD_TASK_COMPLETED');
    }

    /*
     * Climate Initialization
     * ======================
     */

    //
    // Bindings
    //
    // Bind radio to the set outlet mode on change
    $("[name='climate_build_mode']").change(function () {
        var mode = parseInt($("input[name='climate_build_mode']:checked").val(), 10);
        climate.setBuildMode(mode);
    });

    $("[name='climate_mode']").change(function () {
        climate.setMode();
    });

    $("[name='climate_spatialmode']").change(function () {
        climate.setSpatialMode();
    });

    $("[name='climatestation_mode']").change(function () {
        climate.setStationMode();
    });

    $("#climate_station_selection").on("change", function () {
        climate.setStation();
    });

    function togglePrecipScalingControls() {
        var mode = $('input[name="precip_scaling_mode"]:checked').val();
        // Hide all control divs first
        $('#climate_precipscaling_mode1_controls, #climate_precipscaling_mode2_controls, #climate_precipscaling_mode3_controls, #climate_precipscaling_mode4_controls').hide();

        // Show the relevant control div if mode is not "No Scaling"
        if (mode === "1") {
            $('#climate_precipscaling_mode1_controls').show();
        } else if (mode === "2") {
            $('#climate_precipscaling_mode2_controls').show();
        } else if (mode === "3") {
            $('#climate_precipscaling_mode3_controls').show();
        } else if (mode === "4") {
            $('#climate_precipscaling_mode4_controls').show();
        }
    }

    // Bind change event to radio buttons
    $('input[name="precip_scaling_mode"]').on('change', togglePrecipScalingControls);

    // Initialize on page load
    togglePrecipScalingControls();

    //
    // Initial Configuration
    //
    climate.set_rq_job_id(climate, {{ rq_job_ids.get("build_climate_rq") | tojson }});

    observed.hideControl();
    climate.showHideControls({{ climate.climate_mode | int }});

    // load climate
    if ({{ climate.has_station | tojson }} ) {
        climate.refreshStationSelection();
        climate.viewStationMonthlies();
    }

    if ({{ climate.has_climate | tojson }} ) {
        climate.report();
    }

    if ({{ climate.has_observed | tojson }} ||
        {{ observed.results is not none | tojson }}) {
        observed.showControl();
    }

    climate.setBuildMode(parseInt($("input[name='climate_build_mode']:checked").val(), 10));


    //
    // Single Storm Unitization
    //
    /*
    * Wepp Initialization
    * ======================
    */

    //
    // Bindings
    //
    $("[name='wepp_mode']").change(function () {
        wepp.setMode();
    });

    $("#wepp_single_selection").on("change", function () {
        wepp.setMode();
    });

    {% if 'omni' in ron.mods and omni %}

    omni.load_scenarios_from_backend();

    if ({{ omni.has_ran_scenarios | tojson }}) {
        omni.report_scenarios()
    }

    {% endif %}

    {% if 'rhem' in ron.mods %}
    /*
    * Rhem Initialization
    * ======================
    */

    var rhem = Rhem.getInstance();
    rhem.hideStacktrace();

    //
    // Bindings
    //
    rhem.set_rq_job_id(rhem, {{ rq_job_ids.get("run_rhem_rq") | tojson }});

    if ({{ rhem.has_run | tojson }} ) {
        rhem.report();
    }

    {% endif %}

    //
    // Initial Configuration
    //
    wepp.set_rq_job_id(wepp, {{ rq_job_ids.get("run_wepp_rq") | tojson }});

    // show report if wepp has run
    if ({{ wepp.has_run | tojson }} ) {
        wepp.report();
    }

    // show report if wepp has run
    if ({{ observed.has_results | tojson }} ) {
        observed.report();
    }

    {% if 'ash' in ron.mods %}
    ash.set_rq_job_id(ash, {{ rq_job_ids.get("run_ash_rq") | tojson }});

    $("[name='ash_depth_mode']").change(function () {
        ash.setAshDepthMode();
    });

    // show report if ash model has run
    if ({{ ron.has_ash_results | tojson }} ) {
        ash.report();
    }

    ash.setAshDepthMode({{ ash.ash_depth_mode }});

    {% endif %}

    rap_ts.set_rq_job_id(rap_ts, {{ rq_job_ids.get("fetch_and_analyze_rap_ts_rq") | tojson }});


    debris_flow.set_rq_job_id(debris_flow, {{ rq_job_ids.get("run_debris_flow_rq") | tojson }});

    project.set_readonly_controls({{ ron.readonly | tojson }})

    /*
     * Team Initialization
     * ======================
     */

    //
    // Bindings
    //
    team.form.on("TEAM_ADDUSER_TASK_COMPLETED", function () {
        team.report();
    });

    team.form.on("TEAM_REMOVEUSER_TASK_COMPLETED", function () {
        team.report();
    });

    // show report if wepp has run
    if ({{ user.is_authenticated | tojson }} ) {
        team.report();
    }

    /*
     * Map Event Binding
     * =================
     */

    map.on("click", function (ev) {
        outlet.setClickHandler(ev);
        // add additional events here
    });

    landuse.restore({{ landuse.mode | int }}, {{ landuse.single_selection | int }});

    dss_export.setMode({{ wepp.dss_export_mode | int }});

    if ({{ wepp.has_dss_zip | tojson }} ) {
        dss_export.report();
    }

    $(function () {
        var navSelector = "#toc";
        var $myNav = $(navSelector);
        Toc.init($myNav);
    });

    function computeScrollOffset() {
        var header = document.querySelector('header .navbar');
        if (header) {
            return Math.ceil(header.getBoundingClientRect().height) + 12;
        }
        var cssOffset = parseInt(getComputedStyle(document.documentElement)
            .getPropertyValue('--project-header-offset'), 10);
        if (Number.isNaN(cssOffset)) {
            cssOffset = 72;
        }
        return cssOffset + 12;
    }

    function scrollToSection(el) {
        if (!el) {
            return;
        }
        var offset = computeScrollOffset();
        var targetY = window.pageYOffset + el.getBoundingClientRect().top - offset;
        window.scrollTo({ top: targetY, behavior: 'smooth' });
    }

    $('#toc').on('click', 'a.nav-link', function (event) {
        var href = $(this).attr('href');
        if (!href || href.charAt(0) !== '#') {
            return;
        }
        var $target = $(href);
        if ($target.length) {
            event.preventDefault();
            scrollToSection($target[0]);
        }
    });


}$(document).ready(onReady);

    $(window).on('load', function () {
        $(window).on('resize', window_resize);
        setTimeout(function () {
            window_resize();
        }, 100);

        initPreflight("{{run_id}}");
        {% if 'dss_export' not in ron.mods %}
        // Ensure this runs after all other initialization
        setTimeout(function () {
            // Check if DssExport instance exists before trying to hide it
            var dssExport = DssExport.getInstance();
            if (dssExport && typeof dssExport.hide === 'function') {
                dssExport.hide();
                console.log("DssExport component hidden");
            }
        }, 300);
        {% endif %}

        // get the preferred units and set the unitizer preference
        var pref = $("input[name='uni_main_selector']:checked").val();
        pref = parseInt(pref, 10);
        setGlobalUnitizerPreference(pref);
        Project.getInstance().unitChangeEvent();

    });
</script>
