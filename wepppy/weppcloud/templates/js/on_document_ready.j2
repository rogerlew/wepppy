<script  type="text/javascript">
"use strict";

var site_prefix = "{{ site_prefix }}";
var runid = "{{ ron.runid }}";
var config = "{{ ron.config_stem }}";
var ispoweruser = {{ current_user.has_role('PowerUser') | tojson }};
var WEPP_channel_critical_shear = null;

var error = null;

var cellsize = {{ron.cellsize}};

var readonly = {{ ron.readonly | tojson }};

function window_resize() {
    var _map = $('#mapid');
    var w = _map.parent().width();
    _map.css('min-height', w);
    _map.css('height', w);
    _map.css('width', w);

    Map.getInstance().invalidateSize();
};


function debounceButton(buttonId, lockImageId, onclickCall) {
    const button = document.getElementById(buttonId);
    const lockImage = document.getElementById(lockImageId);

    return function() {
        // Disable the button and show the lock image
        button.disabled = true;
        lockImage.style.display = 'inline';

        // Run the original function if provided
        if (onclickCall && typeof onclickCall === 'function') {
            onclickCall();
        }

        // Re-enable the button and hide the lock image after 5 seconds
        setTimeout(() => {
            button.disabled = false;
            lockImage.style.display = 'none';
        }, 5000);
    };
}

function upload_cover_transform() {
    var fileInput = document.getElementById('input_upload_cover_transform');
    var file = fileInput.files[0]; // Get the file from the input

    if (file) { // Check if any file is selected
        var formData = new FormData();
        formData.append('input_upload_cover_transform', file); // Append the file

        $.post({
            url: "tasks/upload_cover_transform/", // Ensure this URL is correct
            data: formData,
            contentType: false,
            cache: false,
            processData: false,
            success: function (response) {
                console.log("upload successful");
            },
            error: function (jqXHR) {
                console.log(jqXHR.responseJSON);
            },
            fail: function (jqXHR, textStatus, errorThrown) {
                console.log(textStatus);
            }
        });
    } else {
        console.log("No file selected.");
    }
};

//jQuery.readyException = function( e ) {
//  console.error( e );
//  error = e;
//};

function onReady() {
    "use strict";
    // globals for JSLint: $, L, polylabel, setTimeout, console

    /*
     * Controller Singletons
     * =====================
     */



    var project = Project.getInstance();
    var team = Team.getInstance();
    var map = Map.getInstance();
    var channel_ctrl = ChannelDelineation.getInstance();
    var outlet = Outlet.getInstance();
    var sub_ctrl = SubcatchmentDelineation.getInstance();
    var landuse = Landuse.getInstance();
    var lc_modify = LanduseModify.getInstance();
    var soil = Soil.getInstance();
    var climate = Climate.getInstance();
    var wepp = Wepp.getInstance();
    var observed = Observed.getInstance();
    var debris_flow = DebrisFlow.getInstance();
    var ash = Ash.getInstance();
    var rap_ts = RAP_TS.getInstance();
    var disturbed = Disturbed.getInstance();


    team.hideStacktrace();
    channel_ctrl.hideStacktrace();
    outlet.hideStacktrace();
    sub_ctrl.hideStacktrace();
    landuse.hideStacktrace();
    lc_modify.hideStacktrace();
    soil.hideStacktrace();
    climate.hideStacktrace();
    wepp.hideStacktrace();


    // kick off websocket clients if the nodb is locked. Likely building or running is in progress

    if ({{ (watershed.islocked()) | tojson }}) {
        sub_ctrl.ws_client.connect();
    }
    
    if ({{ (landuse.islocked()) | tojson }}) {
        landuse.ws_client.connect();
    }

    if ({{ (soils.islocked()) | tojson }}) {
        soil.ws_client.connect();
    }

    if ({{ (climate.islocked()) | tojson }}) {
        climate.ws_client.connect();
    }

    if ({{ (wepp.islocked()) | tojson }}) {
        wepp.ws_client.connect();
    }

    try {
        observed.hideStacktrace();
    } catch (e) { }

    try {
        debris_flow.hideStacktrace();
    } catch (e) { }

    try {
        ash.hideStacktrace();
    } catch (e) { }

    try {
        rap_ts.hideStacktrace();
    } catch (e) { }


    /*
     * Project Initialization
     * ======================
     */

    //
    // Bindings
    //
    $("#input_name").keyup(function (event) {
        if (event.keyCode === 13) {
            $("#btn_setname").click();
        }
    });

    $("#btn_setname").click(function () {
        var name = $("#input_name").val();
        project.setName(name);
    });

    $("#input_scenario").keyup(function (event) {
        if (event.keyCode === 13) {
            $("#btn_setscenario").click();
        }
    });

    $("#btn_setscenario").click(function () {
        var scenario = $("#input_scenario").val();
        project.setScenario(scenario);
    });

    //
    // Units
    //

    $("[name^=unitizer_]").change(function () {
        project.unitChangeEvent();
    });

    $("[name=uni_main_selector]").change(function () {
        var pref = $("input[name='uni_main_selector']:checked").val();
        pref = parseInt(pref, 10);

        // this lives in the controller/unitizer.js template
        // so it can be generated dynamically
        setGlobalUnitizerPreference(pref);

        // sync with server
        project.unitChangeEvent();
    });

    /*
     * Map Initialization
     * ==================
     */

    //
    // Bindingss
    //

    // emulate click if user hits enter while in the entry field
    $("#input_centerloc").keyup(function (event) {
        if (event.keyCode === 13) {
            $("#btn_setloc").click();
        }
    });

    $("#btn_setloc").click(function () {
        var input = $("#input_centerloc").val();

        // Remove unwanted characters: a-z, A-Z, and specified special characters
        var sanitizedInput = input.replace(/[a-zA-Z{}[\]\\|\/<>;:]/g, '');

        // Split the sanitized input by any sequence of spaces or commas
        var loc = sanitizedInput.split(/[\s,]+/);

        var lon = parseFloat(loc[0]);
        var lat = parseFloat(loc[1]);

        var zoom = map.getZoom();
        if (loc.length === 3) {
            zoom = parseInt(loc[2], 10);
        }

        map.flyTo([lat, lon], zoom);
    });


    /* requires https
    $("#btn_currentloc").click(function (){
        console.log('btn_currentloc');
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function () {
                map.flyTo([position.coords.latitude,
                           position.coords.longitude], 12);
            });
        } else {
            alert("Geolocation is not supported by this browser.");
        }
    });
    */

    //
    // Initial Configuration
    //
    map.setView({{ ron.center0 }}, {{ ron.zoom0 }});

    // call map.onMapChange to update mapStatus
    map.onMapChange();

    if ({{ (ron.boundary != None) | tojson }}) {
        var boundary = null;
        $.get({
            url: "{{ site_prefix }}/{{ ron.boundary }}",
            cache: false,
            success: function success(response) {
                boundary = L.geoJSON(response, {
                    style: {
                        color: "#FF0000",
                        opacity: 1,
                        weight: 2,
                        fillColor: "#FFFFFF",
                        fillOpacity: 0.0
                    }
                });
                boundary.addTo(map);
            }
        });
    }


    {% if 'skid_trails' in ron.mods %}
        if ({{ (skid_trails.skid_trails_map != None) | tojson }}) {
        var skid_trails_map = null;
        $.get({
            url: "https://dev.wepp.cloud/weppcloud/static/mods/north_star_fire/Skid_segments.geojson",
            dataType: "json",  // Add this line
            cache: false,
            success: function success(response) {
                skid_trails_map = L.geoJSON(response, {
                    style: {
                        color: "#FF0000",
                        opacity: 1,
                        weight: 2,
                        fillColor: "#FFFFFF",
                        fillOpacity: 0.0
                    }
                });
                skid_trails_map.addTo(map);
            }
        });
    }

    {% endif %}

    {% if 'baer' in ron.mods or 'disturbed' in ron.mods %}
    /*
     * Baer mod
     * ======================
     */

    var baer = Baer.getInstance();
    baer.hideStacktrace();

    baer.form.on("SBS_UPLOAD_TASK_COMPLETE", function () {
        setTimeout(baer.show_sbs, 100);
        setTimeout(baer.load_modify_class, 100);
    });

    baer.form.on("SBS_REMOVE_TASK_COMPLETE", function () {
    });

    baer.form.on("MODIFY_BURN_CLASS_TASK_COMPLETE", function () {
        setTimeout(baer.show_sbs, 100);
        setTimeout(baer.load_modify_class, 100);
    });

    if ({{ ron.has_sbs | tojson}})
    {
        baer.show_sbs();
        baer.load_modify_class();
    }

    $("#sbs_mode0").click();

    {% endif %}

    /*
     * Channel Initialization
     * ======================
     */

    //
    // Bindings
    //
    var input_mcl = $("#input_mcl");
    var input_mcl_en = $("#input_mcl_en");
    var input_csa = $("#input_csa");
    var input_csa_en = $("#input_csa_en");

    input_mcl.on("input", function () {
        input_mcl_en.val(parseFloat(input_mcl.val()) * 3.28084 );
    });

    input_mcl_en.on("input", function () {
        input_mcl.val(parseFloat(input_mcl_en.val()) / 3.28084 );
    });

    input_csa.on("input", function () {
        input_csa_en.val(parseFloat(input_csa.val()) * 2.47105 );
    });

    input_csa_en.on("input", function () {
        input_csa.val(parseFloat(input_csa_en.val()) / 2.47105 );
    });

    // Event handler for #btn_build_channels
    $('#btn_build_channels').on('click', function(event) {
        // Prevent the default behavior of the button
        event.preventDefault();

        // Get the values of the input fields and convert them to integers
        var mclValue = parseFloat($('#input_mcl').val());
        var csaValue = parseFloat($('#input_csa').val());

        // Check the values
        if (mclValue > 100 || csaValue > 10) {
            // If the values are not in the desired range, show a confirmation dialog
            var result = confirm("Model has been validated with MCL less than 100 m and CSA less than 10 ha. Are you sure you want to continue?");

            // If user clicked "Cancel" in the confirmation dialog
            if (!result) {
                // Stop here and don't call the build function
                return;
            }
        }

        // If everything is fine, or user confirmed, then call channel_ctrl.build
        channel_ctrl.build();
    });


    // Event handler for #btn_build_channels
    $('#btn_build_channels_en').on('click', function(event) {
        // Prevent the default behavior of the button
        event.preventDefault();

        // Get the values of the input fields and convert them to integers
        var mclValue = parseFloat($('#input_mcl_en').val());
        var csaValue = parseFloat($('#input_csa_en').val());

        // Check the values
        if (mclValue > 330 || csaValue > 25) {
            // If the values are not in the desired range, show a confirmation dialog
            var result = confirm("Model has been validated with MCL less than 330 ft and CSA less than 25 acres. Are you sure you want to continue?");

            // If user clicked "Cancel" in the confirmation dialog
            if (!result) {
                // Stop here and don't call the build function
                return;
            }
        }

        // If everything is fine, or user confirmed, then call channel_ctrl.build
        channel_ctrl.build();
    });

    //
    // Channel Event Handling
    //

    channel_ctrl.form.on("BUILD_CHANNELS_TASK_COMPLETED", function () {
        channel_ctrl.ws_client.disconnect();
        channel_ctrl.show();
        channel_ctrl.report();
    });

    // load the hidden inputs on channel form
    channel_ctrl.onMapChange();

    //
    // Initial Configuration
    //
    channel_ctrl.set_rq_job_id(channel_ctrl, {{ rq_job_ids.get("fetch_dem_and_build_channels_rq") | tojson }});

    channel_ctrl.zoom_min = 11;
    if ({{ watershed.has_channels | tojson }}) {
        channel_ctrl.report();
    }
    if ({{ watershed.has_channels | tojson }} && !({{ watershed.has_subcatchments | tojson }})) {
       channel_ctrl.show();
    }

    /*
     * Outlet Initialization
     * =====================
     */

    //
    // Bindings
    //
    // Bind Use Cursor button to the setCursorSelection
    $("#btn_set_outlet_cursor").click(function () {
        outlet.setCursorSelection(!outlet.cursorSelectionOn);
    });

    // Text Entry Control
    $("#btn_set_outlet_entry").click(function () {
        var loc = $("#input_set_outlet_entry").val().split(",");
        var lng = parseFloat(loc[0]);
        var lat = parseFloat(loc[1]);
        var ev = { latlng: L.latLng(lat, lng) };
        outlet.set_outlet(ev);
    });

    // Bind radio to the set outlet mode on change
    $("[name='set_outlet_mode']").change(function () {
        var mode = parseInt($("input[name='set_outlet_mode']:checked").val(), 10);
        outlet.setMode(mode);
    });

    //
    // Outlet Event Bindings
    //
    outlet.set_rq_job_id(outlet, {{ rq_job_ids.get("set_outlet_rq") | tojson }});

    outlet.form.on("SET_OUTLET_TASK_COMPLETED", function () {
        outlet.ws_client.disconnect();
        outlet.popup.remove();
        outlet.show();
    });

    // Load outlet from server
    if ({{ watershed.has_outlet | tojson }}) {
        outlet.form.trigger("SET_OUTLET_TASK_COMPLETED");
    }

    outlet.setMode(parseInt($("input[name='set_outlet_mode']:checked").val(), 10));

    /*
     * Subcatchment Initialization
     * ===========================
     */

    //
    // Bindings
    //
    var input_pkcsa = $("#input_pkcsa");
    var input_pkcsa_en = $("#input_pkcsa_en");

    input_pkcsa.on("input", function () {
        var v = input_pkcsa.val();
        if (v !== 'auto') {
            input_pkcsa_en.val(parseFloat(v) * 2.47105);
        }
    });

    input_pkcsa_en.on("input", function () {
        console.log('on input_pkcsa_en change.');
        var v = input_pkcsa_en.val();
        if (v !== 'auto') {
            input_pkcsa.val(parseFloat(v) / 2.47105);
        }
    });

    // Bind radio to change subcatchment appearance
    // radios live in the map.htm template
    $("[name='sub_cmap_radio']").change(function () {
        sub_ctrl.setColorMap($("input[name='sub_cmap_radio']:checked").val());
    });

    {% if 'rap' in ron.mods %}
    // Bind radio to change subcatchment appearance
    // radios live in the map.htm template
    $("[name='sub_cmap_radio']").change(function () {
        sub_ctrl.setColorMap("landuse_cover");
    });
    {% endif %}

    {% if 'rhem' not in ron.mods %}
    // Bind radio to change subcatchment appearance
    // radios live in the map.htm template
    $("[name='wepp_sub_cmap_radio']").change(function () {
        sub_ctrl.setColorMap($("input[name='wepp_sub_cmap_radio']:checked").val());
    });
    {% else %}
    // Bind radio to change subcatchment appearance
    // radios live in the map.htm template
    $("[name='rhem_sub_cmap_radio']").change(function () {
        sub_ctrl.setColorMap($("input[name='rhem_sub_cmap_radio']:checked").val());
    });
    {% endif %}

    //
    // Subcatchment Event Bindings
    //
    sub_ctrl.form.on("BUILD_SUBCATCHMENTS_TASK_COMPLETED", function () {
        sub_ctrl.show();
        channel_ctrl.show();
    });

    sub_ctrl.form.on("WATERSHED_ABSTRACTION_TASK_COMPLETED", function () {
        sub_ctrl.ws_client.disconnect();
        sub_ctrl.report();
        sub_ctrl.enableColorMap("slp_asp");
        wepp.updatePhosphorus();
    });


    {% if 'rap' in ron.mods %}
        // Cover
        render_legend("viridis", "landuse_sub_cmap_canvas_cover");
        sub_ctrl.renderCover();
    {% endif %}
    
    //
    // Hillslopes Visualizations
    {% if 'rhem' not in ron.mods %}
        // Phosphorus
        render_legend("viridis", "wepp_sub_cmap_canvas_phosphorus");
        sub_ctrl.renderPhosphorus();
        $('#wepp_sub_cmap_range_phosphorus').on('input', function () {
            sub_ctrl.renderPhosphorus();
        });

        // Runoff
        render_legend("winter", "wepp_sub_cmap_canvas_runoff");
        sub_ctrl.renderRunoff();
        $('#wepp_sub_cmap_range_runoff').on('input', function () {
            sub_ctrl.renderRunoff();
        });

        // Loss
        render_legend("electric", "wepp_sub_cmap_canvas_loss");
        sub_ctrl.renderLoss();
        $('#wepp_sub_cmap_range_loss').on('input', function () {
            sub_ctrl.renderLoss();
        });


        //
        // Gridded

        // Soil Deposition / Loss
        render_legend("electric", "wepp_grd_cmap_canvas_loss");
        sub_ctrl.updateGriddedLoss();

        $('#wepp_grd_cmap_range_loss').on('input', function () {
            sub_ctrl.updateGriddedLoss();
        });
    {% else %}

        // Runoff
        render_legend("winter", "rhem_sub_cmap_canvas_runoff");
        sub_ctrl.renderRunoff();
        $('#rhem_sub_cmap_range_runoff').on('input', function () {
            sub_ctrl.renderRhemRunoff();
        });

        // Yield
        render_legend("viridis", "rhem_sub_cmap_canvas_sed_yield");
        sub_ctrl.renderPhosphorus();
        $('#rhem_sub_cmap_range_sed_yield').on('input', function () {
            sub_ctrl.renderRhemSedYield();
        });

        // Loss
        render_legend("electric", "rhem_sub_cmap_canvas_soil_loss");
        sub_ctrl.renderLoss();
        $('#rhem_sub_cmap_range_soil_loss').on('input', function () {
            sub_ctrl.renderRhemSoilLoss();
        });
    {% endif %}

    {% if 'ash' in ron.mods %}
        // Ash Load
        render_legend("electric", "ash_sub_cmap_canvas_load");
        sub_ctrl.renderAshLoad();
        $('#ash_sub_cmap_range_load').on('input', function () {
            sub_ctrl.renderAshLoad();
        });

        // Ash Transport
        render_legend("electric", "ash_sub_cmap_canvas_transport");
        sub_ctrl.renderAshTransport();
        $('#ash_sub_cmap_range_transport').on('input', function () {
            sub_ctrl.renderAshTransport();
        });
    {% endif %}


    // load subcatchments
    sub_ctrl.set_rq_job_id(sub_ctrl, {{ rq_job_ids.get("build_subcatchments_and_abstract_watershed_rq") | tojson }});

    if ({{ watershed.has_subcatchments | tojson }}) {
        sub_ctrl.show();
        sub_ctrl.report();
        channel_ctrl.show();
        sub_ctrl.enableColorMap("slp_asp");
    }

    {% if 'rangeland_cover' in ron.mods %}
        /*
         * Rangeland Cover Initialization
         * ===============================
         */

        var rangeland_cover = RangelandCover.getInstance();
        rangeland_cover.hideStacktrace();


        var rangeland_cover_modify = RangelandCoverModify.getInstance();
        rangeland_cover_modify.hideStacktrace();

        //
        // Bindings
        //
        $("[name='rangeland_cover_mode']").change(function () {
            rangeland_cover.setMode();
        });
        $("[name='rangeland_cover_mode']").trigger("change");

        $("#rangeland_cover_single_selection").on("change", function () {
            rangeland_cover.setMode();
        });

        $("#btn_build_rangeland_cover").click(rangeland_cover.build);

        //
        // Rangeland Cover Event Bindings
        //
        rangeland_cover.form.on("RANGELAND_COVER_BUILD_TASK_COMPLETED", function () {
            sub_ctrl.enableColorMap("rangeland_cover");
            rangeland_cover.report();
        });


        if ({{ rangeland_cover.has_covers | tojson }}) {
            rangeland_cover.report();
            sub_ctrl.enableColorMap("rangeland_cover");
        }

        /*
         * Modify RangelandCover Initialization
         * ======================
         */

        //
        // Bindings
        //
        $("#checkbox_modify_rangeland_cover").on("change", function () {
            rangeland_cover_modify.toggle();
        });


        rangeland_cover_modify.form.on("RANGELAND_COVER_MODIFY_TASK_COMPLETED", function () {
            if (sub_ctrl.getCmapMode() === "rangeland_cover") {
                sub_ctrl.setColorMap("rangeland_cover");
            }
            rangeland_cover.report();
            sub_ctrl.cmapRangelandCover();
        });


    {% endif %}

    /*
     * Landuse Initialization
     * ======================
     */

    //
    // Bindings
    //
    $("[name='landuse_mode']").change(function () {
        landuse.setMode();
    });

    $("#landuse_single_selection").on("change", function () {
        landuse.setMode();
    });

    //
    // Landuse Event Bindings
    //
    landuse.form.on("LANDUSE_BUILD_TASK_COMPLETED", function () {
        landuse.ws_client.disconnect();
        landuse.report();
        sub_ctrl.enableColorMap("dom_lc");
    });

    //
    // Initial Configuration
    //
    landuse.set_rq_job_id(landuse, {{ rq_job_ids.get("build_landuse_rq") | tojson }});

    landuse.restore({{ landuse.mode | int }}, 0);

    $('#landuse_single_selection').val('{{ landuse.single_selection }}').prop('selected', true);

    // load landuse
    if ( {{ landuse.has_landuse | tojson }} ) {
        landuse.form.trigger("LANDUSE_BUILD_TASK_COMPLETED");
    }

    /*
     * Modify Landuse Initialization
     * ======================
     */

    //
    // Bindings
    //
    $("#checkbox_modify_landuse").on("change", function () {
        lc_modify.toggle();
    });


    lc_modify.form.on("LANDCOVER_MODIFY_TASK_COMPLETED", function () {
        if (sub_ctrl.getCmapMode() === "dom_lc") {
            sub_ctrl.setColorMap("dom_lc");
        }
        landuse.report();
    });

    /*
     * Soil Initialization
     * ======================
     */

    //
    // Bindings
    //
    $("[name='soil_mode']").change(function () {
        soil.setMode();
    });

    $("#soil_single_selection").on("input", function () {
        soil.setMode();
    });

    $("#soil_single_dbselection").on("change", function () {
        soil.setMode();
    });

    //
    // Subcatchment Event Bindings
    //
    soil.form.on("SOILS_BUILD_TASK_COMPLETED", function () {
        soil.ws_client.disconnect();
        soil.report();
        sub_ctrl.enableColorMap("dom_soil");
    });

    //
    // Initial Configuration
    //
    soil.set_rq_job_id(soil, {{ rq_job_ids.get("build_soils_rq") | tojson }});

    soil.restore({{ soils.mode | int }});

    if ({{ (soils.single_dbselection != none) | tojson }})
    {
        $('#soil_single_dbselection').val('{{ soils.single_dbselection }}').prop('selected', true);
    }
    // load soil
    if ( {{ soils.has_soils | tojson }} ) {
        soil.form.trigger("SOILS_BUILD_TASK_COMPLETED");
    }

    /*
     * Climate Initialization
     * ======================
     */

    //
    // Bindings
    //
    // Bind radio to the set outlet mode on change
    $("[name='climate_build_mode']").change(function () {
        var mode = parseInt($("input[name='climate_build_mode']:checked").val(), 10);
        climate.setBuildMode(mode);
    });

    $("[name='climate_mode']").change(function () {
        climate.setMode();
    });

    $("[name='climate_spatialmode']").change(function () {
        climate.setSpatialMode();
    });

    $("[name='climatestation_mode']").change(function () {
        climate.setStationMode();
    });

    $("#climate_station_selection").on("change", function () {
        climate.setStation();
    });

    //
    // Climate Event Bindings
    //
    climate.form.on("CLIMATE_SETSTATIONMODE_TASK_COMPLETED", function () {
        climate.refreshStationSelection();
        climate.viewStationMonthlies();
    });

    climate.form.on("CLIMATE_SETSTATION_TASK_COMPLETED", function () {
        climate.viewStationMonthlies();
    });

    climate.form.on("CLIMATE_BUILD_TASK_COMPLETED", function () {
        climate.ws_client.disconnect();
        climate.report();
    });

    //
    // Initial Configuration
    //
    climate.set_rq_job_id(climate, {{ rq_job_ids.get("build_climate_rq") | tojson }});

    observed.hideControl();
    climate.showHideControls({{ climate.climate_mode | int }});
    // load climate
    if ( {{ climate.has_station | tojson }} ) {
        climate.refreshStationSelection();
        climate.viewStationMonthlies();
    }

    if ( {{ climate.has_climate | tojson }} ) {
        climate.report();
    }

    if ( {{ climate.has_observed | tojson }} ||
         {{ observed.results is not none | tojson }}) {
        observed.showControl();
    }

    climate.setBuildMode(parseInt($("input[name='climate_build_mode']:checked").val(), 10));


    //
    // Single Storm Unitization
    //
    var ss_design_storm_amount_mm = $("#ss_design_storm_amount_mm");
    var ss_design_storm_amount_inches = $("#ss_design_storm_amount_inches");

    ss_design_storm_amount_mm.on("input", function () {
        ss_design_storm_amount_inches.val(parseFloat(ss_design_storm_amount_mm.val()) / 25.4 );
    });

    ss_design_storm_amount_inches.on("input", function () {
        ss_design_storm_amount_mm.val(parseFloat(ss_design_storm_amount_inches.val()) * 25.4 );
    });


    var ss_max_intensity_mm_per_hour = $("#ss_max_intensity_mm_per_hour");
    var ss_max_intensity_inches_per_hour = $("#ss_max_intensity_inches_per_hour");

    ss_max_intensity_mm_per_hour.on("input", function () {
        ss_max_intensity_inches_per_hour.val(parseFloat(ss_max_intensity_mm_per_hour.val()) / 25.4 );
    });

    ss_max_intensity_inches_per_hour.on("input", function () {
        ss_max_intensity_mm_per_hour.val(parseFloat(ss_max_intensity_inches_per_hour.val()) * 25.4 );
    });

    /*
    * Wepp Initialization
    * ======================
    */

    //
    // Bindings
    //
    $("[name='wepp_mode']").change(function () {
        wepp.setMode();
    });

    $("#wepp_single_selection").on("change", function () {
        wepp.setMode();
    });

    wepp.form.on("WEPP_RUN_TASK_COMPLETED", function () {
        wepp.ws_client.disconnect();
        wepp.report();
        observed.onWeppRunCompleted();
    });


    {% if 'rhem' in ron.mods %}
    /*
    * Rhem Initialization
    * ======================
    */

    var rhem = Rhem.getInstance();
    rhem.hideStacktrace();

    //
    // Bindings
    //
    rhem.set_rq_job_id(rhem, {{ rq_job_ids.get("run_rhem_rq") | tojson }});

    rhem.form.on("RHEM_RUN_TASK_COMPLETED", function () {
        rhem.ws_client.disconnect();
        rhem.report();
    });

    if ( {{ rhem.has_run | tojson }} ) {
        rhem.report();
    }

    {% endif %}

    //
    // Initial Configuration
    //
    wepp.set_rq_job_id(wepp, {{ rq_job_ids.get("run_wepp_rq") | tojson }});

    // show report if wepp has run
    if ( {{ wepp.has_run | tojson }} ) {
        wepp.report();
    }

    // show report if wepp has run
    if ( {{ observed.has_results | tojson }} ) {
        observed.report();
    }

    {% if 'ash' in ron.mods %}
        ash.set_rq_job_id(ash, {{ rq_job_ids.get("run_ash_rq") | tojson }});

        $("[name='ash_depth_mode']").change(function () {
            ash.setAshDepthMode();
        });

        // show report if ash model has run
        if ( {{ ron.has_ash_results | tojson }} ) {
            ash.report();
        }

        ash.setAshDepthMode({{ ash.ash_depth_mode }});

        ash.form.on("ASH_RUN_TASK_COMPLETED", function () {
            ash.ws_client.disconnect();
            ash.report();
        });
    {% endif %}

    rap_ts.form.on("RAP_TS_TASK_COMPLETED", function () {
        rap_ts.ws_client.disconnect();
        rap_ts.report();
    });
    rap_ts.set_rq_job_id(rap_ts, {{ rq_job_ids.get("fetch_and_analyze_rap_ts_rq") | tojson }});


    debris_flow.form.on("DEBRIS_FLOW_RUN_TASK_COMPLETED", function () {
        debris_flow.ws_client.disconnect();
        debris_flow.report();
    });
    debris_flow.set_rq_job_id(debris_flow, {{ rq_job_ids.get("run_debris_flow_rq") | tojson }});

    project.set_readonly_controls({{ ron.readonly | tojson }})

    /*
     * Team Initialization
     * ======================
     */

    //
    // Bindings
    //
    team.form.on("TEAM_ADDUSER_TASK_COMPLETED", function () {
        team.report();
    });

    team.form.on("TEAM_REMOVEUSER_TASK_COMPLETED", function () {
        team.report();
    });

    // show report if wepp has run
    if ( {{ user.is_authenticated | tojson }} ) {
        team.report();
    }

    /*
     * Map Event Binding
     * =================
     */

    map.on("click", function (ev) {
        outlet.setClickHandler(ev);
        // add additional events here
    });

    map.on("zoom", function (ev) {
        map.onMapChange();
        channel_ctrl.onMapChange();
        // add additional events here
    });

    map.on("move", function (ev) {
        map.onMapChange();
        channel_ctrl.onMapChange();
        // add additional events here
    });

    map.on("moveend", function (ev) {
        map.loadUSGSGageLocations();
    });

    map.on("zoomend", function (ev) {
        map.loadUSGSGageLocations();
    });


    // konami code!
    Mousetrap.bind('up up down down left right left right b a', function() {
        $('#btnPuModal').click();
    });

    Mousetrap.bind('f8', function() {
        window.scrollTo(0, 0);
    });


$(function () {
    var navSelector = "#toc";
    var $myNav = $(navSelector);
    Toc.init($myNav);
    $("body").scrollspy({
      target: navSelector,
      offset: 60
    });
});

  var offset = 80;

$('.nav li a').click(function(event) {
    event.preventDefault();
    $($(this).attr('href'))[0].scrollIntoView();
    scrollBy(0, -offset);
});

}$(document).ready(onReady);

$(window).on('load', function() {
    $(window).on('resize', window_resize);
    setTimeout(function(){
        window_resize();
    }, 100);

    initPreflight("{{run_id}}");
});
</script>