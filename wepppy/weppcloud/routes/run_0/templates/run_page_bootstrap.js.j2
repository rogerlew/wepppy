<!-- wepppy/weppcloud/templates/js/run_page_bootstrap.js.j2 -->
<script>
"use strict";

(function () {
    {% set mods_list = ron.mods or [] %}
    {% if ron.boundary %}
    {% set boundary = {
        "url": site_prefix ~ "/" ~ ron.boundary,
        "layerName": ron.boundary_name,
        "style": {
            "color": ron.boundary_color,
            "opacity": 1,
            "weight": 1,
            "fillOpacity": 0.0
        }
    } %}
    {% else %}
    {% set boundary = None %}
    {% endif %}

    {% set rangeland_has_covers = False %}
    {% if 'rangeland_cover' in mods_list %}
        {% set rangeland_has_covers = rangeland_cover.has_covers %}
    {% endif %}

    {% set omni_has_ran_scenarios = False %}
    {% if 'omni' in mods_list and omni %}
        {% set omni_has_ran_scenarios = omni.has_ran_scenarios %}
    {% endif %}

    {% set rhem_has_run = False %}
    {% if 'rhem' in mods_list %}
        {% set rhem_has_run = rhem.has_run %}
    {% endif %}

    {% set ash_has_results = False %}
    {% set ash_depth_mode = None %}
    {% if 'ash' in mods_list %}
        {% set ash_has_results = ron.has_ash_results %}
        {% set ash_depth_mode = ash.ash_depth_mode %}
    {% endif %}

    {% set climate_precip_mode = climate.precip_scaling_mode if climate.precip_scaling_mode is defined else None %}

    var sitePrefix = {{ site_prefix | tojson }};
    var runId = {{ ron.runid | tojson }};
    var runConfig = {{ ron.config_stem | tojson }};

    var runContext = {{ {
        "run": {
            "id": ron.runid,
            "config": ron.config_stem,
            "sitePrefix": site_prefix
        },
        "user": {
            "isPowerUser": current_user.has_role('PowerUser'),
            "isAuthenticated": user.is_authenticated,
            "readonly": ron.readonly
        },
        "environment": {
            "cellSize": ron.cellsize
        },
        "jobIds": rq_job_ids,
        "mods": {
            "list": mods_list,
            "flags": {
                "baer": 'baer' in mods_list,
                "disturbed": 'disturbed' in mods_list,
                "rangeland_cover": 'rangeland_cover' in mods_list,
                "ash": 'ash' in mods_list,
                "omni": 'omni' in mods_list,
                "rhem": 'rhem' in mods_list,
                "dss_export": 'dss_export' in mods_list,
                "path_ce": 'path_ce' in mods_list
            }
        },
        "flags": {
            "initialHasSbs": ron.has_sbs
        },
        "map": {
            "center": ron.center0,
            "zoom": ron.zoom0,
            "boundary": boundary
        },
        "data": {
            "watershed": {
                "hasChannels": watershed.has_channels,
                "hasSubcatchments": watershed.has_subcatchments,
                "hasOutlet": watershed.has_outlet
            },
            "landuse": {
                "hasLanduse": landuse.has_landuse,
                "mode": landuse.mode,
                "singleSelection": landuse.single_selection
            },
            "soils": {
                "hasSoils": soils.has_soils,
                "mode": soils.mode,
                "singleDbSelection": soils.single_dbselection
            },
            "climate": {
                "hasStation": climate.has_station,
                "hasClimate": climate.has_climate,
                "hasObserved": climate.has_observed,
                "precipScalingMode": climate_precip_mode
            },
            "observed": {
                "hasResults": observed.results is not none
            },
            "rangelandCover": {
                "hasCovers": rangeland_has_covers
            },
            "wepp": {
                "hasRun": wepp.has_run,
                "dssExportMode": wepp.dss_export_mode,
                "hasDssZip": wepp.has_dss_zip
            },
            "omni": {
                "hasRanScenarios": omni_has_ran_scenarios
            },
            "rhem": {
                "hasRun": rhem_has_run
            },
            "ash": {
                "hasResults": ash_has_results,
                "depthMode": ash_depth_mode
            }
        },
        "controllers": {
            "map": {"boundary": boundary},
            "channel": {"zoomMin": 11},
            "subcatchment": {"defaultColorMap": "slp_asp"},
            "project": {"readonly": ron.readonly},
            "outlet": {},
            "baer": {"mode": 0}
        },
        "ui": {
            "tocTaskEmojis": toc_task_emojis
        }
    } | tojson }};

    var modsFlags = runContext.mods && runContext.mods.flags ? runContext.mods.flags : {};

    window.site_prefix = sitePrefix;
    window.runid = runId;
    window.runId = runId;
    window.config = runConfig;
    window.readonly = {{ ron.readonly | tojson }};
    window.WEPP_channel_critical_shear = null;

    function initUnitizers() {
        if (typeof initUnitConverters === "function") {
            try {
                initUnitConverters(document);
            } catch (err) {
                console.warn("[Bootstrap] Unitizer initialisation failed", err);
            }
        }
    }

    function createBootstrapEntries(modFlags) {
        var entries = [];

        function add(name, symbol) {
            if (!symbol || typeof symbol.getInstance !== "function") {
                return;
            }
            entries.push({ controller: symbol, name: name });
        }

        add("project", typeof Project !== "undefined" ? Project : null);
        add("team", typeof Team !== "undefined" ? Team : null);
        add("map", typeof MapController !== "undefined" ? MapController : null);
        add("channel", typeof ChannelDelineation !== "undefined" ? ChannelDelineation : null);
        add("outlet", typeof Outlet !== "undefined" ? Outlet : null);
        add("subcatchment", typeof SubcatchmentDelineation !== "undefined" ? SubcatchmentDelineation : null);
        add("landuse", typeof Landuse !== "undefined" ? Landuse : null);
        add("landuseModify", typeof LanduseModify !== "undefined" ? LanduseModify : null);
        add("soil", typeof Soil !== "undefined" ? Soil : null);
        add("climate", typeof Climate !== "undefined" ? Climate : null);
        add("observed", typeof Observed !== "undefined" ? Observed : null);
        add("wepp", typeof Wepp !== "undefined" ? Wepp : null);
        add("dssExport", typeof DssExport !== "undefined" ? DssExport : null);
        add("debrisFlow", typeof DebrisFlow !== "undefined" ? DebrisFlow : null);
        add("rapTs", typeof RAP_TS !== "undefined" ? RAP_TS : null);

        if (modFlags.disturbed || modFlags.baer) {
            add("disturbed", typeof Disturbed !== "undefined" ? Disturbed : null);
        }
        if (modFlags.baer) {
            add("baer", typeof Baer !== "undefined" ? Baer : null);
        }
        if (modFlags.rangeland_cover) {
            add("rangelandCover", typeof RangelandCover !== "undefined" ? RangelandCover : null);
            add("rangelandCoverModify", typeof RangelandCoverModify !== "undefined" ? RangelandCoverModify : null);
        }
        if (modFlags.omni) {
            add("omni", typeof Omni !== "undefined" ? Omni : null);
        }
        if (modFlags.rhem) {
            add("rhem", typeof Rhem !== "undefined" ? Rhem : null);
        }
        if (modFlags.ash) {
            add("ash", typeof Ash !== "undefined" ? Ash : null);
        }
        if (modFlags.path_ce && typeof PathCE !== "undefined" && PathCE && typeof PathCE.getInstance === "function") {
            add("pathCe", PathCE);
        }

        return entries;
    }

    function bootstrapControllers(context) {
        var helper = window.WCControllerBootstrap || null;
        var entries = createBootstrapEntries(context.mods && context.mods.flags ? context.mods.flags : {});

        if (helper && typeof helper.setContext === "function") {
            helper.setContext(context);
        }

        if (helper && typeof helper.bootstrapMany === "function") {
            try {
                helper.bootstrapMany(entries, context);
                return;
            } catch (err) {
                console.error("Controller bootstrap failure", err);
            }
        }

        entries.forEach(function (entry) {
            try {
                var instance = entry.controller.getInstance();
                if (instance && typeof instance.bootstrap === "function") {
                    instance.bootstrap(context);
                }
            } catch (err) {
                console.error("Fallback bootstrap failure for " + entry.name, err);
            }
        });
    }

    function registerTocEmojiMetadata(navElement, emojiMap) {
        if (!navElement || !emojiMap) {
            return;
        }
        var anchors = navElement.querySelectorAll("a.nav-link");
        Array.prototype.forEach.call(anchors, function (anchor) {
            var href = anchor.getAttribute("href");
            if (!href) {
                return;
            }
            var emoji = emojiMap[href];
            if (!emoji) {
                return;
            }
            var existingText = (anchor.textContent || "").trim();
            var storedText = anchor.getAttribute("data-original-text");
            if (!storedText) {
                if (emoji && existingText.indexOf(emoji) === 0) {
                    existingText = existingText.slice(emoji.length).trim();
                }
                storedText = existingText;
            }
            anchor.setAttribute("data-original-text", storedText);
            anchor.setAttribute("data-toc-emoji-value", emoji);
            if (!anchor.hasAttribute("data-toc-emoji")) {
                anchor.setAttribute("data-toc-emoji", "");
            }
            if (anchor.dataset) {
                anchor.dataset.originalText = storedText;
                anchor.dataset.tocEmojiValue = emoji;
                if (typeof anchor.dataset.tocEmoji === "undefined") {
                    anchor.dataset.tocEmoji = "";
                }
            }
            anchor.textContent = storedText;
        });
    }

    function computeScrollOffset() {
        var header = document.querySelector("header .navbar");
        if (header) {
            return Math.ceil(header.getBoundingClientRect().height) + 12;
        }
        var cssOffset = parseInt(getComputedStyle(document.documentElement).getPropertyValue("--project-header-offset"), 10);
        if (Number.isNaN(cssOffset)) {
            cssOffset = 72;
        }
        return cssOffset + 12;
    }

    function scrollToSection(element) {
        if (!element) {
            return;
        }
        var offset = computeScrollOffset();
        var targetY = window.pageYOffset + element.getBoundingClientRect().top - offset;
        window.scrollTo({ top: targetY, behavior: "smooth" });
    }

    function setupTocScroll(navElement) {
        if (!navElement) {
            return;
        }
        navElement.addEventListener("click", function (event) {
            var link = event.target;
            while (link && link !== navElement) {
                if (link.tagName === "A") {
                    var hasNavLinkClass = link.classList ? link.classList.contains("nav-link") : (" " + link.className + " ").indexOf(" nav-link ") !== -1;
                    if (hasNavLinkClass) {
                        break;
                    }
                }
                link = link.parentElement;
            }
            if (!link || link === navElement) {
                return;
            }
            var href = link.getAttribute("href");
            if (!href || href.charAt(0) !== "#") {
                return;
            }
            var targetElement = document.querySelector(href);
            if (targetElement) {
                event.preventDefault();
                scrollToSection(targetElement);
            }
        });
    }

    function initializeToc(emojiMap) {
        var navElement = document.getElementById("toc");
        if (!navElement) {
            return;
        }
        if (typeof Toc !== "undefined" && typeof Toc.init === "function" && window.jQuery) {
            try {
                Toc.init(window.jQuery(navElement));
            } catch (err) {
                console.warn("[Bootstrap] Failed to initialize TOC", err);
            }
        }
        registerTocEmojiMetadata(navElement, emojiMap || {});
        setupTocScroll(navElement);
        if (typeof window.updateUI === "function" && typeof window.lastPreflightChecklist !== "undefined" && window.lastPreflightChecklist) {
            try {
                window.updateUI(window.lastPreflightChecklist);
            } catch (err) {
                console.warn("[Bootstrap] Failed to apply preflight UI", err);
            }
        }
    }

    document.addEventListener("DOMContentLoaded", function () {
        initUnitizers();
        bootstrapControllers(runContext);
        window.tocTaskEmojis = runContext.ui && runContext.ui.tocTaskEmojis ? runContext.ui.tocTaskEmojis : {};
        initializeToc(window.tocTaskEmojis);
    });

    window.addEventListener("load", function () {
        if (typeof initPreflight === "function") {
            try {
                initPreflight({{ run_id | tojson }});
            } catch (err) {
                console.warn("[Bootstrap] Failed to initialize preflight", err);
            }
        }

        if (!modsFlags.dss_export) {
            setTimeout(function () {
                try {
                    var dssExport = typeof DssExport !== "undefined" ? DssExport.getInstance() : null;
                    if (dssExport && typeof dssExport.hide === "function") {
                        dssExport.hide();
                        console.log("DssExport component hidden");
                    }
                } catch (err) {
                    console.warn("[Bootstrap] Failed to hide DSS export panel", err);
                }
            }, 300);
        }

        var unitPreferenceElement = document.querySelector("input[name='uni_main_selector']:checked");
        var pref = unitPreferenceElement ? parseInt(unitPreferenceElement.value, 10) : undefined;
        if (typeof setGlobalUnitizerPreference === "function") {
            try {
                setGlobalUnitizerPreference(pref);
            } catch (err) {
                console.warn("[Bootstrap] Failed to apply unit preference", err);
            }
        }

        if (modsFlags.ash) {
            try {
                var ashController = typeof Ash !== "undefined" ? Ash.getInstance() : null;
                if (ashController && typeof ashController.showHideControls === "function") {
                    ashController.showHideControls();
                }
            } catch (err) {
                console.warn("[Bootstrap] Failed to sync ash controls", err);
            }
        }
    });
}());
</script>
<!-- End wepppy/weppcloud/templates/js/run_page_bootstrap.js.j2 -->
