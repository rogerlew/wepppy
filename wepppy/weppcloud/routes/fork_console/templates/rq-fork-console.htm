{% extends "base_pure.htm" %}

{% block title %}Fork Project Console â€“ {{ runid }}{% endblock %}

{% from "shared/console_macros.htm" import console_page, console_header, button_row %}
{% import "controls/_pure_macros.html" as ui %}

{% block body %}
{% call console_page(data_controller="fork-console") %}
  {% call console_header(
    run_link=url_for_run('run_0.runs0', runid=runid, config=config),
    run_label=runid,
    title="Fork Project",
    subtitle="Submit a fork job for this run."
  ) %}{% endcall %}

  <section class="wc-stack">
    {% call ui.control_shell(
         form_id="fork_form",
         title="Fork Project",
         collapsible=False,
         form_class="pure-form-aligned",
         form_attrs={'novalidate': True},
         status_panel_override=ui.status_panel(
           id="fork_status_panel",
           title="Console",
           variant="console",
           meta='<div id="the_console" class="wc-status" data-state="attention">Waiting for submission...</div>',
           log_id="fork_status_log"
         ),
         summary_panel_override='',
         stacktrace_panel_override=ui.stacktrace_panel(
           id="fork_stacktrace_panel",
           summary="Stack trace",
           description="Exceptions from fork jobs appear here.",
           empty_state="No stack trace captured."
         )
       ) %}
      <fieldset>
        {{ ui.text_field(
             'runid_input',
             'Source run ID',
             value=runid,
             attrs={'readonly': 'readonly'}
           ) }}
        {{ ui.checkbox_field(
             'undisturbify_checkbox',
             'Undisturbify output (optional)',
             checked=undisturbify == 'true'
           ) }}
        {% call button_row() %}
          <button type="submit" class="pure-button" id="submit_button">Fork project</button>
          <button type="button" class="pure-button pure-button-secondary" id="cancel_button" hidden>Cancel job</button>
        {% endcall %}
      </fieldset>
    {% endcall %}
  </section>
{% endcall %}
{% endblock %}

{% block script_extras %}
<script src="{{ url_for('static', filename='vendor/jquery/jquery.js') }}"></script>
<script src="{{ url_for('static', filename='js/controllers.js') }}"></script>
<script>
(function () {
  const origin = window.location.origin;
  let runid = {{ runid | tojson }};
  const initialUndisturbify = {{ undisturbify | tojson }} === 'true';
  const MAX_STATUS_MESSAGES = 3000;

  let jobId = '';
  let newRunId = '';
  let statusStream = null;

  const pendingStatusMessages = [];

  const form = document.getElementById('fork_form');
  const runIdInput = document.getElementById('runid_input');
  const undisturbifyCheckbox = document.getElementById('undisturbify_checkbox');
  const submitButton = document.getElementById('submit_button');
  const cancelButton = document.getElementById('cancel_button');
  const consoleBlock = document.getElementById('the_console');
  const statusPanel = document.getElementById('fork_status_panel');
  const statusLog = document.getElementById('fork_status_log');
  const stacktracePanel = document.getElementById('fork_stacktrace_panel');

  function appendStatus(message) {
    if (message === undefined || message === null) {
      return;
    }
    const text = typeof message === 'string' ? message : String(message);
    if (statusStream) {
      statusStream.append(text);
      return;
    }
    pendingStatusMessages.push(text);
    if (pendingStatusMessages.length > MAX_STATUS_MESSAGES) {
      pendingStatusMessages.splice(0, pendingStatusMessages.length - MAX_STATUS_MESSAGES);
    }
    if (statusLog) {
      statusLog.textContent = `${pendingStatusMessages.join('\n')}\n`;
      statusLog.scrollTop = statusLog.scrollHeight;
    }
  }

  function flushPendingStatus() {
    if (!statusStream || pendingStatusMessages.length === 0) {
      return;
    }
    pendingStatusMessages.splice(0).forEach((msg) => statusStream.append(msg));
  }

  function resetStatusLog() {
    pendingStatusMessages.length = 0;
    if (statusStream) {
      statusStream.disconnect();
      statusStream = null;
    }
    if (statusLog) {
      statusLog.textContent = '';
    }
  }

  function handleTrigger(detail) {
    if (!detail || !detail.event) {
      return;
    }
    const eventName = String(detail.event).toUpperCase();
    if (eventName === 'FORK_COMPLETE') {
      handleForkComplete();
    } else if (eventName === 'FORK_FAILED') {
      handleForkFailed();
    }
  }

  function connectStatusStreamForRun(runId) {
    if (typeof StatusStream === 'undefined') {
      console.error('StatusStream module is unavailable.');
      return;
    }
    if (!statusPanel) {
      return;
    }
    if (statusStream) {
      statusStream.disconnect();
    }
    const stacktrace = stacktracePanel ? { element: stacktracePanel } : null;
    statusStream = StatusStream.attach({
      element: statusPanel,
      channel: 'fork',
      runId,
      logLimit: MAX_STATUS_MESSAGES,
      stacktrace,
      onTrigger: handleTrigger
    });
    flushPendingStatus();
  }

  function handleForkComplete() {
    jobId = '';
    if (cancelButton) {
      cancelButton.hidden = true;
      cancelButton.disabled = false;
    }
    if (submitButton) {
      submitButton.hidden = false;
      submitButton.disabled = false;
    }
    if (consoleBlock) {
      consoleBlock.dataset.state = 'positive';
      if (newRunId) {
        const link = document.createElement('a');
        link.href = `${origin}/weppcloud/runs/${newRunId}/cfg`;
        link.target = '_blank';
        link.rel = 'noopener';
        link.textContent = `Load ${newRunId} project`;
        link.className = 'pure-button pure-button-secondary';
        consoleBlock.innerHTML = '';
        consoleBlock.appendChild(link);
      } else {
        consoleBlock.textContent = 'Fork job completed.';
      }
    }
    appendStatus('Fork job completed.');
  }

  function handleForkFailed() {
    jobId = '';
    if (cancelButton) {
      cancelButton.hidden = true;
      cancelButton.disabled = false;
    }
    if (submitButton) {
      submitButton.hidden = false;
      submitButton.disabled = false;
    }
    if (consoleBlock) {
      consoleBlock.dataset.state = 'critical';
      consoleBlock.textContent = 'Fork job failed. Review the status log for details.';
    }
    appendStatus('Fork job failed.');
  }

  function forkProject(event) {
    event.preventDefault();
    if (!form) {
      return;
    }
    const submittedRunId = runIdInput ? runIdInput.value.trim() : '';
    if (!submittedRunId) {
      if (runIdInput) {
        runIdInput.focus();
      }
      return;
    }

    runid = submittedRunId;
    const undisturbify = undisturbifyCheckbox ? undisturbifyCheckbox.checked : false;

    if (submitButton) {
      submitButton.disabled = true;
    }
    if (consoleBlock) {
      consoleBlock.dataset.state = 'attention';
      consoleBlock.textContent = 'Submitting fork job...';
    }

    resetStatusLog();
    appendStatus('Submitting fork job...');

    const forkUrl = `${origin}/weppcloud/runs/${runid}/cfg/rq/api/fork`;
    const payload = new URLSearchParams({ undisturbify: undisturbify ? 'true' : 'false' });

    fetch(forkUrl, {
      method: 'POST',
      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
      body: payload.toString()
    })
      .then((resp) => resp.json())
      .then((body) => {
        if (!body.Success) {
          throw new Error(body.Error || 'Fork submission failed');
        }
        newRunId = body.new_runid || '';
        jobId = body.job_id || '';
        const undisturbifyFlag = body.undisturbify;

        appendStatus(`Fork job submitted: ${jobId}`);

        if (consoleBlock) {
          const jobDashboard = `${origin}/weppcloud/rq/job-dashboard/${jobId}`;
          const newRunLink = `${origin}/weppcloud/runs/${newRunId}/cfg`;
          consoleBlock.dataset.state = 'attention';
          consoleBlock.innerHTML = [
            `Fork job submitted: <a href="${jobDashboard}" target="_blank" rel="noopener">${jobId}</a>`,
            `New runid: <a href="${newRunLink}" target="_blank" rel="noopener">${newRunId}</a>`,
            `Undisturbify: ${undisturbifyFlag}`
          ].join('<br>');
        }

        if (submitButton) {
          submitButton.hidden = true;
        }
        if (cancelButton) {
          cancelButton.hidden = false;
          cancelButton.disabled = false;
        }

        connectStatusStreamForRun(runid);
      })
      .catch((err) => {
        if (consoleBlock) {
          consoleBlock.dataset.state = 'critical';
          consoleBlock.textContent = `Error: ${err.message || err}`;
        }
        appendStatus(`Error submitting fork job: ${err.message || err}`);
        if (submitButton) {
          submitButton.disabled = false;
          submitButton.hidden = false;
        }
      });
  }

  function cancelJob() {
    if (!jobId) {
      return;
    }
    if (cancelButton) {
      cancelButton.disabled = true;
    }
    appendStatus(`Cancelling job ${jobId}...`);
    const cancelUrl = `${origin}/weppcloud/rq/canceljob/${jobId}`;
    fetch(cancelUrl, { method: 'GET' })
      .then((resp) => {
        if (!resp.ok) {
          throw new Error('Cancel job failed');
        }
        appendStatus(`Cancel request acknowledged for ${jobId}.`);
        alert('Job cancelled');
      })
      .catch((err) => {
        console.error(err);
        appendStatus(`Cancel request failed: ${err.message || err}`);
        alert('Unable to cancel job.');
      })
      .finally(() => {
        if (cancelButton) {
          cancelButton.disabled = false;
        }
      });
  }

  document.addEventListener('DOMContentLoaded', () => {
    if (stacktracePanel) {
      stacktracePanel.hidden = true;
    }
    if (undisturbifyCheckbox) {
      undisturbifyCheckbox.checked = initialUndisturbify;
    }
    if (form) {
      form.addEventListener('submit', forkProject);
    }
    if (cancelButton) {
      cancelButton.addEventListener('click', cancelJob);
    }
    if (statusPanel) {
      statusPanel.addEventListener('status:error', (event) => {
        if (event && event.detail && event.detail.error) {
          console.error('Fork status stream error:', event.detail.error);
        }
      });
    }
  });
})();
</script>
{% endblock %}
