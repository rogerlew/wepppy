{% extends "base_pure.htm" %}

{% block title %}Fork Project Console – {{ runid }}{% endblock %}

{% from "shared/console_macros.htm" import console_page, console_header, button_row %}

{% block body %}
{% call console_page(data_controller="fork-console") %}
  {% call console_header(
    run_link=url_for_run('run_0.runs0', runid=runid, config=config),
    run_label=runid,
    title="Fork Project",
    subtitle="Submit a fork job for this run."
  ) %}{% endcall %}

  <section class="wc-panel wc-stack">
    <form id="fork_form" class="pure-form pure-form-aligned" novalidate>
      <fieldset>
        <div class="pure-control-group">
          <label for="runid_input">Source run ID</label>
          <input id="runid_input" type="text" class="pure-input-1" value="{{ runid }}" required>
        </div>
        <div class="pure-controls wc-controls-left">
          <label class="pure-checkbox" for="undisturbify_checkbox">
            <input id="undisturbify_checkbox" type="checkbox" {% if undisturbify == 'true' %}checked{% endif %}>
            Undisturbify output (optional)
          </label>
        </div>
        {% call button_row(form_controls=True) %}
          <button type="submit" class="pure-button" id="submit_button">Fork project</button>
          <button type="button" class="pure-button pure-button-secondary" id="cancel_button" hidden>Cancel job</button>
        {% endcall %}
      </fieldset>
    </form>
  </section>

  <section class="wc-panel wc-stack">
    <h2>Console</h2>
    <div id="the_console" class="wc-status" data-state="attention">Waiting for submission…</div>
    <div id="status" class="wc-log" aria-live="polite"></div>
    <details id="stacktrace_container" hidden>
      <summary>Stack trace</summary>
      <pre id="stacktrace"></pre>
    </details>
  </section>
{% endcall %}
{% endblock %}

{% block script_extras %}
<script>
(function () {
  const origin = window.location.origin;
  let runid = {{ runid | tojson }};
  const initialUndisturbify = {{ undisturbify | tojson }} === 'true';
  let jobId = '';
  let newRunId = '';

  const form = document.getElementById('fork_form');
  const runIdInput = document.getElementById('runid_input');
  const undisturbifyCheckbox = document.getElementById('undisturbify_checkbox');
  const submitButton = document.getElementById('submit_button');
  const cancelButton = document.getElementById('cancel_button');
  const consoleBlock = document.getElementById('the_console');
  const statusLog = document.getElementById('status');
  const stacktraceContainer = document.getElementById('stacktrace_container');
  const stacktraceBlock = document.getElementById('stacktrace');

  let wsClient = null;
  let statusMessages = [];
  const MAX_STATUS_MESSAGES = 3000;

  class WSClient {
    constructor(runid, channel) {
      this.channel = channel;
      this.wsUrl = `wss://${window.location.host}/weppcloud-microservices/status/${runid}:${channel}`;
      this.ws = null;
      this.shouldReconnect = true;
    }

    connect() {
      if (this.ws) {
        return;
      }
      this.shouldReconnect = true;
      this.ws = new WebSocket(this.wsUrl);
      this.ws.onopen = () => {
        if (this.ws.readyState === WebSocket.OPEN) {
          this.ws.send(JSON.stringify({ type: 'init' }));
        }
      };
      this.ws.onmessage = (event) => this.handleMessage(event);
      this.ws.onerror = (err) => {
        console.error('WebSocket error', err);
        this.ws = null;
      };
      this.ws.onclose = () => {
        this.ws = null;
        if (this.shouldReconnect) {
          window.setTimeout(() => this.connect(), 5000);
        }
      };
    }

    disconnect() {
      if (this.ws) {
        this.shouldReconnect = false;
        this.ws.close();
        this.ws = null;
      }
    }

    handleMessage(event) {
      try {
        const payload = JSON.parse(event.data);
        if (payload.type === 'ping') {
          this.ws?.send(JSON.stringify({ type: 'pong' }));
          return;
        }
        if (payload.type !== 'status') {
          return;
        }
        const data = payload.data || '';
        appendStatus(data);
        if (typeof data === 'string' && data.includes('EXCEPTION')) {
          showStacktrace(data);
        }
        if (typeof data === 'string' && data.includes('TRIGGER')) {
          const parts = data.trim().split(/\s+/);
          const controller = parts[parts.length - 2];
          const eventName = parts[parts.length - 1];
          if (controller === this.channel && eventName === 'FORK_COMPLETE') {
            handleForkComplete();
          }
        }
      } catch (err) {
        console.error('WS payload error', err);
      }
    }
  }

  function appendStatus(message) {
    if (!message || !statusLog) {
      return;
    }
    if (!statusMessages.length && statusLog.textContent) {
      statusMessages = statusLog.textContent.split('\n');
      if (statusMessages[statusMessages.length - 1] === '') {
        statusMessages.pop();
      }
    }
    statusMessages.push(String(message));
    if (statusMessages.length > MAX_STATUS_MESSAGES) {
      statusMessages.splice(0, statusMessages.length - MAX_STATUS_MESSAGES);
    }
    statusLog.textContent = statusMessages.length ? `${statusMessages.join('\n')}\n` : '';
    statusLog.scrollTop = statusLog.scrollHeight;
  }

  function showStacktrace(message) {
    if (!stacktraceBlock || !stacktraceContainer) {
      return;
    }
    stacktraceContainer.hidden = false;
    stacktraceBlock.textContent = message;
    const parts = message.split(' ');
    if (parts.length) {
      const jobToken = parts[0];
      const jobIdExtracted = jobToken.startsWith('JID') ? jobToken.slice(3) : jobToken;
      const jobUrl = `${origin}/weppcloud/rq/api/jobinfo/${jobIdExtracted}`;
      window.setTimeout(() => {
        fetch(jobUrl)
          .then((resp) => resp.json())
          .then((body) => {
            if (body && body.exc_info) {
              stacktraceBlock.textContent = body.exc_info;
            }
          })
          .catch((err) => console.error('Failed to fetch job info', err));
      }, 500);
    }
  }

  function handleForkComplete() {
    cancelButton.hidden = true;
    submitButton.hidden = false;
    submitButton.disabled = false;
    consoleBlock.dataset.state = 'positive';
    if (newRunId) {
      const link = document.createElement('a');
      link.href = `${origin}/weppcloud/runs/${newRunId}/cfg`;
      link.target = '_blank';
      link.rel = 'noopener';
      link.textContent = `Load ${newRunId} project`;
      link.className = 'pure-button pure-button-secondary';
      consoleBlock.innerHTML = '';
      consoleBlock.appendChild(link);
    }
  }

  function forkProject(event) {
    event.preventDefault();
    runid = runIdInput.value.trim();
    if (!runid) {
      runIdInput.focus();
      return;
    }
    const undisturbify = undisturbifyCheckbox.checked;
    submitButton.disabled = true;
    consoleBlock.dataset.state = 'attention';
    const forkUrl = `${origin}/weppcloud/runs/${runid}/cfg/rq/api/fork`;
    const payload = new URLSearchParams({ undisturbify: undisturbify ? 'true' : 'false' });

    fetch(forkUrl, {
      method: 'POST',
      headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
      body: payload.toString()
    })
      .then((resp) => resp.json())
      .then((body) => {
        if (!body.Success) {
          throw new Error(body.Error || 'Fork submission failed');
        }
        newRunId = body.new_runid;
        jobId = body.job_id;
        const undisturbifyFlag = body.undisturbify;
        consoleBlock.dataset.state = 'attention';
        consoleBlock.innerHTML = `Fork job submitted: <a href="${origin}/weppcloud/rq/job-dashboard/${jobId}" target="_blank" rel="noopener">${jobId}</a><br>New runid: <a href="${origin}/weppcloud/runs/${newRunId}/cfg" target="_blank" rel="noopener">${newRunId}</a><br>Undisturbify: ${undisturbifyFlag}`;
        submitButton.hidden = true;
        cancelButton.hidden = false;
        cancelButton.disabled = false;
        wsClient = new WSClient(runid, 'fork');
        wsClient.connect();
      })
      .catch((err) => {
        consoleBlock.dataset.state = 'critical';
        consoleBlock.textContent = `Error: ${err.message || err}`;
        submitButton.disabled = false;
      });
  }

  function cancelJob() {
    if (!jobId) {
      return;
    }
    cancelButton.disabled = true;
    const cancelUrl = `${origin}/weppcloud/rq/canceljob/${jobId}`;
    fetch(cancelUrl, { method: 'GET' })
      .then((resp) => {
        if (!resp.ok) throw new Error('Cancel job failed');
        alert('Job cancelled');
      })
      .catch((err) => {
        console.error(err);
        alert('Unable to cancel job.');
      })
      .finally(() => {
        cancelButton.disabled = false;
      });
  }

  document.addEventListener('DOMContentLoaded', () => {
    undisturbifyCheckbox.checked = initialUndisturbify;
    form.addEventListener('submit', forkProject);
    cancelButton.addEventListener('click', cancelJob);
  });
})();
</script>
{% endblock %}
