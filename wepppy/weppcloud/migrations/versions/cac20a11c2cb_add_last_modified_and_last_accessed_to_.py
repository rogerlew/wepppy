"""Add last_modified and last_accessed to Run

Revision ID: cac20a11c2cb
Revises: 28e48afd0090
Create Date: 2025-07-15 12:06:29.511238

"""
from alembic import op
import sqlalchemy as sa
from glob import glob
import os
from os.path import join as _join
from os.path import split as _split
from os.path import exists as _exists
from datetime import datetime

import socket

# revision identifiers, used by Alembic.
revision = 'cac20a11c2cb'
down_revision = '28e48afd0090'
branch_labels = None
depends_on = None

_hostname = socket.gethostname()

def get_wd(runid):
    legacy = _join('/geodata/weppcloud_runs', runid)
    if _exists(legacy):
        return legacy

    prefix = runid[:2]
    if _hostname.startswith('forest'):
        return _join('/wc1/runs', prefix, runid)
 
    return _join('/geodata/wc1/runs', prefix, runid)
    


def _get_last_modified(runid):
    wd = get_wd(runid)
    nodbs = glob(_join(wd, '*.nodb'))

    last = 0
    for fn in nodbs:
        statbuf = os.stat(fn)
        if statbuf.st_mtime > last:
            last = statbuf.st_mtime

    return datetime.fromtimestamp(last)


def _get_last_accessed(runid):
    wd = get_wd(runid)
    
    head, tail = _split(wd)
    dot_file = _join(head, f'.{tail}')

    if _exists(dot_file):
        with open(dot_file, 'r') as f:
            lines = f.readlines()

        if lines:
            last = lines[-1].strip()
                
            _date = last.split(',')[-1].strip()
            return datetime.strptime(_date, '%Y-%m-%d %H:%M:%S.%f')

    return None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('run', schema=None) as batch_op:
        batch_op.add_column(sa.Column('last_modified', sa.DateTime(), nullable=True))
        batch_op.add_column(sa.Column('last_accessed', sa.DateTime(), nullable=True))

    # Update existing runs with last_modified and last_accessed
    connection = op.get_bind()
    runs = connection.execute(
        sa.text("SELECT runid FROM run")
    ).fetchall()

    for row in runs:
        runid = row['runid']
        try:
            last_modified = _get_last_modified(runid)
        except Exception as e:
            print(f"Error getting last_modified for run {runid}: {e}")
            last_modified = None

        try:
            last_accessed = _get_last_accessed(runid)
        except:
            print(f"Error getting last_accessed for run {runid}: {e}")
            last_accessed = None

        connection.execute(
            sa.text(
                "UPDATE run "
                "SET last_modified = :lm, last_accessed = :la "
                "WHERE runid = :runid"
            ),
            {"lm": last_modified, "la": last_accessed, "runid": runid}
        )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('run', schema=None) as batch_op:
        batch_op.drop_column('last_accessed')
        batch_op.drop_column('last_modified')

    # ### end Alembic commands ###
